----------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  gmatch_example
       log:  C:\Users\kkranker\Documents\Stata\Ado\Devel\gmatch\gmatch_example.log
  log type:  text
 opened on:  12 Feb 2018, 20:46:55

. 
. // Multiple-equation models: An introduction and potential applications to our work at Mathematica
. // Design and methods “brown bag” workshop
. // April 8, 2015
. // Keith Kranker
. 
. // Stata_code_2_IPW.do This program includes all the examples in the powerpoint slides, plus more.
. // This program includes examples of how to code inverse propensity weighting (IPW) estimators using Stata's GMM command
. 
. include C:\Users\kkranker\Documents\Stata\Ado\Devel\gmatch\gmatchclass.mata

. * clear all
. * cls
. 
. mata:
------------------------------------------------- mata (type end to exit) --------------------------------------------------------------------------------------
: 
: mata set matastrict on

: 
: class gmatch
> {
>   private:
>     real colvector   T, W, sel1, sel0, Y0, W_orig
>     real matrix      X, XC, Xstd
>     string scalar    treatvar, depvars, wgtvar
>     string rowvector varlist
>     real rowvector   means1, means0, meansP, variances0, variances1, variancesP, variancesA
>     real matrix      covariances0, covariances1, covariancesP, covariancesA
>     void             calcmeans(), calcvariances(), calcN(), calccovariances(), cbps_port_stata(), cbps_port_r()
>     real scalar      N1, N0, N, N1_raw, N0_raw, N_raw
>     real scalar      mean_sd_sq(),  entropydistance()
>     real rowvector   olsbeta(), diagvariance(), logitbeta(), sd_sq(), asd()
>     real colvector   olspredict(), logitpredict(), logitweights(), cbps_port_stata_moments(), trim()
>     real matrix      cbps_port_stata_wgt_matrix(), cbps_port_stata_gradient()
> 
>   public:
>     void             new(), set(), set_W(), set_Y(), clone(), multweight(), cbpseval()
>     real rowvector   diff(), stddiff(), varratio(), prognosticdiff(), pomean()
>     real scalar      mean_asd(), max_asd()
>     real colvector   ipw(), cbps()
>     real matrix      balancetable()
> }

: 
: // The following functions read data into the instance of the class
: // set_W() needs to be called after set_T()
: void gmatch::new()
> {
>   // /* */ "New instance of gmatch() created"
>   // /* */ "gmatch::new() doesn't do anything"
>   // /* */ "T is " + strofreal(rows(this.T)) + " by " + strofreal(cols(this.T))
>   this.depvars = ""
> }

: 
: // clones a copy of an instant
: // this isn't completely efficient -- views will be variables after the clone
: void gmatch::clone(class gmatch scalar src)
> {
>   this.N        = src.N
>   this.N_raw    = src.N_raw
>   this.N0       = src.N0
>   this.N0_raw   = src.N0_raw
>   this.N1       = src.N1
>   this.N1_raw   = src.N1_raw
>   this.T        = src.T
>   this.W        = src.W
>   this.W_orig   = src.W_orig
>   this.X        = src.X
>   this.XC       = src.XC
>   this.Y0       = src.Y0
>   this.depvars  = src.depvars
>   this.sel0     = src.sel0
>   this.sel1     = src.sel1
>   this.treatvar = src.treatvar
>   this.varlist  = src.varlist
>   this.wgtvar   = src.wgtvar
> }

: 
: void gmatch::set(string scalar treatvar, string scalar varlist, string scalar tousevar, | string scalar wgtvar)
> {
>   // Define treatment dummy
>   this.T=this.X=this.W=.
>   this.treatvar = treatvar
>   st_view(this.T, ., treatvar, tousevar)
>   // /* */  "T is " + strofreal(rows(this.T)) + " by " + strofreal(cols(this.T))
> 
>   // Define covariates
>   this.varlist  = tokens(varlist)
>   st_view(this.X , .,    this.varlist                , tousevar)
>   /* */  "X contains" ; this.varlist
>   /* */  "X is " + strofreal(rows(this.X)) + " by " + strofreal(cols(this.X))
> 
>   // Define weights
>   // This code assumes weights are **already** normalized. Here's code to normalize: this.W = this.W :/ (rows(this.W) / quadcolsum(this.W))
>   if (args()>=4) {
>     this.wgtvar = wgtvar
>     st_view(this.W_orig, ., this.wgtvar, tousevar) // an extra copy of the weight variable that can only be set via this function. Useful for reweighting/matc
> hing situations.
>     this.W = this.W_orig // W_orig is a view, but W is not
>     // /* */  "W is " + strofreal(rows(this.W)) + " by " + strofreal(cols(this.W))
>   }
>   else {
>     this.W = this.W_orig = J(rows(T),1,1)
>     "Data are unweighted."
>   }
>   this.calcN()
>   strofreal(this.N0_raw) + " control obs (sum of weights = " + strofreal(this.N0) + ")"
>   strofreal(this.N1_raw) + " treatment obs (sum of weights = " + strofreal(this.N1) + ")"
> }

: 
: void gmatch::calcN() {
> 
>   // Index to select observations in control and treatment groups
>   this.sel0 = selectindex(!this.T :& this.W)
>   this.sel1 = selectindex( this.T :& this.W)
> 
>   // Save number of observations
>   this.N0_raw = rows(this.sel0)
>   this.N1_raw = rows(this.sel1)
>   this.N_raw = this.N0_raw + this.N1_raw
>   if (min((this.N0_raw,this.N1_raw)==0)) _error("At least one treatment and control observation required.")
> 
>   // Save weighted number of observations
>   this.N0 = quadcolsum(this.W[this.sel0])
>   this.N1 = quadcolsum(this.W[this.sel1])
>   this.N = this.N0 + this.N1
>   if (min((this.N0,this.N1)==0)) _error("Sum of weights is 0 in the treatment or control group.")
> 
>   // these means/varinaces are saved internally in the class (to avoid computing them over and over).
>   // They need to be reset because we just reweighted the sample.
>   // If I'm re-calcuating sample sizes, this is probably the case.  Set to missing here just to be safe.
>   this.means0 = this.means1 = this.variances0 = this.variances1 = this.variancesP = this.variancesA = J(1,0,.)
>   this.covariances0 = this.covariances1 = this.covariancesP = this.covariancesA = J(0,0,.)
> 
> }

: 
: // Note: this function doesn't allow the class to touch the treatment group's outcome data
: void gmatch::set_Y(string scalar depvarnames, string scalar tousevar)
> {
>   real colvector Y
>   this.depvars = tokens(depvarnames)
>   Y=.
>   st_view(Y, ., this.depvars, tousevar)
>   st_select(this.Y0, Y, !this.T)
>   // /* */  "Y0 is " + strofreal(rows(this.Y0)) + " by " + strofreal(cols(this.Y0))
> }

: 
: // multipy the original weights by something
: void gmatch::multweight(|real colvector newweight)
> {
>   if (args()<1) newweight=1
>   this.W = this.W_orig :* newweight
>   // some new weights could be zero.  recalculate N and set means/variances to missing.
>   this.calcN()
>   this.means0 = this.means1 = this.variances0 = this.variances1 = this.variancesP = this.variancesA = J(1,0,.)
>   this.covariances0 = this.covariances1 = this.covariancesP = this.covariancesA = J(0,0,.)
> }

: 
: 
: // This function makes a balance table and prints it to the screen
: // The argument is the same as their definition in stddiff() and varratio()
: real matrix gmatch::balancetable(| real scalar denominator)
> {
>   real matrix table
>   if (args()<1) denominator=1
> 
>   if (!length(this.means1))     this.calcmeans()
>   if (!length(this.variances1)) this.calcvariances()
> 
>   table = ( this.means1
>           \ this.means0
>           \ this.diff()
>           \ this.stddiff(denominator)
>           \ (denominator==0 ? sqrt(this.variances0) : (denominator==1 ? sqrt(this.variances1) : (denominator==2 ? sqrt(this.variancesP) : (denominator==3 ? sq
> rt(this.variancesA) : _error("denominator argument invalid")))))
>           \ this.varratio())'
> 
>   // print to screen with labels
>   (("Variable" \ varlist'),
>   (( "mean (T)",
>      "mean (C)",
>      "diff()",
>      "stddiff()",
>      (denominator==0 ? "sd (C)" : (denominator==1 ? "sd (T)" : (denominator==2 ? "sd (Pooled)" : (denominator==3 ? "sd (Avg)" : "")))),
>      "varratio()")
>      \ strofreal(table) ))
> 
>   return(table)
> }

: 
: // This function calculates the means for the T and C groups
: // These means are saved internally in the class (to avoid computing them over and over)
: // Call this function whenever sample or weights change
: void gmatch::calcmeans()
> {
>   this.means0 = mean(this.X[this.sel0, .], this.W[this.sel0])
>   this.means1 = mean(this.X[this.sel1, .], this.W[this.sel1])
>   this.meansP = mean(this.X, this.W)
>   // /* */ "Control group means:"  ; this.means0
>   // /* */ "Treatment group means:"; this.means1
> }

: 
: // This function calculates the difference in means between the T and C groups
: real rowvector gmatch::diff()
> {
>   if (!length(this.means1)) this.calcmeans()
>   return(this.means1 :- this.means0)
> }

: 
: 
: real scalar gmatch::entropydistance(real colvector x, | real colvector w) {
>   real colvector e
>   real scalar sumw
>   if (args()<2) {
>     w=1
>     sumw=rows(x)
>   }
>   else {
>     sumw=quadcolsum(w)
>   }
> 
>   // for me, the sum of weights is rows(x) (unweighted) or sum(w) (weighted)
>   // in entropy balancing from Hainmueller et al., the sum of the weights = 1.
>   e = x :* ln( x :* sumw )
>   return( quadcolsum( e ) )
> }

: 
: 
: // Define function diagvariance(x, w) == diagonal(quadvariance(x, w))'
: // This function can be a lot faster than quadvariance, especially when you have lots of columns.
: // Optionally, you can provide weights and/or provide a rowvector with the column means.
: // For testing, mreldif(diagvariance(X, w), diagonal(quadvariance(X, w))') should be small
: real rowvector gmatch::diagvariance(real matrix x, | real colvector w, real rowvector xmean)
> {
>   real rowvector v
>   if (args()<2) w = 1
>   if (args()<3) xmean = mean(x, w)
> 
>   if (all(w:==1)) v = quadcolsum( (x:-xmean):^2)     / (rows(x)-1)
>   else            v = quadcolsum(((x:-xmean):^2):*w) / (quadcolsum(w)-1)
>   return(v)
> }

: 
: // This function calculates the variances for the T and C group,
: // These variances are saved internally in the class (to avoid computing them over and over)
: // Call this function whenever sample or weights change
: void gmatch::calcvariances()
> {
>   if (!length(this.means1)) this.calcmeans()
>   this.variances0 = this.diagvariance(this.X[this.sel0, .], this.W[this.sel0], this.means0)
>   this.variances1 = this.diagvariance(this.X[this.sel1, .], this.W[this.sel1], this.means1)
>   this.variancesP = this.diagvariance(this.X, this.W)
>   this.variancesA = (this.variances0 :+ this.variances1) :/ 2
>   // /* */ "Control group variances:"; this.variances0
>   // /* */ "Treatment group variances:"; this.variances1
>   // /* */ "Pooled variances:"; this.variancesP
>   // /* */ "Average of variances from treatment and control groups"; this.variancesA
> }

: 
: // This function calculates the variances for the T and C group,
: // and saves the results in private variables
: void gmatch::calccovariances()
> {
>   if (all(this.W:==1)) {
>     this.covariances0 = quadvariance(this.X[this.sel0, .])
>     this.covariances1 = quadvariance(this.X[this.sel1, .])
>     this.covariancesP = quadvariance(this.X)
>   }
>   else {
>     this.covariances0 = quadvariance(this.X[this.sel0, .], this.W[this.sel0])
>     this.covariances1 = quadvariance(this.X[this.sel1, .], this.W[this.sel1])
>     this.covariancesP = quadvariance(this.X, this.W)
>   }
>   this.covariancesA = (this.covariances0 :+ this.covariances1) :/ 2
>   // /* */ "Control group covariances:"; this.covariances0
>   // /* */ "Treatment group covariances:"; this.covariances1
>   // /* */ "Pooled covariances:"; this.covariancesP
>   // /* */ "Average of covariances from treatment and control groups"; this.covariancesA
>   this.variances0 = diagonal(this.covariances0)'
>   this.variances1 = diagonal(this.covariances1)'
>   this.variancesP = diagonal(this.covariancesP)'
>   this.variancesA = diagonal(this.covariancesA)'
>   // /* */ "Average of variances from treatment and control groups"; this.variancesA
> }

: 
: // This function calculates standardized differences in means between the T and C groups
: // The first argument is optional, and tells the function which variance to use in the denominator
: //    = 0, it uses the control groups' variances
: //    = 1, it uses the treatment groups' variances (this is the default)
: //    = 2, it uses the pooled variances
: //    = 3, it uses (control groups' variances + treatment groups' variances)/2  (the definition from Stata's tbalance command)
: real rowvector gmatch::stddiff(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   real rowvector stddiff
>   if (!length(this.variances1)) this.calcvariances()
>   if      (denominator==0) stddiff = (this.diff() :/ sqrt(this.variances0))
>   else if (denominator==1) stddiff = (this.diff() :/ sqrt(this.variances1))
>   else if (denominator==2) stddiff = (this.diff() :/ sqrt(this.variancesP))
>   else if (denominator==3) stddiff = (this.diff() :/ sqrt(this.variancesA))
>   else _error(strofreal(denominator)+ " is an invalid argument for gmatch::stddiff()")
>   return(stddiff)
> }

: 
: // functions to return mean/max absolute standardized differences
: real rowvector gmatch::asd(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(abs(this.stddiff(denominator)))
> }

: real rowvector gmatch::sd_sq(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(this.stddiff(denominator):^2)
> }

: real scalar gmatch::mean_asd(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(mean(this.asd(denominator)'))
> }

: real scalar gmatch::max_asd(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(max(this.asd(denominator)))
> }

: real scalar gmatch::mean_sd_sq(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(mean(this.stddiff(denominator)')^2)
> }

: 
: 
: // This function calculates ratio of variances between the T and C groups
: real rowvector gmatch::varratio()
> {
>   if  (!length(this.variances1)) this.calcvariances()
>   return((this.variances1 :/ this.variances0))
> }

: 
: 
: // function that returns difference in y_hat, where y_hat is generated using a
: // OLS regression of y on X using the control group data
: real rowvector gmatch::prognosticdiff()
> {
>   real rowvector beta, progdiff
>   real colvector yhat
>   real scalar yhat_bar_0, yhat_bar_1, c
>   if (!length(this.depvars)) _error("Dependent variable is undefined.  Use gmatch::set_Y().")
> 
>   yhat = J(rows(this.X), cols(this.Y0), .)
>   for (c=1; c<=cols(this.Y0); c++) {
>     beta = this.olsbeta(this.Y0[.,c], this.X[this.sel0,.], this.W[this.sel0])
>     yhat[.,c] = this.olspredict(this.X, beta)
>   }
> 
>   yhat_bar_0 = mean(yhat[this.sel0,.], this.W[this.sel0])
>   yhat_bar_1 = mean(yhat[this.sel1,.], this.W[this.sel1])
>   progdiff = yhat_bar_1 :- yhat_bar_0
> 
>   // print to screen with labels
>   (("Dependent var." \ depvars'),
>   (( "mean of y_hat (T)", "mean of y_hat (C)","prognosticdiff()")
>     \ strofreal((yhat_bar_1', yhat_bar_0', progdiff'))))
> 
>   return(progdiff)
> }

: 
: 
: // Define function to calculate coefficients for an OLS regression model
: // A contant term is included in the regression.
: real rowvector gmatch::olsbeta(real matrix y, real matrix X, | real colvector w, real scalar addconst)
> {
>   real colvector beta
>   real matrix XX, Xy
>   if (args()<3) w=1
>   if (args()<4) addconst=1
> 
>   if (addconst) {
>     XX = quadcross(X, 1, w, X, 1)
>     Xy = quadcross(X, 1, w, y, 0)
>     beta = invsym(XX,(cols(X)+1))*Xy
>   }
>   else {
>     XX = quadcross(X, 0, w, X, 0)
>     Xy = quadcross(X, 0, w, y, 0)
>     beta = invsym(XX)*Xy
>   }
>   return(beta')
> }

: 
: // Function that returns predicted values, X*beta'
: // If cols(X)+1==cols(beta), the function assumes the last coefficient corresponds to the constant term, and X just doesn't have a constant term
: // Warning: this function doesn't check the conformability; I rely on Stata to produce errors with invalid arguments
: real colvector gmatch::olspredict(real matrix X, real rowvector beta)
> {
>   if ((cols(X)==cols(beta)) & cols(beta)) {
>     return(X*beta')
>   }
>   else if ((cols(X)==cols(beta)-1) & cols(beta)) {
>     return((X*beta[1..(cols(beta)-1)]') :+ beta[cols(beta)])
>   }
>   else _error("X and beta are not conformable.")
> }

: 
: 
: // function that returns IPW weights
: //    est corresponds to the options in gmatch::logitweights()
: //    est = "ate"  computes weights for average treatment effect (the default)
: //        = "atet" computes weights for average treatment effect on the treated
: //        = "ateu" computes weights for average treatment effect on the untreated
: real colvector gmatch::ipw(string scalar est)
> {
>   real rowvector beta
>   real colvector pscore, ipwwgt
>   if (args()<1) est="ate"
>   beta   = this.logitbeta(this.T, this.X, this.W, 1)
>   /* */ "propensity score (logit) model beta:"; beta
>   pscore = this.logitpredict(this.X, beta)
>   ipwwgt = this.logitweights(pscore, est)
>   return(ipwwgt)
> }

: 
: 
: // function that returns (weighted) mean of the dependent variable(s)
: real rowvector gmatch::pomean()
> {
>   if (this.depvars=="") _error("dependent variable not defined. use gmatch::set_Y()")
>   return( mean(this.Y0, this.W[this.sel0]) )
> }

: 
: // Function that returns predicted values (e.g., propensity scores) if given the X's and betas, using the logit model functional form
: // If cols(X)+1==cols(beta), the function assumes the last coefficient corresponds to a constant term, and X just doesn't include it
: // Warning: this function doesn't check the conformability; I assume Stata will produce an error with invalid arguments
: real colvector gmatch::logitpredict(real matrix X, real rowvector beta)
> {
>   if ((cols(X)==cols(beta)) & cols(beta)) {
>     return(invlogit(X*beta'))
>   }
>   else if ((cols(X)==cols(beta)-1) & cols(beta)) {
>     return(invlogit((X*beta[1..(cols(beta)-1)]') :+ beta[cols(beta)]))
>   }
>   else _error("X and beta are not conformable.")
> }

: 
: // trims a generic column vector, x
: // by default, trimming is at 1e-6 and 1-1e-6, which is useful for trimming propensity scores very close to 0 or 1
: real colvector gmatch::trim(real colvector x, | real scalar minval, real scalar maxval)
> {
>   real colvector out
>   if (args()<2) minval = 1e-6
>   if (args()<3) maxval = 1-minval
>   out = rowmax((J(rows(x),1,minval),rowmin((J(rows(x),1,maxval),x))))
>   return(out)
> }

: 
: // This turns a vector of pscores into IPW weights. this assumes a logit setup.
: // Formulas match the normalized weights in Stata's teffects IPW command
: //    pscore is a vector of propensity scores
: //    est = "ate"  computes weights for average treatment effect (the default)
: //        = "atet" computes weights for average treatment effect on the treated
: //        = "ateu" computes weights for average treatment effect on the untreated
: real colvector gmatch::logitweights(real colvector pscore, | string scalar est)
> {
>   real colvector pm
>   real matrix ipwwgt
>   if (args()<2) est="ate"
> 
>   if (any(pscore:<=0) | any(pscore:>=1)) _error("Propensity scores need to be greater than 0 and less than 1.")
> //  /* */ if (minmax[1,1]<=0.03 & (strlower(est)=="ate" | strlower(est)=="ateu")) errprintf("Warning: minimum propensity score is %12.0g \n", minmax[1,1])
> //  /* */ if (minmax[1,2]>=0.97 & (strlower(est)=="ate" | strlower(est)=="atet")) errprintf("Warning: maximum propensity score is %12.0g \n", minmax[1,2])
> 
>   pm = 1 :- (!this.T)
>   if      (strlower(est)=="ate")   ipwwgt = (pm :/pscore) :+ (!pm:/(1:-pscore))
>   else if (strlower(est)=="atet")  ipwwgt =  pm :+ (!pm :* (pscore:/(1:-pscore)))
>   else if (strlower(est)=="ateu")  ipwwgt = !pm :+ ( pm :* ((1:-pscore):/pscore))
>   else _error(est + " is an invalid argument for gmatch::logitweights()")
> 
>   // normalize the weights to have mean 1 in each group
>   if (strlower(est)=="ate" | strlower(est)=="atet") ipwwgt[this.sel0] = ipwwgt[this.sel0] :/ mean(ipwwgt[this.sel0], this.W[this.sel0])
>   if (strlower(est)=="ate" | strlower(est)=="ateu") ipwwgt[this.sel1] = ipwwgt[this.sel1] :/ mean(ipwwgt[this.sel1], this.W[this.sel1])
>   return(ipwwgt)
> }

: 
: // Define function to calculate coefficients for a logit regression model
: // A contant term is added to the model and its coefficient is included in the vector of betas
: real rowvector gmatch::logitbeta(real colvector Ymat, real matrix Xmat, | real colvector Wmat, real scalar addconst)
> {
>   transmorphic S
>   if (args()<4) addconst=1
>   S=moptimize_init()
>   moptimize_init_evaluator(S, &logit_eval())
>   moptimize_init_evaluatortype(S,"lf")
>   moptimize_init_depvar(S,1,Ymat)
>   moptimize_init_eq_indepvars(S,1,Xmat)
>   if (!addconst) moptimize_init_eq_cons(S, 1, "off")
>   if (args()>=3 & any(Wmat:!=1)) moptimize_init_weight(S, Wmat)
>   moptimize_init_eq_colnames(S, 1, (J(1,cols(Xmat),"x") + strofreal((1..cols(Xmat)))))
>   moptimize_init_vcetype(S, "robust")
> 
>   moptimize(S)
>   // /* */ "Logit model coefficients and robust standard errors:"; moptimize_result_display(S)
>   return(moptimize_result_coefs(S))
> }

: 
: void logit_eval(transmorphic S, real rowvector beta, real colvector lnf)
> {
>   real colvector Y, pm, xb, lj
>   Y  = moptimize_util_depvar(S, 1)
>   xb = moptimize_util_xb(S, beta, 1)
>   pm = 2*(Y :!= 0) :- 1
>   lj = invlogit(pm:*xb)
>   if (any(lj :== 0)) {
>     lnf = .
>     return
>   }
>   lnf  = ln(lj)
> }

: 
: // function that returns CBPS weights
: //    est corresponds to the options in gmatch::logitweights()
: //        "ate"  computes weights for average treatment effect (the default)
: //        "atet" computes weights for average treatment effect on the treated
: //        "ateu" computes weights for average treatment effect on the untreated
: //    fctn corresponds to the balance measure
: //        "mean_sd_sq" minimizes the mean standardized difference squared
: //    denominator is passed to stddiff() and related functions
: //    oid=1 turns on the "over-identified" version of the CBPS model; oid=0 leaves it off
: //    cvopt adds the CV of the matching weights to the optimization objective function
: //         Let loss_0 be the ojbective function and CV be the coefficient of variabtion of the matching weights
: //         Provided a 1*3 rowvector, (a,b,c), then the loss function is modified as
: //         loss = loss_0 + b * abs((CV - a)^c)
: //         The default is a=0 (prefer no variation in weights)
: //                        b=0 (the loss function is unmodified)
: //                        c=2 (a quadratic)
: real colvector gmatch::cbps(| string scalar est, string scalar fctn, real scalar denominator, real scalar oid, real rowvector cvopt)
> {
>   real rowvector beta
>   real colvector pscore, cbpswgt
>   real matrix ww
>   real scalar unnorm
>   class gmatch scalar M
>   if (args()<1) est="ate"
>   if (args()<2) fctn="sd_sq"
>   if (args()<3) denominator=1
>   if (args()<4) oid=0
>   if (args()<5) cvopt=(0,0,0)
> 
>   // If the user is asking for the IPW result, just call my ipw() function
>   if (fctn=="ipw" & cvopt[1]==0) return(this.ipw(est))
> 
>   // I have two implimentations of the CBPS function.  Here I pick the one I need.
>   // cbps_port_stata - has the gradient functions built in (so it converges faster)
>   //                 - but it cannot deal with weighted data.
>   //                 - was based on the Stata implimentation of CBPS by Filip Premik
>   // cbps_port_r     - works with weighted data
>   //                 - doesn't have the gradient functions, and therefore 
>   //                      (1) works with cvopt and 
>   //                      (2) converges more slowly
>   //                 - was based on the R implimentation of CBPS on CRAN by Imai et al.
>   else if (fctn=="cbps" & cvopt[1]==0 & all(this.W:==1)) fctn="cbps_port_stata"
>   else if (fctn=="cbps")                                 fctn="cbps_port_r"
> 
>   // I'm cloning so that I can reweight the dataset to calculate objective function
>   // ALl views are turned into regular variables
>   M.clone(this)
>   if (isview(M.W)) _error("Something is wrong with the clone")
> 
>   transmorphic S
>   S=optimize_init()
>   optimize_init_evaluator(S, &cbps_eval())
>   optimize_init_which(S, "min")
>   optimize_init_argument(S, 1, M)
>   optimize_init_argument(S, 2, est)
>   optimize_init_argument(S, 3, fctn)
>   optimize_init_argument(S, 4, denominator)
>   optimize_init_argument(S, 5, oid)
>   optimize_init_argument(S, 6, cvopt)
>   optimize_init_singularHmethod(S,"hybrid")  // equivalent to ml's "difficult" option
>   optimize_init_conv_maxiter(S, 120)         // probably want to make this setable
>   optimize_init_technique(S, "bfgs 12 nr 12")
>   optimize_init_tracelevel(S, "value" )  // "none", "value", "params"
> 
>   // the remaining optimization options depend on the method
>   if (fctn=="cbps_port_r") {
>     optimize_init_conv_ptol(S,  1e-13)
>     optimize_init_conv_vtol(S,  1e-14)
>     optimize_init_conv_nrtol(S, 1e-12)
>     optimize_init_evaluatortype(S,"d0")
>   }
>   else if (fctn=="cbps_port_stata") {
>     optimize_init_conv_ptol(S,  1e-13)
>     optimize_init_conv_vtol(S,  1e-14)
>     optimize_init_conv_nrtol(S, 1e-12)
>     if (oid)  optimize_init_evaluatortype(S,"gf1")  // for overidentified version
>     else      optimize_init_evaluatortype(S,"d1")   // d1 if I'm running plain vanilla. otherwise just use "do" (numerical gradient)
>   }
>   else if (fctn=="mean_sd_sq" | fctn=="sd_sq") {
>     if (fctn=="sd_sq") optimize_init_evaluatortype(S,"gf0")
>     else               optimize_init_evaluatortype(S,"d0")
> /* */   // optimize_init_conv_ignorenrtol(S, "off")
> /* */   // optimize_init_conv_ptol(S,  1e-10)
> /* */   // optimize_init_conv_vtol(S,  1e-11)
> /* */   // optimize_init_conv_nrtol(S, 1e-9)
> /* */ optimize_init_singularHmethod(S,"m-marquardt")  // "hybrid" is equivalent to ml's "difficult" option
> /* */ optimize_init_conv_ignorenrtol(S, "on")
> /* */   optimize_init_conv_ptol(S, 1e-7)
> /* */   optimize_init_conv_vtol(S, 1e-8)
> /* */   optimize_init_conv_nrtol(S, 1e-6)
>   }
>   else {
>     /* */ (fctn + " is invalid with gmatch::cbps()")
>     /* */ return(.)
>     /* */ // _error(fctn + " is invalid with gmatch::cbps()")
> 
>   }
> 
>   // for certain methods,
>   // -- normalize Xs to mean 0, sd 1
>   // -- add a constant term
>   if (fctn=="cbps_port_r") {
>     real matrix meansP_orig, sdP_orig, svd_s, svd_v, svd_s_inv
>     unnorm = 1
>     if (!length(M.variances1)) this.calcvariances()
>     meansP_orig = mean(M.X, M.W)
>     sdP_orig = sqrt(this.diagvariance(M.X, M.W))
>     M.Xstd = (J(M.N_raw,1,1), (M.X :- meansP_orig) :/ sdP_orig )
>     _svd(M.Xstd, svd_s, svd_v)
>   }
>   else if (fctn=="cbps_port_stata") {
>     unnorm=0
>     if (!length(M.XC)) M.XC = (M.X, J(M.N_raw,1,1)) // not the most efficient -- data is copied from a view into a matrix -- but at least I only do it once
>   }
>   else unnorm=0
> 
>   "Step 1 (initial values from logit model):"
>   real rowvector beta_logit
>   if (fctn=="cbps_port_r") beta_logit = M.logitbeta(M.T, M.Xstd, M.W, 0)
>   else                     beta_logit = M.logitbeta(M.T, M.X, M.W, 1)
>   optimize_init_params(S, beta_logit)
>   // /* */ "  optimize_init_params(S)";   optimize_init_params(S)
>   // /* */ "optimize_result_value0(S)"; optimize_result_value0(S)
> 
>   // This is an extra matrix the can be passed to optimiztion engine. I use it for different purposes.
>   // It is only calculated once -- not once every time the ojective function is called.
>   if (fctn=="cbps_port_stata") {
>     // is this just M.covariancesP ?
>     ww = M.cbps_port_stata_wgt_matrix(beta_logit, oid, est)
>     ww = invsym(ww)
>   }
>   else if (fctn=="cbps_port_r" & !oid) {
>     if (!oid) ww = invsym(quadcross(M.Xstd,M.W,M.Xstd))
>   }
>   else ww = .
>   optimize_init_argument(S, 7, ww)
>   ""
> 
> // /* */ real todo__, lnf__, g__, H__
> // /* */ cbps_eval(todo__=0, beta_logit, M, est, fctn, denominator, oid, cvopt, ww, lnf__=., g__=., H__=.)
> // /* */ "Iteration X:   f(p) =" + strofreal(lnf__[1,1])
> // /* */  "todo"; todo
> // /* */  "beta_logit"; beta_logit
> // /* */  "est"; est
> // /* */  "fctn"; fctn
> // /* */  "denominator"; denominator
> // /* */  "oid, "; oid
> // /* */  "ww"; ww
> // /* */  "lnf__"; lnf__
> // /* */  "g__ "; g__
> // /* */  "H__"; H__
> 
> 
>  // if (fctn=="cbps_port_r")  _error("X")
> 
>   "Step 2 (CBPS) :"
>   /* */ // This temp code keeps optimize() from producing an error
>   /* */ // Once it's working switch back to
>   /* */ // (void) optimize(S)
>   /* */ (void) _optimize(S)
>   /* */               if (optimize_result_returncode(S)!=0) {
>   /* */                       errprintf("{p}\n")
>   /* */                       errprintf("%s\n", optimize_result_errortext(S))
>   /* */                       errprintf("\nExiting the function early.\n")
>   /* */                       errprintf("{p_end}\n")
>   /* */                       "current beta"; optimize_result_params(S)
>   /* */                       // exit(optimize_result_returncode(S))
>   /* */                       return(J(M.N,1,.))
>   /* */               }
>   /* */ "optimize_result_iterations(S)"; optimize_result_iterations(S)
>   beta    = optimize_result_params(S)
> 
>   // undoing the normalization and SVD
>   if (unnorm)  {
>     M.Xstd = .
>     svd_s_inv = svd_s:^-1
>     svd_s_inv = svd_s_inv :* (svd_s :> 1e-5)
>     beta = (svd_v' * diag(svd_s_inv) * beta')'
>     beta[2::cols(beta)] = (beta[2::cols(beta)] :/ sdP_orig)
>     beta[1] = beta[1] :- meansP_orig * beta[2..cols(beta)]'
>     beta = (beta[2::cols(beta)] , beta[1]) // teh CBPS R code puts the contstant in the first column, but I want it in the last column (stata standard and to 
> work with logit predict)
>     /* */ "CBPS beta after undoing the normalization"; ((M.varlist,"_cons")', strofreal(beta)')
>   }
>   else {
>     /* */ "CBPS beta"; ( (M.varlist,"_cons")', strofreal(beta)')
>   }
> 
>   pscore  = M.logitpredict(M.X, beta)
>   pscore  = M.trim(pscore)
> 
>   cbpswgt = M.logitweights(pscore, est)
>   /* */ "Weights for first 10 observations:";  cbpswgt[1..10]'
>   /* */ "Weights for first 10 observations / N:"
>   /* */ real colvector cbpswgtsum1
>   /* */ cbpswgtsum1 = cbpswgt
>   /* */ cbpswgtsum1[M.sel0] = cbpswgtsum1[M.sel0] :/ quadsum(cbpswgtsum1[M.sel0] :* M.W[M.sel0])
>   /* */ cbpswgtsum1[M.sel1] = cbpswgtsum1[M.sel1] :/ quadsum(cbpswgtsum1[M.sel1] :* M.W[M.sel1])
>   /* */ cbpswgtsum1[1..10]'
> 
>   /* */ M.multweight(cbpswgt)
>   /* */ "Balance after CBPS (" + fctn + "):"
>   /* */ "optimize_result_value(S)" ; optimize_result_value(S)
>   /* */ "balance table after matching (" + fctn + "):"; real matrix temp; temp = M.balancetable(denominator)
>   /* */ "entropydistance of control weights (" + fctn + "):"; (M.entropydistance(cbpswgt[M.sel0], M.W_orig[M.sel0]))
>   /* */ "cv of control weights (" + fctn + "):"; (sqrt(M.diagvariance(cbpswgt[M.sel0], M.W_orig[M.sel0])) :/  mean(cbpswgt[M.sel0], M.W_orig[M.sel0]))
>   /* */ "M.mean_sd_sq(denominator)";  M.mean_sd_sq(denominator)
>   /* */ "M.mean_asd(denominator)"  ;  M.mean_asd(denominator)
>   /* */ "M.max_asd(denominator)"   ;  M.max_asd(denominator)
>   /* */ "M.sd_sq(denominator)"     ;  M.sd_sq(denominator)
>   /* */ "M.asd(denominator)"       ;  M.asd(denominator)
>   /* */ ""; ""; ""; ""; ""; ""; ""
> 
>   return(cbpswgt)
> }
note: variable svd_s may be used before set
note: variable svd_v may be used before set
note: variable temp set but not used

: 
: // helper function -- note this is not a member of the class
: void cbps_eval(real todo, real beta,
>                class gmatch scalar M,
>                string est, string fctn, real denominator, real oid, real cvopt, real ww,
>                real lnf, real g, real H)
> {
>   M.cbpseval(todo,beta,est,fctn,denominator,oid,cvopt,ww,lnf,g,H)
> }

: 
: 
: void gmatch::cbpseval( real   scalar    todo,
>                        real   rowvector beta,
>                        string scalar    est,
>                        string scalar    fctn,
>                        real   scalar    denominator,
>                        real   scalar    oid,
>                        real   rowvector cvopt,
>                        real   matrix    ww,
>                        real   matrix    lnf,
>                        real   matrix    g,
>                        real   matrix    H)
> {
>   real colvector  pscore, cbpswgt
>   if      (fctn=="cbps_port_stata")  this.cbps_port_stata(todo,beta,est,oid,ww,lnf,g,H)
>   else if (fctn=="cbps_port_r")      this.cbps_port_r(todo,beta,est,oid,ww,lnf,g,H)
>   else if (fctn=="mean_sd_sq" | fctn=="sd_sq") {
>     pscore = this.logitpredict(this.X, beta)
>     pscore = this.trim(pscore)
>     cbpswgt = this.logitweights(pscore, est)
>     this.multweight(cbpswgt)
>     if      (fctn=="mean_sd_sq")      lnf = this.mean_sd_sq(denominator)
>     else if (fctn=="sd_sq")           lnf = this.sd_sq(denominator)'
>     else                              _error(fctn + " is invalid with gmatch::cbpseval()")
>   }
> 
>   if (cvopt[1]) {
>     // if cvopt=(a,b,c), then loss = loss_0 + b * abs((CV - a)^c)
>     real scalar thiscv
>     if      (strlower(est)=="ate" ) thiscv = sqrt(this.diagvariance(cbpswgt           , this.W_orig           )) :/  mean(cbpswgt           , this.W_orig     
>       )
>     else if (strlower(est)=="atet") thiscv = sqrt(this.diagvariance(cbpswgt[this.sel0], this.W_orig[this.sel0])) :/  mean(cbpswgt[this.sel0], this.W_orig[this
> .sel0])
>     else if (strlower(est)=="ateu") thiscv = sqrt(this.diagvariance(cbpswgt[this.sel1], this.W_orig[this.sel1])) :/  mean(cbpswgt[this.sel1], this.W_orig[this
> .sel1])
>     else     _error(est + " is invalid with cvopt for gmatch::cbpseval()")
>     lnf = lnf + cvopt[2]*abs((thiscv - cvopt[1])^cvopt[3])
>   }
> }

: 
: /* still need clean up all the remaining code -- it could be improved or sped up in various ways */
: 
: 
: // Port of the objective function from the Stata verion of CBPS
: void gmatch::cbps_port_stata( real   scalar    todo,
>                               real   rowvector beta,
>                               string scalar    est,
>                               real   scalar    oid,
>                               real   matrix    ww,
>                               real   matrix    lnf,
>                               real   matrix    g,
>                               real   matrix    H)
> {
>    real colvector  pscore
>    pscore = this.logitpredict(this.X, beta)
>    pscore = this.trim(pscore)
>    real matrix dpscore, gg, G
>    dpscore = pscore:*(1:-pscore)
>    gg = this.cbps_port_stata_moments(pscore, dpscore, oid, est)
>    lnf = gg' * ww * gg
>    if (todo==0) return
>    G = this.cbps_port_stata_gradient(pscore, oid, est)
>    g = G' * ww * gg :* (2:*this.N)
>    g = g'
> }
note: argument H unused

: 
: 
: // Port of the moment function from the Stata verion of CBPS
: real colvector gmatch::cbps_port_stata_moments(real colvector pscore, real matrix dpscore, real scalar overid, string scalar est)
> {
>   real colvector gg
>   if (any(this.W:!=1)) _error("gmatch::cbps_port_stata_moments() does not yet accomodate weighted samples")
> 
> // this is inefficient
>   if (strlower(est)=="ate") {
>       gg=quadcross(this.XC, (this.T-pscore):/pscore:/(1:-pscore)):/this.N_raw
>   }
>   else if (strlower(est)=="atet") {
>       gg=quadcross(this.XC, (this.T-pscore):/(1:-pscore)):/this.N1_raw
>   }
>   else _error(est + " is invalid with gmatch::cbps_port_stata_moments()")
> 
>   if(overid) {
>     gg = (quadcross(this.XC, dpscore:*(this.T-pscore):/pscore:/(1:-pscore)):/this.N_raw \ gg)
>   }
> 
>   gg = gg:/this.N_raw
> 
>   return(gg)
> }

: 
: 
: // Port of the gradient function from the Stata verion of CBPS
: real matrix gmatch::cbps_port_stata_gradient(real colvector pscore, real scalar overid, string scalar est)
> {
>   real matrix G, dw
>   if (strlower(est)=="ate") {
>     G = -(this.XC:*((this.T:-pscore):^2):/pscore:/(1:-pscore))'this.XC
>   }
>   else if (strlower(est)=="atet") {
>     dw=(pscore:*(this.T:-1)):/(1:-pscore):*(this.N_raw/this.N1_raw)
>     G = quadcross(this.XC:*dw, this.XC)
>   }
>   if (overid) {
>     G = ((-(this.XC:*(pscore:*(1:-pscore)))' this.XC) \ G)
>   }
>   G = G :/ this.N
>   return(G)
> }

: 
: 
: // Port of the weighting matrix function from the Stata verion of CBPS
: real matrix gmatch::cbps_port_stata_wgt_matrix(real rowvector beta, real scalar overid, string scalar est)
> {
>   real matrix ww
>   real colvector pscore, dpscore
>   pscore  = this.logitpredict(this.X, beta)
>   pscore  = this.trim(pscore)
>   if (!overid) {
>     if (strlower(est)=="ate") {
>       ww = quadcross(this.XC:/(pscore:*(1:-pscore)), this.XC)
>     }
>     else if (strlower(est)=="atet") {
>       ww = quadcross(this.XC:*(pscore:/(1:-pscore)):*(this.N_raw/this.N1_raw):^2, this.XC)
>     }
>   }
>   else {
>     dpscore = pscore:*(1:-pscore)
>     if (strlower(est)=="ate") {
>       ww = (       quadcross(this.XC:*(dpscore:^2:/pscore:/(1:-pscore)),this.XC), // this seems inefficint. isn't  pscore:/(1:-pscore) = dpscore:^-1 ?
>                    quadcross(this.XC:*(dpscore:/pscore:/(1:-pscore)),this.XC))
>       ww = ( ww \ (quadcross(this.XC:*(dpscore:/pscore:/(1:-pscore)),this.XC),
>                    quadcross(this.XC:*(1:/pscore:/(1:-pscore)),this.XC)))
>     }
>     else if (strlower(est)=="atet") {
>       ww = (       quadcross(this.XC:*(pscore:/(1:-pscore):*dpscore:^2:/pscore:^2),this.XC),
>                    quadcross(this.XC:*(pscore:/(1:-pscore):*dpscore:/pscore):*(this.N_raw/this.N1_raw),this.XC))
>       ww = ( ww \ (quadcross(this.XC:*(pscore:/(1:-pscore):*dpscore:/pscore):*(this.N_raw/this.N1_raw),this.XC),
>                    quadcross(this.XC:*(pscore:/(1:-pscore)):*((this.N_raw/this.N1_raw)^2),this.XC) ))
>     }
>   }
>   ww=ww:/this.N_raw
>   return(ww)
> }

: 
: 
: // Port of the gmm.func()  function from CBPS.Binary.R (version 0.17)
: void gmatch::cbps_port_r(real   scalar    todo,
>                          real   rowvector beta,
>                          string scalar    est,
>                          real   scalar    overid,
>                          real   matrix    ww,
>                          real   matrix    lnf,
>                          real   matrix    g,
>                          real   matrix    H)
> {
>   real colvector pscore, w_cbps
>   pscore = this.logitpredict(this.Xstd, beta)
>   pscore = this.trim(pscore)
>   if (strlower(est)=="atet") {
>      w_cbps = (this.N/this.N1) :* (this.T:-pscore) :/ (1:-pscore)
>   }
>   else if (strlower(est)=="ate") {
>      w_cbps = (pscore:-1:+this.T):^-1
>   }
>   if (!overid) {
>      w_cbps = 1/this.N :* w_cbps
>      lnf = abs(quadcross(w_cbps, this.W, this.Xstd) * ww * quadcross(this.Xstd, this.W, w_cbps))
>   }
>   else {
>     real colvector gbar, wx1, wx2, wx3
>     real matrix V
>     gbar = (quadcross(this.Xstd, this.W, this.T:-pscore) \ quadcross(this.Xstd, this.W, w_cbps)) :/ this.N
>     if (strlower(est)=="atet") {
>       wx1 = this.Xstd:*sqrt((1:-pscore):*pscore)
>       wx2 = this.Xstd:*sqrt(pscore:/(1:-pscore))
>       wx3 = this.Xstd:*sqrt(pscore)
>       V =  (quadcross(wx1, this.W, wx1), quadcross(wx3, this.W, wx3) \
>             quadcross(wx3, this.W, wx3), quadcross(wx2, this.W, wx2) :* (this.N:/this.N1_raw)) :/ this.N1_raw
>     }
>     else if (strlower(est)=="ate") {
>       wx1 = this.Xstd:*sqrt((1:-pscore):*pscore)
>       wx2 = this.Xstd:*((pscore:*(1:-pscore)):^-.5)
>       wx3 = this.Xstd
>       V = (quadcross(wx1, this.W, wx1), quadcross(wx3, this.W, wx3) \
>            quadcross(wx3, this.W, wx3), quadcross(wx2, this.W, wx2)) :/ this.N
>     }
>     else _error(est + " is not allowed.")
>     lnf = gbar' * invsym(V) * gbar
>   }
>   if (todo<1) return
>   else _error("gmatch::cbps_port_r() is not compatable with todo>=1")
> }
note: argument g unused
note: argument H unused

: 
: end
----------------------------------------------------------------------------------------------------------------------------------------------------------------

. 
. 
. version 15.1

. set type double

. di as txt "Current user: `c(username)'" _n "Environment: `c(os)' `c(machine_type)' `: environment computername'" _n "Stata: `c(stata_version)'" cond(c(stata_v
> ersion)==c(version),""," (set to version `c(version)')") _n "Date: " c(current_date) " " c(current_time)
Current user: KKranker
Environment: Windows PC (64-bit x86-64) KKRANKER
Stata: 15.1
Date: 12 Feb 2018 20:46:55

. 
. 
. ************************************************************************************
. * Describe/summarize the example datasets
. ************************************************************************************
. 
. *** Input data file (simple_cattaneo_data) comes from the program named Make_example_datasets.do (in C:\Users\kkranker\Documents\Stata\Multiple-Equation-Model
> s)
. 
. use "C:\Users\kkranker\Documents\Stata\Multiple-Equation-Models\simple_cattaneo_data.dta"
(Cattaneo (2010) study on the effect of maternal smoking on birth weight)

. desc, short

Contains data from C:\Users\kkranker\Documents\Stata\Multiple-Equation-Models\simple_cattaneo_data.dta
  obs:         4,642                          Cattaneo (2010) study on the effect of maternal smoking on birth weight
 vars:            11                          8 Apr 2015 05:07
 size:        55,704                          
Sorted by: 

. notes _dta

_dta:
  1.  Cattaneo (2010) study on the effect of maternal smoking on birth weight
  2.  Dataset created by Keith Kranker (program name: make_example_datasets.do)
  3.  Source: Cattaneo, M. D. 2010. "Efficient Semiparametric Estimation of Multi-Valued Treatment Effects under Ignorability." Journal of Econometrics, 155(2):
      138–154, doi:10.1016/j.jeconom.2009.09.023.
  4.  Source: Almond, D., Chay, K.Y., Lee, D.S., 2005. "The costs of low birth weight." Quarterly Journal of Economics, 120: 1031-1083.
  5.  Original dataset downloaded 4/3/2015 via Stata command ". webuse cattaneo2"
  6.  The variable names in the original datasets are replaced with "generic" names: (1) The outcome variables are named y1 y2 y3... (2) The treatment variable
      is named treat (binary) or treat_cat (categorical). (3) The control variables are named x1 x2 x3...

. summ, sep(0)

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
       treat |      4,642    .1861267    .3892508          0          1
   treat_cat |      4,642    .3996122    .8988632          0          3
          x1 |      4,642    .6996984    .4584385          0          1
          x2 |      4,642    .0340371    .1813439          0          1
          x3 |      4,642    .0534252    .2249042          0          1
          x4 |      4,642    .4379578    .4961893          0          1
          x5 |      4,642    26.50452    5.619026         13         45
          x6 |      4,642    12.68957    2.520661          0         17
          x7 |      4,642    6.540069    3.359167          1         12
          y1 |      4,642     3361.68    578.8196        340       5500
   y1_binary |      4,642    .9396812    .2381022          0          1

. tab treat treat_cat, mi

           |                  treat_cat
     treat | Untreated  1st Treat  2nd Treat  3rd Treat |     Total
-----------+--------------------------------------------+----------
 Untreated |     3,778          0          0          0 |     3,778 
   Treated |         0        200        337        327 |       864 
-----------+--------------------------------------------+----------
     Total |     3,778        200        337        327 |     4,642 


. corr treat y1 y1_binary
(obs=4,642)

             |    treat       y1 y1_bin~y
-------------+---------------------------
       treat |   1.0000
          y1 |  -0.1851   1.0000
   y1_binary |  -0.0997   0.5924   1.0000


. 
. local if if _n<=500

. set seed 1

. gen wgt = max(.1,rnormal(2,.4))

. gen fwgt = round(rnormal(2,.4))

. // forvalues i = 20/200 {
. forvalues i = 90/95 {
  2.   gen x`i' = rnormal()
  3. }

. // expand 5e4 if touse
. // expand 1e5 if touse
. 
. // // give the sample poor overlap
. // tab2    treat x1
. // replace x1 = 1 if  treat & runiform()<.85
. // replace x1 = 0 if !treat & runiform()<.85
. // tab2    treat x1
. 
. 
. local depvars = "y1 y1_binary"

. local treatvar = "treat"

. local varlist = "x1 i.x2 i.x3 x4 x5 x6 x7 x9*"

. // local varlist = "x*"
. // local varlist = "x1 ib0.x2"
. //local wgtvar = "wgt"
. local wgtvar = "wgt"

. local tousevar = "touse"

. local estimate = "atet"

. 
. 
. // some automatic parsing based on options above
. if "`wgtvar'"!="" local wgtexp "[iw=`wgtvar']"

. mark    `tousevar' `if' `in' `wgtexp'

. markout `tousevar' `depvars' `treatvar' `varlist'

. _rmdcoll `treatvar' `varlist' if `tousevar' `wgtexp', expand

. // _rmcoll `treatvar' `varlist' if `tousevar' `wgtexp', expand logit touse(`tousevar')
. // fvexpand `varlist' if `tousevar'
. local varlist `r(varlist)'

. forvalues j=1/`: list sizeof varlist' {
  2.   local v : word `j' of `varlist'
  3.   _ms_parse_parts `v'
  4.   if !r(omit) local varlist1 `"`varlist1' `v'"'
  5. }

. local varlist : copy local varlist1

. 
. fvrevar `varlist'

. export delimited `treatvar' `r(varlist)' `wgtvar' using testfile.csv if `tousevar', replace nolabel
file testfile.csv saved

. 
. mata:
------------------------------------------------- mata (type end to exit) --------------------------------------------------------------------------------------
: 
: depvars  = st_local("depvars" )

: treatvar = st_local("treatvar")

: wgtvar   = st_local("wgtvar"  )

: varlist  = st_local("varlist" )

: tousevar = st_local("tousevar")

: estimate = st_local("estimate")

: 
: 
: // ****************************
: // * UNWEIGHTED DATA EXAMPLES *
: // ****************************
: 
: D = gmatch()

: D.set( st_local("treatvar"),st_local("varlist"), st_local("tousevar"))
  X contains
          1      2      3      4      5      6      7      8      9     10     11     12     13
    +--------------------------------------------------------------------------------------------+
  1 |    x1   1.x2   1.x3     x4     x5     x6     x7    x90    x91    x92    x93    x94    x95  |
    +--------------------------------------------------------------------------------------------+
  X is 500 by 13
  Data are unweighted.
  408 control obs (sum of weights = 408)
  92 treatment obs (sum of weights = 92)

: 
: if (depvars!="") D.set_Y(st_local("depvars"),st_local("tousevar"))
> 
> M = gmatch()

: M.clone(D)

: 
: // Misc balance measures
:   D.diff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.2826086957   -.0160912191   -.0223785166   -.0603154305   -1.101236147   -1.289748508    .1626172208    .1457104569   -.0812723301    .0681588142
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0461833248   -.1459731942   -.0148968728  |
     ----------------------------------------------+

:   D.stddiff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.563336463   -.1543415516   -.1526193687   -.1210072453    -.202287272   -.8035533326    .0457213254    .1527707004     -.08618905    .0648405717
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0493954389   -.1578414414    -.016298459  |
     ----------------------------------------------+

:   D.mean_asd()
  .1977078631

:   D.stddiff(1)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.563336463   -.1543415516   -.1526193687   -.1210072453    -.202287272   -.8035533326    .0457213254    .1527707004     -.08618905    .0648405717
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0493954389   -.1578414414    -.016298459  |
     ----------------------------------------------+

:   D.stddiff(0)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.6518565108   -.0992258067   -.1088403741    -.120488729   -.1874830308   -.5658268397    .0492441608    .1472428581   -.0808153611    .0677010963
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0466680215   -.1471098503   -.0148355423  |
     ----------------------------------------------+

:   D.varratio()
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  1.338962118   .4133172708   .5085817193   .9914483579   .8589874442   .4958355659   1.160037045   .9289414423   .8791918375   1.090178798
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .8926168505   .8686432131   .8285405428  |
     -------------------------------------------+

:   D.prognosticdiff()
                       1                   2                   3                   4
    +---------------------------------------------------------------------------------+
  1 |     Dependent var.   mean of y_hat (T)   mean of y_hat (C)    prognosticdiff()  |
  2 |                 y1            3444.538            3460.475           -15.93746  |
  3 |          y1_binary            .9482656            .9607843           -.0125187  |
    +---------------------------------------------------------------------------------+
                  1              2
    +-------------------------------+
  1 |  -15.93745522   -.0125187159  |
    +-------------------------------+

: 
:   "Balance table before matching"
  Balance table before matching

:   table = D.balancetable(1)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913          .75    -.2826087    -.5633365     .5016695     1.338962  |
   3 |        1.x2     .0108696     .0269608    -.0160912    -.1543416     .1042572     .4133173  |
   4 |        1.x3     .0217391     .0441176    -.0223785    -.1526194     .1466296     .5085817  |
   5 |          x4     .4347826      .495098    -.0603154    -.1210072     .4984448     .9914484  |
   6 |          x5     25.46739     26.56863    -1.101236    -.2022873     5.443922     .8589874  |
   7 |          x6     11.86957     13.15931    -1.289749    -.8035533     1.605057     .4958356  |
   8 |          x7     6.858696     6.696078     .1626172     .0457213     3.556704     1.160037  |
   9 |         x90     .0972024     -.048508     .1457105     .1527707     .9537854     .9289414  |
  10 |         x91    -.0890157    -.0077434    -.0812723    -.0861891     .9429542     .8791918  |
  11 |         x92     .0453787    -.0227801     .0681588     .0648406     1.051175     1.090179  |
  12 |         x93     .0865687     .0403853     .0461833     .0493954     .9349714     .8926169  |
  13 |         x94    -.1299173     .0160559    -.1459732    -.1578414     .9248091     .8686432  |
  14 |         x95    -.0807251    -.0658282    -.0148969    -.0162985      .914005     .8285405  |
     +--------------------------------------------------------------------------------------------+

: 
: // Replicate CBPS
: 
:   "--- ATE (not overidentified) ---"; ""; ""
  --- ATE (not overidentified) ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , ate      logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .00647386  
Iteration 1:   f(p) =  .00451406  
Iteration 2:   f(p) =   .0005336  
Iteration 3:   f(p) =  .00001373  
Iteration 4:   f(p) =  2.637e-08  
Iteration 5:   f(p) =  6.777e-13  
Iteration 6:   f(p) =  1.066e-21  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.441064   .5046768    -2.86   0.004    -2.430213   -.4519161
        1.x2 |  -2.548784   3.501511    -0.73   0.467     -9.41162    4.314051
        1.x3 |   -1.02318   2.005094    -0.51   0.610    -4.953091    2.906732
          x4 |  -.2320966   .5678014    -0.41   0.683    -1.344967    .8807737
          x5 |   .0736983    .042799     1.72   0.085    -.0101862    .1575829
          x6 |  -.4863391   .1923869    -2.53   0.011    -.8634106   -.1092676
          x7 |   .0655415   .0720901     0.91   0.363    -.0757525    .2068354
         x90 |   .0303861    .203675     0.15   0.881    -.3688096    .4295819
         x91 |  -.0236437   .2499136    -0.09   0.925    -.5134655     .466178
         x92 |   .2014652   .2092517     0.96   0.336    -.2086606    .6115911
         x93 |  -.0067202   .2511949    -0.03   0.979    -.4990531    .4856126
         x94 |  -.3662317   .2431817    -1.51   0.132     -.842859    .1103956
         x95 |  -.0080118   .2531324    -0.03   0.975    -.5041423    .4881187
       _cons |   3.127763   1.826429     1.71   0.087    -.4519713    6.707497
------------------------------------------------------------------------------

:     stata(`"cbps_imbalance"')
Total average covariate imbalance: 1.5e-10
Average covariate imbalance on the treated: 1.26

:     cbpsweight = M.cbps("ate", "cbps", 2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  2.590e-08  
Iteration 1:   f(p) =  2.548e-08  (backed up)
Iteration 2:   f(p) =  1.980e-08  
Iteration 3:   f(p) =  1.652e-08  
Iteration 4:   f(p) =  1.627e-08  
Iteration 5:   f(p) =  1.540e-08  
Iteration 6:   f(p) =  1.451e-08  
Iteration 7:   f(p) =  1.377e-08  
Iteration 8:   f(p) =  1.290e-08  
Iteration 9:   f(p) =  1.195e-08  
Iteration 10:  f(p) =  1.168e-08  
Iteration 11:  f(p) =  1.075e-08  
(switching technique to nr)
Iteration 12:  f(p) =  1.026e-08  
Iteration 13:  f(p) =  7.037e-09  
Iteration 14:  f(p) =  2.042e-10  
Iteration 15:  f(p) =  1.083e-12  
Iteration 16:  f(p) =  4.356e-17  
Iteration 17:  f(p) =  3.968e-25  
  optimize_result_iterations(S)
  18
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.441064  |
   2 |       1.x2   -2.548784  |
   3 |       1.x3    -1.02318  |
   4 |         x4   -.2320966  |
   5 |         x5    .0736983  |
   6 |         x6   -.4863391  |
   7 |         x7    .0655415  |
   8 |        x90    .0303861  |
   9 |        x91   -.0236437  |
  10 |        x92    .2014652  |
  11 |        x93   -.0067202  |
  12 |        x94   -.3662317  |
  13 |        x95   -.0080118  |
  14 |      _cons    3.127763  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8332317492   1.191468339   .8715385141   .8209658952   .8111823383   1.111550234   .9373899687   .9257247704   .8689542908   .8292183128  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0020422347   .0029202655   .0021361238   .0020121713    .001988192   .0027243878   .0022975244   .0022689333   .0021297899   .0020323978  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  3.96776e-25
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6750468      .6750468      1.72e-11      3.66e-11      .4688264      1.008511  |
   3 |         1.x2      .0219357      .0219357      1.15e-11      7.84e-11      .1466203      1.008511  |
   4 |         1.x3      .0370067      .0370067      2.40e-10      1.27e-09      .1889672      1.008511  |
   5 |           x4      .4861037      .4861037      5.20e-11      1.04e-10      .5003074      1.008511  |
   6 |           x5      26.25386      26.25386      2.87e-11      4.57e-12      6.268993      .6747771  |
   7 |           x6      12.63471      12.63471      4.25e-10      1.81e-10      2.343236      .5637225  |
   8 |           x7      6.724952      6.724952     -2.27e-10     -6.76e-11      3.360602      1.190087  |
   9 |          x90     -.0592246     -.0592246      6.94e-11      6.66e-11      1.042785      1.206644  |
  10 |          x91      .0116973      .0116973     -1.60e-10     -1.64e-10      .9810721      .9436962  |
  11 |          x92     -.0041245     -.0041245     -4.42e-11     -4.33e-11      1.020036      1.339887  |
  12 |          x93      .0443809      .0443809      3.14e-11      3.24e-11      .9681889      .8469644  |
  13 |          x94     -.0856689     -.0856689     -1.31e-11     -1.29e-11      1.015864      .7767335  |
  14 |          x95     -.0859154     -.0859154     -5.97e-12     -6.11e-12      .9766877      .8347645  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2477.54534
  cv of control weights (cbps_port_stata):
  .4390400161
  M.mean_sd_sq(denominator)
  1.29573e-20
  M.mean_asd(denominator)
  1.58973e-10
  M.max_asd(denominator)
  1.26919e-09
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  1.34069e-21   6.15285e-21   1.61085e-18   1.08083e-20   2.08898e-23   3.29287e-20   4.56575e-21   4.43153e-21   2.67367e-20   1.87517e-21
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    1.05015e-21   1.67207e-22   3.73409e-23  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  3.66154e-11   7.84401e-11   1.26919e-09   1.03963e-10   4.57053e-12   1.81463e-10   6.75703e-11   6.65698e-11   1.63514e-10   4.33032e-11
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    3.24060e-11   1.29309e-11   6.11072e-12  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATE overidentified ---"; ""; ""
  --- ATE overidentified ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , ate over logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .02441999  (not concave)
Iteration 1:   f(p) =    .020112  
Iteration 2:   f(p) =  .01484746  
Iteration 3:   f(p) =   .0142955  
Iteration 4:   f(p) =  .01428412  
Iteration 5:   f(p) =  .01428407  
Iteration 6:   f(p) =  .01428407  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.074574   .2572873    -4.18   0.000    -1.578848      -.5703
        1.x2 |  -1.732571    .847337    -2.04   0.041    -3.393321   -.0718214
        1.x3 |   -.535995   .6259896    -0.86   0.392    -1.762912    .6909221
          x4 |  -.2389831   .2458124    -0.97   0.331    -.7207666    .2428004
          x5 |   .0484453   .0243181     1.99   0.046     .0007828    .0961078
          x6 |  -.2519975   .0459113    -5.49   0.000    -.3419819    -.162013
          x7 |   .0081703   .0322545     0.25   0.800    -.0550474    .0713879
         x90 |    .120204   .1075227     1.12   0.264    -.0905366    .3309445
         x91 |  -.1467757   .1099013    -1.34   0.182    -.3621782    .0686269
         x92 |   .1315867   .1151671     1.14   0.253    -.0941367    .3573101
         x93 |    .086207   .1113523     0.77   0.439    -.1320395    .3044534
         x94 |  -.1702521    .103099    -1.65   0.099    -.3723225    .0318183
         x95 |   .0217906    .112224     0.19   0.846    -.1981643    .2417456
       _cons |   1.206345   .6074599     1.99   0.047      .015746    2.396945
------------------------------------------------------------------------------
J test for overidentifying restrictions: P(chisq>7.142, 14) = 0.929

:     stata(`"cbps_imbalance"')
Total average covariate imbalance: .313
Average covariate imbalance on the treated: .168

:     cbpsweight = M.cbps("ate", "cbps", 2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  9.768e-08  
Iteration 1:   f(p) =  9.599e-08  (backed up)
Iteration 2:   f(p) =  7.672e-08  
Iteration 3:   f(p) =  6.399e-08  
Iteration 4:   f(p) =  6.304e-08  
Iteration 5:   f(p) =  6.026e-08  
Iteration 6:   f(p) =  5.854e-08  
Iteration 7:   f(p) =  5.801e-08  
Iteration 8:   f(p) =  5.780e-08  
Iteration 9:   f(p) =  5.775e-08  
Iteration 10:  f(p) =  5.764e-08  
Iteration 11:  f(p) =  5.743e-08  
(switching technique to nr)
Iteration 12:  f(p) =  5.722e-08  
Iteration 13:  f(p) =  5.714e-08  
Iteration 14:  f(p) =  5.714e-08  
Iteration 15:  f(p) =  5.714e-08  
  optimize_result_iterations(S)
  16
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.074574  |
   2 |       1.x2   -1.732571  |
   3 |       1.x3   -.5359949  |
   4 |         x4    -.238983  |
   5 |         x5    .0484453  |
   6 |         x6   -.2519974  |
   7 |         x7    .0081703  |
   8 |        x90     .120204  |
   9 |        x91   -.1467757  |
  10 |        x92    .1315867  |
  11 |        x93     .086207  |
  12 |        x94   -.1702521  |
  13 |        x95    .0217906  |
  14 |      _cons    1.206345  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8962555361   1.240479136   .9414632298     .91389722   .8796403714   1.303628506   .9666844616   .9979371309   .9421588399   .9376376878  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0021967047     .00304039   .0023075079   .0022399442   .0021559813   .0031951679   .0023693247   .0024459243   .0023092128   .0022981316  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  5.71363e-08
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6406563      .7027893      -.062133     -.1343718      .4623962      1.111543  |
   3 |         1.x2      .0157701      .0233767     -.0076067     -.0518322      .1467555      .6856459  |
   4 |         1.x3       .024807      .0398362     -.0150293     -.0794675      .1891246      .6378543  |
   5 |           x4      .4886894      .4862356      .0024538      .0049044      .5003233      1.008759  |
   6 |           x5      25.82556      26.34781     -.5222463      -.087499      5.968599        .75999  |
   7 |           x6      12.33004       12.9064     -.5763641     -.2576164      2.237296      .5881093  |
   8 |           x7       6.88452      6.669732      .2147883      .0639215      3.360189      1.180429  |
   9 |          x90     -.0713183     -.0265029     -.0448154     -.0441805      1.014371      1.157748  |
  10 |          x91       .020009     -.0226109      .0426199       .043028      .9905145      .9174008  |
  11 |          x92      .0040221     -.0083767      .0123988       .012151      1.020391      1.200576  |
  12 |          x93      .0229491       .055179       -.03223     -.0331899      .9710769      .8891008  |
  13 |          x94      -.121595     -.0231316     -.0984633     -.0994521       .990058      .8143466  |
  14 |          x95     -.0950136      -.071595     -.0234187     -.0239408      .9781897      .8041468  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2458.474471
  cv of control weights (cbps_port_stata):
  .1799935016
  M.mean_sd_sq(denominator)
  .0027971508
  M.mean_asd(denominator)
  .0719657755
  M.max_asd(denominator)
  .2576163762
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0180557732   .0026865788   .0063150762   .0000240527   .0076560696   .0663661973   .0040859554   .0019519196   .0018514112    .000147648
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0011015718   .0098907178    .000573163  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .1343717724   .0518322181   .0794674539   .0049043556   .0874989694   .2576163762   .0639214784   .0441805346   .0430280279   .0121510496
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0331899351    .099452088    .023940822  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET (not overidentified) ---"; ""; ""
  --- ATET (not overidentified) ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , att      logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .00197031  
Iteration 1:   f(p) =  .00006892  
Iteration 2:   f(p) =  1.777e-07  
Iteration 3:   f(p) =  2.570e-12  
Iteration 4:   f(p) =  6.940e-22  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.339291   .3615444    -3.70   0.000    -2.047905   -.6306769
        1.x2 |  -1.525175    1.19071    -1.28   0.200    -3.858923    .8085728
        1.x3 |  -.5996277   .8424377    -0.71   0.477    -2.250775     1.05152
          x4 |  -.3183658   .3103113    -1.03   0.305    -.9265647    .2898331
          x5 |   .0587883     .02835     2.07   0.038     .0032234    .1143533
          x6 |  -.2435676   .0675718    -3.60   0.000    -.3760059   -.1111292
          x7 |   .0341034   .0400884     0.85   0.395    -.0444685    .1126752
         x90 |    .158599   .1286436     1.23   0.218    -.0935378    .4107357
         x91 |  -.1617619    .131618    -1.23   0.219    -.4197284    .0962045
         x92 |   .1391156   .1358437     1.02   0.306    -.1271333    .4053644
         x93 |   .0571151    .134574     0.42   0.671    -.2066451    .3208752
         x94 |  -.1175052   .1193236    -0.98   0.325    -.3513752    .1163649
         x95 |    .011505   .1383574     0.08   0.934    -.2596705    .2826805
       _cons |    .782858    .962964     0.81   0.416    -1.104517    2.670233
------------------------------------------------------------------------------

:     stata(`"cbps_imbalance"')
Total average covariate imbalance: .374
Average covariate imbalance on the treated: 1.1e-10

:     cbpsweight = M.cbps("atet", "cbps", 2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  7.881e-09  
Iteration 1:   f(p) =  7.799e-09  (backed up)
Iteration 2:   f(p) =  7.301e-09  
Iteration 3:   f(p) =  5.045e-09  
Iteration 4:   f(p) =  4.162e-09  
Iteration 5:   f(p) =  3.700e-09  
Iteration 6:   f(p) =  3.063e-09  
Iteration 7:   f(p) =  2.655e-09  
Iteration 8:   f(p) =  2.353e-09  
Iteration 9:   f(p) =  2.232e-09  
Iteration 10:  f(p) =  1.928e-09  
Iteration 11:  f(p) =  1.687e-09  
(switching technique to nr)
Iteration 12:  f(p) =  1.155e-09  
Iteration 13:  f(p) =  8.181e-12  
Iteration 14:  f(p) =  4.655e-16  
Iteration 15:  f(p) =  2.607e-24  
  optimize_result_iterations(S)
  16
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.339291  |
   2 |       1.x2   -1.525175  |
   3 |       1.x3   -.5996277  |
   4 |         x4   -.3183658  |
   5 |         x5    .0587883  |
   6 |         x6   -.2435676  |
   7 |         x7    .0341034  |
   8 |        x90     .158599  |
   9 |        x91   -.1617619  |
  10 |        x92    .1391156  |
  11 |        x93    .0571151  |
  12 |        x94   -.1175052  |
  13 |        x95     .011505  |
  14 |      _cons     .782858  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4811079444   2.261606558   .4991638891   .4882359828   .2759896013   2.553265921   .8609777413   .7930262479   .5798857016   .6841964034  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011791861   .0055431533   .0012234409   .0011966568   .0006764451   .0062580047   .0021102396   .0019436918   .0014212885    .001676952  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  2.60710e-24
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4673913      .4673913     -1.38e-10     -2.77e-10      .4994352      1.008511  |
   3 |         1.x2      .0108696      .0108696     -7.66e-11     -7.38e-10      .1037929      1.008511  |
   4 |         1.x3      .0217391      .0217391     -8.17e-11     -5.60e-10      .1459766      1.008511  |
   5 |           x4      .4347826      .4347826     -4.03e-10     -8.12e-10      .4962249      1.008511  |
   6 |           x5      25.46739      25.46739     -1.76e-09     -2.65e-10      6.664728      .6195799  |
   7 |           x6      11.86957      11.86957     -1.98e-09     -9.69e-10      2.043536      .5669465  |
   8 |           x7      6.858696      6.858696     -1.77e-10     -5.27e-11      3.363971      1.145237  |
   9 |          x90      .0972024      .0972024      4.54e-11      4.44e-11      1.021603       .845302  |
  10 |          x91     -.0890157     -.0890157     -3.25e-11     -3.40e-11      .9556678      .9654928  |
  11 |          x92      .0453787      .0453787      4.05e-11      4.06e-11      .9971707      1.136731  |
  12 |          x93      .0865687      .0865687     -6.32e-11     -6.65e-11        .95074      .9577067  |
  13 |          x94     -.1299173     -.1299173      5.29e-10      5.16e-10       1.02511      .7795321  |
  14 |          x95     -.0807251     -.0807251      8.07e-11      8.42e-11      .9586344      .8888006  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2605.10307
  cv of control weights (cbps_port_stata):
  .9884371288
  M.mean_sd_sq(denominator)
  5.64485e-20
  M.mean_asd(denominator)
  3.42965e-10
  M.max_asd(denominator)
  9.69336e-10
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  7.67195e-20   5.44153e-19   3.13412e-19   6.59106e-19   7.00415e-20   9.39612e-19   2.78194e-21   1.97272e-21   1.15749e-21   1.64901e-21
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    4.42392e-21   2.66000e-19   7.08487e-21  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  2.76983e-10   7.37668e-10   5.59832e-10   8.11853e-10   2.64654e-10   9.69336e-10   5.27441e-11   4.44153e-11   3.40219e-11   4.06080e-11
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    6.65126e-11   5.15752e-10   8.41717e-11  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET overidentified ---"; ""; ""
  --- ATET overidentified ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , att over logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .04521356  
Iteration 1:   f(p) =  .03210384  
Iteration 2:   f(p) =   .0303286  
Iteration 3:   f(p) =   .0302734  
Iteration 4:   f(p) =  .03027339  
Iteration 5:   f(p) =  .03027339  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.171988   .2187737    -5.36   0.000    -1.600776   -.7431991
        1.x2 |  -1.909814   .6607307    -2.89   0.004    -3.204822   -.6148052
        1.x3 |  -.4402667   .7269474    -0.61   0.545    -1.865057     .984524
          x4 |  -.3130788   .2251092    -1.39   0.164    -.7542848    .1281272
          x5 |   .0503881   .0191417     2.63   0.008     .0128711    .0879051
          x6 |  -.2393185   .0575186    -4.16   0.000     -.352053   -.1265841
          x7 |   .0261168   .0311563     0.84   0.402    -.0349484    .0871821
         x90 |   .1425533   .1007579     1.41   0.157    -.0549285    .3400351
         x91 |  -.1282785   .1127153    -1.14   0.255    -.3491964    .0926393
         x92 |      .1073   .1112316     0.96   0.335    -.1107099    .3253099
         x93 |   .0527165   .1101053     0.48   0.632    -.1630859    .2685189
         x94 |  -.1248021   .0971592    -1.28   0.199    -.3152305    .0656263
         x95 |   .0220743   .1115296     0.20   0.843    -.1965196    .2406683
       _cons |   .9132207   .6048419     1.51   0.131    -.2722476    2.098689
------------------------------------------------------------------------------
J test for overidentifying restrictions: P(chisq>15.137, 14) = 0.369

:     stata(`"cbps_imbalance"')
Total average covariate imbalance:  .34
Average covariate imbalance on the treated: .073

:     cbpsweight = M.cbps("atet", "cbps", 2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  1.809e-07  
Iteration 1:   f(p) =  1.775e-07  (backed up)
Iteration 2:   f(p) =  1.749e-07  
Iteration 3:   f(p) =  1.665e-07  
Iteration 4:   f(p) =  1.593e-07  
Iteration 5:   f(p) =  1.436e-07  
Iteration 6:   f(p) =  1.400e-07  
Iteration 7:   f(p) =  1.356e-07  
Iteration 8:   f(p) =  1.328e-07  
Iteration 9:   f(p) =  1.272e-07  
Iteration 10:  f(p) =  1.231e-07  
Iteration 11:  f(p) =  1.224e-07  
(switching technique to nr)
Iteration 12:  f(p) =  1.220e-07  
Iteration 13:  f(p) =  1.211e-07  
Iteration 14:  f(p) =  1.211e-07  
Iteration 15:  f(p) =  1.211e-07  
  optimize_result_iterations(S)
  16
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.171988  |
   2 |       1.x2   -1.909811  |
   3 |       1.x3   -.4402667  |
   4 |         x4   -.3130788  |
   5 |         x5    .0503881  |
   6 |         x6   -.2393185  |
   7 |         x7    .0261168  |
   8 |        x90    .1425533  |
   9 |        x91   -.1282785  |
  10 |        x92    .1072999  |
  11 |        x93    .0527165  |
  12 |        x94   -.1248021  |
  13 |        x95    .0220743  |
  14 |      _cons    .9132204  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .5230036224   2.543470725     .69082221   .5601330952   .3325816278   2.464805102   .8678670504   .8085343771    .630322953   .7002994033  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0012818716   .0062339969   .0016931917   .0013728752    .000815151    .006041189   .0021271251   .0019817019   .0015449092   .0017164201  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  1.21094e-07
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4673913      .4923283     -.0249369      -.049839      .5003503      1.004458  |
   3 |         1.x2      .0108696      .0074884      .0033811      .0376594      .0897824      1.458885  |
   4 |         1.x3      .0217391       .023711     -.0019719     -.0130452       .151158      .9265074  |
   5 |           x4      .4347826      .4386729     -.0038903     -.0078334      .4966326      1.006495  |
   6 |           x5      25.46739      25.45801      .0093781      .0014148      6.628535      .6273162  |
   7 |           x6      11.86957      11.89491     -.0253428     -.0123239        2.0564       .559006  |
   8 |           x7      6.858696      6.790863      .0678324      .0201339       3.36906      1.140985  |
   9 |          x90      .0972024      .0826851      .0145173      .0142151      1.021263      .8460037  |
  10 |          x91     -.0890157     -.0671192     -.0218965     -.0227622      .9619657      .9503048  |
  11 |          x92      .0453787      .0235132      .0218655      .0219385      .9966695      1.138269  |
  12 |          x93      .0865687      .0849356       .001633      .0017143      .9526181      .9531308  |
  13 |          x94     -.1299173     -.1339674      .0040501      .0039553      1.023979      .7815571  |
  14 |          x95     -.0807251     -.0745052     -.0062199     -.0064787      .9600495      .8856706  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2587.152909
  cv of control weights (cbps_port_stata):
  .9155855903
  M.mean_sd_sq(denominator)
  7.49044e-07
  M.mean_asd(denominator)
  .0164087468
  M.max_asd(denominator)
  .0498389796
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0024839239   .0014182278   .0001701777   .0000613625   2.00169e-06   .0001518774   .0004053754   .0002020679   .0005181183   .0004812993
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.93872e-06   .0000156444   .0000419741  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0498389796   .0376593649    .013045218   .0078334226   .0014148108   .0123238569   .0201339369   .0142150586   .0227622125   .0219385352
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0017142688   .0039553017   .0064787415  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
: // Other objective functions
:   cbpsweight = M.cbps("atet","mean_sd_sq",1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
(setting technique to bfgs)
Iteration 0:   f(p) =  .00032638  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 1:   f(p) =  8.089e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 2:   f(p) =  5.298e-09  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 3:   f(p) =  1.465e-13  
  optimize_result_iterations(S)
  4
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.206443  |
   2 |       1.x2   -1.628676  |
   3 |       1.x3     -.58031  |
   4 |         x4   -.2832337  |
   5 |         x5     .069416  |
   6 |         x6   -.2787871  |
   7 |         x7    .0283208  |
   8 |        x90    .1446874  |
   9 |        x91   -.1322013  |
  10 |        x92    .1288213  |
  11 |        x93    .0633599  |
  12 |        x94   -.1645469  |
  13 |        x95    .0190734  |
  14 |      _cons     1.37953  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4392343388    2.12990746   .5761745999   .4830251838   .2745044141   2.516161157   .8341006926   .8225538284   .5735872754   .6518155515  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0010765548   .0052203614   .0014121926   .0011838853   .0006728049   .0061670617   .0020443644   .0020160633   .0014058512   .0015975871  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (mean_sd_sq):
  optimize_result_value(S)
  1.46512e-13
  balance table after matching (mean_sd_sq):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913     .5065699    -.0391786    -.0780965     .5016695     1.004356  |
   3 |        1.x2     .0108696     .0094032     .0014663     .0140644     .1042572     1.164005  |
   4 |        1.x3     .0217391     .0217076     .0000315     .0002149     .1466296     1.009904  |
   5 |          x4     .4347826     .4181838     .0165988     .0333012     .4984448     1.018588  |
   6 |          x5     25.46739     26.05539    -.5880033     -.108011     5.443922     .5832447  |
   7 |          x6     11.86957     11.79935     .0702201     .0437493     1.605057     .5528784  |
   8 |          x7     6.858696      6.77528     .0834157     .0234531     3.556704     1.141111  |
   9 |         x90     .0972024      .056997     .0402054     .0421535     .9537854     .8487489  |
  10 |         x91    -.0890157     -.062197    -.0268186    -.0284411     .9429542     .9668598  |
  11 |         x92     .0453787     .0391245     .0062542     .0059497     1.051175     1.151835  |
  12 |         x93     .0865687       .10444    -.0178714    -.0191144     .9349714     .9622439  |
  13 |         x94    -.1299173    -.1873487     .0574314     .0621009     .9248091     .7464861  |
  14 |         x95    -.0807251    -.0886595     .0079344     .0086809      .914005     .8927406  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (mean_sd_sq):
  2562.276729
  cv of control weights (mean_sd_sq):
  1.041361058
  M.mean_sd_sq(denominator)
  1.46512e-13
  M.mean_asd(denominator)
  .035948528
  M.max_asd(denominator)
  .1080109775
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |   .006099068   .0001978085   4.61840e-08    .001108967   .0116663713   .0019140035    .000550048   .0017769195   .0008088952   .0000353987
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0003653585   .0038565183   .0000753582  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |    .07809653     .01406444   .0002149047   .0333011567   .1080109775   .0437493263   .0234531021   .0421535229   .0284410832   .0059496844
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0191143535   .0621008719   .0086809114  |
     -------------------------------------------+
  
  
  
  
  
  
  

:   cbpsweight = M.cbps("atet","sd_sq",1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
(setting technique to bfgs)
Iteration 0:   f(p) =  .02141594  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 1:   f(p) =  .02005607  (backed up)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 2:   f(p) =  .01097598  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 3:   f(p) =  .00782372  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 4:   f(p) =  .00292673  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 5:   f(p) =  .00193285  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 6:   f(p) =  .00085471  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 7:   f(p) =  .00063406  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 8:   f(p) =  .00028285  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 9:   f(p) =  .00013476  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 10:  f(p) =  .00008047  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 11:  f(p) =  .00006325  
(switching technique to nr)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 12:  f(p) =   .0000443  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 13:  f(p) =  .00001279  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 14:  f(p) =  .00001037  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 15:  f(p) =  8.350e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 16:  f(p) =  7.197e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 17:  f(p) =  6.540e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 18:  f(p) =  6.507e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 19:  f(p) =  5.420e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 20:  f(p) =  5.187e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 21:  f(p) =  2.781e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 22:  f(p) =  2.598e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 23:  f(p) =  2.258e-06  (not concave)
(switching technique to bfgs)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 24:  f(p) =  2.164e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 25:  f(p) =  1.647e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 26:  f(p) =  1.491e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 27:  f(p) =  1.410e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 28:  f(p) =  8.461e-07  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 29:  f(p) =  6.309e-07  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 30:  f(p) =  5.887e-07  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 31:  f(p) =  3.851e-07  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 32:  f(p) =  2.785e-07  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 33:  f(p) =  2.729e-07  
  optimize_result_iterations(S)
  34
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.339422  |
   2 |       1.x2   -1.526109  |
   3 |       1.x3   -.5988897  |
   4 |         x4   -.3169822  |
   5 |         x5    .0588638  |
   6 |         x6   -.2435677  |
   7 |         x7    .0340664  |
   8 |        x90    .1587018  |
   9 |        x91   -.1617249  |
  10 |        x92    .1392417  |
  11 |        x93    .0571738  |
  12 |        x94   -.1175276  |
  13 |        x95     .011522  |
  14 |      _cons    1.382076  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4805738017   2.261236543   .4990254521   .4879998951   .2761118161   2.555537373   .8601244148   .7937684904   .5802572706   .6836539324  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |   .001177877   .0055422464   .0012231016   .0011960782   .0006767446    .006263572   .0021081481    .001945511   .0014221992   .0016756224  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (sd_sq):
  optimize_result_value(S)
  2.72851e-07
  balance table after matching (sd_sq):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913      .467425    -.0000337    -.0000671     .5016695     1.008502  |
   3 |        1.x2     .0108696     .0108594     .0000101     .0000971     .1042572     1.009441  |
   4 |        1.x3     .0217391     .0217469    -7.72e-06    -.0000527     .1466296     1.008161  |
   5 |          x4     .4347826     .4349966     -.000214    -.0004293     .4984448     1.008397  |
   6 |          x5     25.46739      25.4682    -.0008105    -.0001489     5.443922     .6194721  |
   7 |          x6     11.86957     11.86973     -.000167    -.0001041     1.605057     .5668756  |
   8 |          x7     6.858696      6.85827     .0004255     .0001196     3.556704     1.145233  |
   9 |         x90     .0972024     .0972724      -.00007    -.0000734     .9537854     .8453675  |
  10 |         x91    -.0890157    -.0889516    -.0000641     -.000068     .9429542     .9655095  |
  11 |         x92     .0453787     .0454933    -.0001146     -.000109     1.051175     1.136533  |
  12 |         x93     .0865687     .0865896     -.000021    -.0000224     .9349714     .9577543  |
  13 |         x94    -.1299173    -.1298987    -.0000185      -.00002     .9248091     .7795189  |
  14 |         x95    -.0807251    -.0807634     .0000383     .0000419      .914005     .8888046  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (sd_sq):
  2605.064525
  cv of control weights (sd_sq):
  .9882747174
  M.mean_sd_sq(denominator)
  4.13694e-09
  M.mean_asd(denominator)
  .0001041131
  M.max_asd(denominator)
  .0004292875
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  4.50146e-09   9.42981e-09   2.77480e-09   1.84288e-07   2.21667e-08   1.08289e-08   1.43130e-08   5.38734e-09   4.61803e-09   1.18831e-08
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    5.02765e-10   4.00738e-10   1.75704e-09  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |   .000067093   .0000971072   .0000526764   .0004292875   .0001488849   .0001040618   .0001196368   .0000733985   .0000679561   .0001090096
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0000224224   .0000200184    .000041917  |
     -------------------------------------------+
  
  
  
  
  
  
  

:   cbpsweight = M.cbps("atet","mean_asd") // I took these out; should error
  mean_asd is invalid with gmatch::cbps()

:   cbpsweight = M.cbps("atet","max_asd")  // I took these out; should error  
  max_asd is invalid with gmatch::cbps()

: //  cbpsweight = M.cbps("atet","mean_sd_sq_cv",1, (1,1,6)
: 
: 
: // IPW
:   M = gmatch()

:   M.clone(D)

:   stata("qui teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , atet aequations")

:   iwpweight = D.ipw("atet")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
:   M.multweight(iwpweight)

: 
:   stata("di _b[POmean:0.treat]")
3417.8947

:   M.pomean()
                 1             2
    +-----------------------------+
  1 |  3417.894673   .9465175518  |
    +-----------------------------+

: 
:   stata("tebalance summarize")

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        247.8
                          Control obs   =          408        252.2
                          -----------------------------------------

  -----------------------------------------------------------------
                  |Standardized differences          Variance ratio
                  |        Raw    Weighted           Raw   Weighted
  ----------------+------------------------------------------------
               x1 |  -.6027752   -.0090577      1.338962   .9989677
                  |
               x2 |
               1  |  -.1180374    .0096998      .4133173   1.098626
                  |
               x3 |
               1  |  -.1253201    .0022927      .5085817   1.015318
                  |
               x4 |  -.1207472   -.0222549      .9914484   .9947225
               x5 |  -.1944638    .0308855      .8589874   .5917507
               x6 |  -.6542694    .0952268      .4958356   .5601212
               x7 |   .0473848    .0429284      1.160037   1.132231
              x90 |   .1499304    .0130255      .9289414   .8182649
              x91 |  -.0833726   -.0288848      .8791918   .9584288
              x92 |   .0662245    .0110605      1.090179   1.139468
              x93 |   .0479737   -.0087695      .8926169   .9659809
              x94 |  -.1521926    .0562648      .8686432   .7583723
              x95 |  -.0155155     .017858      .8285405   .8879817
  -----------------------------------------------------------------

:   table = M.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4673913     .4719209    -.0045296    -.0090456     .5007475     1.007399  |
   3 |        1.x2     .0108696     .0098847     .0009849     .0096855     .1016872     1.107894  |
   4 |        1.x3     .0217391     .0214054     .0003337     .0022895     .1457719     1.023886  |
   5 |          x4     .4347826      .445852    -.0110694    -.0222252     .4980573     1.003118  |
   6 |          x5     25.46739     25.27307     .1943233     .0308606     6.296806      .596745  |
   7 |          x6     11.86957     11.68981     .1797533     .0951549     1.889059     .5648484  |
   8 |          x7     6.858696     6.711046     .1476493      .042865     3.444517     1.141787  |
   9 |         x90     .0972024     .0841522     .0130502     .0130107     1.003034     .8251709  |
  10 |         x91    -.0890157    -.0615794    -.0274362    -.0288473     .9510857     .9665176  |
  11 |         x92     .0453787     .0341522     .0112265     .0110442     1.016508     1.149085  |
  12 |         x93     .0865687     .0948113    -.0082427     -.008758     .9411576     .9741335  |
  13 |         x94    -.1299173    -.1857505     .0558332     .0562053     .9933796     .7647728  |
  14 |         x95    -.0807251    -.0974964     .0167713     .0178362     .9402985     .8954759  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("tebalance summarize, baseline")

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        247.8
                          Control obs   =          408        252.2
                          -----------------------------------------

  -----------------------------------------------------------------
                  |           Means                  Variances     
                  |    Control     Treated       Control    Treated
  ----------------+------------------------------------------------
               x1 |        .75    .4673913      .1879607   .2516722
                  |
               x2 |
               1  |   .0269608    .0108696      .0262984   .0108696
                  |
               x3 |
               1  |   .0441176    .0217391      .0422749   .0215002
                  |
               x4 |    .495098    .4347826      .2505902   .2484472
               x5 |   26.56863    25.46739      34.50142   29.63629
               x6 |   13.15931    11.86957      5.195687   2.576206
               x7 |   6.696078    6.858696      10.90495   12.65014
              x90 |   -.048508    .0972024      .9792937   .9097065
              x91 |  -.0077434   -.0890157      1.011341   .8891627
              x92 |  -.0227801    .0453787      1.013567    1.10497
              x93 |   .0403853    .0865687      .9793358   .8741716
              x94 |   .0160559   -.1299173      .9846065   .8552718
              x95 |  -.0658282   -.0807251      1.008285   .8354051
  -----------------------------------------------------------------

:   M.multweight()

:   table = M.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4673913          .75    -.2826087    -.6027752     .4688459     1.338962  |
   3 |        1.x2     .0108696     .0269608    -.0160912    -.1180374      .136323     .4133173  |
   4 |        1.x3     .0217391     .0441176    -.0223785    -.1253201     .1785709     .5085817  |
   5 |          x4     .4347826      .495098    -.0603154    -.1207472     .4995185     .9914484  |
   6 |          x5     25.46739     26.56863    -1.101236    -.1944638     5.662937     .8589874  |
   7 |          x6     11.86957     13.15931    -1.289749    -.6542694      1.97128     .4958356  |
   8 |          x7     6.858696     6.696078     .1626172     .0473848     3.431843     1.160037  |
   9 |         x90     .0972024     -.048508     .1457105     .1499304      .971854     .9289414  |
  10 |         x91    -.0890157    -.0077434    -.0812723    -.0833726     .9748086     .8791918  |
  11 |         x92     .0453787    -.0227801     .0681588     .0662245     1.029208     1.090179  |
  12 |         x93     .0865687     .0403853     .0461833     .0479737     .9626805     .8926169  |
  13 |         x94    -.1299173     .0160559    -.1459732    -.1521926     .9591346     .8686432  |
  14 |         x95    -.0807251    -.0658282    -.0148969    -.0155155     .9601277     .8285405  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , atet aequations")

Iteration 0:   EE criterion =  5.570e-18  
Iteration 1:   EE criterion =  4.978e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Treated vs Untreated)  |  -365.5251   68.93598    -5.30   0.000    -500.6371   -230.4131
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3417.895   43.41569    78.72   0.000     3332.801    3502.988
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.207512   .3268258    -3.69   0.000    -1.848079   -.5669452
                        |
                     x2 |
                     1  |  -1.628792   1.054719    -1.54   0.123    -3.696005    .4384199
                        |
                     x3 |
                     1  |  -.5805318   .8259794    -0.70   0.482    -2.199422    1.038358
                     x4 |  -.2831153   .2838113    -1.00   0.318    -.8393752    .2731445
                     x5 |   .0545179   .0270259     2.02   0.044     .0015481    .1074878
                     x6 |  -.2844593   .0688093    -4.13   0.000     -.419323   -.1495955
                     x7 |    .023871   .0390129     0.61   0.541    -.0525929    .1003349
                    x90 |   .1439494   .1292697     1.11   0.265    -.1094145    .3973133
                    x91 |  -.1331182   .1248073    -1.07   0.286    -.3777361    .1114997
                    x92 |   .1277527    .133834     0.95   0.340    -.1345572    .3900625
                    x93 |   .0623585   .1243317     0.50   0.616    -.1813271    .3060441
                    x94 |  -.1663354   .1194682    -1.39   0.164    -.4004887    .0678179
                    x95 |    .017776   .1254901     0.14   0.887    -.2281801     .263732
                  _cons |   1.379538   .9297905     1.48   0.138    -.4428177    3.201894
-----------------------------------------------------------------------------------------

:   stata("predict pscore1, tlevel(1) ")
(option ps assumed; propensity score)

:   stata("list `treatvar' pscore1 in 1/20, nolab ")

     +-------------------+
     | treat     pscore1 |
     |-------------------|
  1. |     0   .09190987 |
  2. |     0   .35215962 |
  3. |     0   .12794762 |
  4. |     0   .10263772 |
  5. |     0   .06571691 |
     |-------------------|
  6. |     0   .36822688 |
  7. |     0   .15689313 |
  8. |     0   .16443463 |
  9. |     0   .12521983 |
 10. |     0   .12044877 |
     |-------------------|
 11. |     1   .13095483 |
 12. |     0   .23712312 |
 13. |     0   .16541533 |
 14. |     0   .24493927 |
 15. |     0   .29944927 |
     |-------------------|
 16. |     0   .08410573 |
 17. |     0   .18480285 |
 18. |     0   .16790212 |
 19. |     0   .20098764 |
 20. |     1   .44671405 |
     +-------------------+

:   ipw = D.ipw("atet")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , ate aequations")

Iteration 0:   EE criterion =  5.570e-18  
Iteration 1:   EE criterion =  1.612e-25  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATE                     |
                  treat |
(Treated vs Untreated)  |   -328.878   82.21905    -4.00   0.000    -490.0244   -167.7316
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3452.527   28.58753   120.77   0.000     3396.497    3508.558
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.207512   .3268258    -3.69   0.000    -1.848079   -.5669452
                        |
                     x2 |
                     1  |  -1.628792   1.054719    -1.54   0.123    -3.696005    .4384199
                        |
                     x3 |
                     1  |  -.5805318   .8259794    -0.70   0.482    -2.199422    1.038358
                     x4 |  -.2831153   .2838113    -1.00   0.318    -.8393752    .2731445
                     x5 |   .0545179   .0270259     2.02   0.044     .0015481    .1074878
                     x6 |  -.2844593   .0688093    -4.13   0.000     -.419323   -.1495955
                     x7 |    .023871   .0390129     0.61   0.541    -.0525929    .1003349
                    x90 |   .1439494   .1292697     1.11   0.265    -.1094145    .3973133
                    x91 |  -.1331182   .1248073    -1.07   0.286    -.3777361    .1114997
                    x92 |   .1277527    .133834     0.95   0.340    -.1345572    .3900625
                    x93 |   .0623585   .1243317     0.50   0.616    -.1813271    .3060441
                    x94 |  -.1663354   .1194682    -1.39   0.164    -.4004887    .0678179
                    x95 |    .017776   .1254901     0.14   0.887    -.2281801     .263732
                  _cons |   1.379538   .9297905     1.48   0.138    -.4428177    3.201894
-----------------------------------------------------------------------------------------

:   ipw = D.ipw("ate")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , atet aequations tlevel(0) control(1)")

Iteration 0:   EE criterion =  5.570e-18  
Iteration 1:   EE criterion =  3.813e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Untreated vs Treated)  |     319.07   91.15096     3.50   0.000     140.4174    497.7225
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
               Treated  |   3141.406   87.28586    35.99   0.000     2970.328    3312.483
------------------------+----------------------------------------------------------------
TME0                    |
                     x1 |   1.207512   .3268258     3.69   0.000     .5669452    1.848079
                        |
                     x2 |
                     1  |   1.628792   1.054719     1.54   0.123    -.4384199    3.696005
                        |
                     x3 |
                     1  |   .5805318   .8259794     0.70   0.482    -1.038358    2.199422
                     x4 |   .2831153   .2838113     1.00   0.318    -.2731445    .8393752
                     x5 |  -.0545179   .0270259    -2.02   0.044    -.1074878   -.0015481
                     x6 |   .2844593   .0688093     4.13   0.000     .1495955     .419323
                     x7 |   -.023871   .0390129    -0.61   0.541    -.1003349    .0525929
                    x90 |  -.1439494   .1292697    -1.11   0.265    -.3973133    .1094145
                    x91 |   .1331182   .1248073     1.07   0.286    -.1114997    .3777361
                    x92 |  -.1277527    .133834    -0.95   0.340    -.3900625    .1345572
                    x93 |  -.0623585   .1243317    -0.50   0.616    -.3060441    .1813271
                    x94 |   .1663354   .1194682     1.39   0.164    -.0678179    .4004887
                    x95 |   -.017776   .1254901    -0.14   0.887     -.263732    .2281801
                  _cons |  -1.379538   .9297905    -1.48   0.138    -3.201894    .4428177
-----------------------------------------------------------------------------------------

:   ipw = D.ipw("ateu")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
: mata drop D M

: 
: // **************************
: // * WEIGHTED DATA EXAMPLES *
: // **************************
: 
: DW = gmatch()

: DW.set(st_local("treatvar"),st_local("varlist"), st_local("tousevar"), st_local("wgtvar"))
  X contains
          1      2      3      4      5      6      7      8      9     10     11     12     13
    +--------------------------------------------------------------------------------------------+
  1 |    x1   1.x2   1.x3     x4     x5     x6     x7    x90    x91    x92    x93    x94    x95  |
    +--------------------------------------------------------------------------------------------+
  X is 500 by 13
  408 control obs (sum of weights = 802.3793)
  92 treatment obs (sum of weights = 180.1725)

: if (depvars!="") DW.set_Y(st_local("depvars"),st_local("tousevar"))
> 
> // Misc balance measures
>   DW.diff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.295813959   -.0156488223   -.0187317786   -.0757286195   -1.051311077   -1.308590669     .297707166    .1231935602   -.0575694681    .0828891447
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0552344857   -.1298217376   -.0348745599  |
     ----------------------------------------------+

:   DW.stddiff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.5928113513   -.1469730323   -.1218929028   -.1529139652   -.1938926866   -.7969828512    .0837330563    .1283646934   -.0613348134    .0800443396
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0583642775   -.1419196244   -.0384510908  |
     ----------------------------------------------+

:   DW.mean_asd()
  .1998214373

:   DW.stddiff(1)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.5928113513   -.1469730323   -.1218929028   -.1529139652   -.1938926866   -.7969828512    .0837330563    .1283646934   -.0613348134    .0800443396
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0583642775   -.1419196244   -.0384510908  |
     ----------------------------------------------+

:   DW.stddiff(0)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.680061781   -.0963964449   -.0924925724    -.151364552   -.1796741931    -.574992733     .089787867    .1235603267   -.0581251544    .0827450762
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0561740214   -.1310646825   -.0346950651  |
     ----------------------------------------------+

:   DW.varratio()
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  1.316023713   .4301765439   .5757804001   .9798375062   .8587140122   .5205072206   1.149850614   .9265458616   .8980781756   1.068619436
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .9263536214    .852877099   .8141756036  |
     -------------------------------------------+

:   DW.prognosticdiff()
                       1                   2                   3                   4
    +---------------------------------------------------------------------------------+
  1 |     Dependent var.   mean of y_hat (T)   mean of y_hat (C)    prognosticdiff()  |
  2 |                 y1             3448.29            3459.434           -11.14415  |
  3 |          y1_binary              .95075            .9627243           -.0119743  |
    +---------------------------------------------------------------------------------+
                  1              2
    +-------------------------------+
  1 |  -11.14415063    -.011974287  |
    +-------------------------------+

: 
:   "Balance table before matching"
  Balance table before matching

:   temp = DW.balancetable(1)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4512231     .7470371     -.295814    -.5928114     .4990018     1.316024  |
   3 |        1.x2     .0114039     .0270527    -.0156488     -.146973     .1064741     .4301765  |
   4 |        1.x3     .0240637     .0427955    -.0187318    -.1218929     .1536741     .5757804  |
   5 |          x4     .4218861     .4976147    -.0757286     -.152914     .4952368     .9798375  |
   6 |          x5     25.44699      26.4983    -1.051311    -.1938927     5.422129      .858714  |
   7 |          x6     11.84757     13.15616    -1.308591    -.7969829     1.641931     .5205072  |
   8 |          x7     7.015422     6.717714     .2977072     .0837331     3.555432     1.149851  |
   9 |         x90     .0839738    -.0392197     .1231936     .1283647     .9597153     .9265459  |
  10 |         x91    -.0648837    -.0073142    -.0575695    -.0613348       .93861     .8980782  |
  11 |         x92     .0575388    -.0253504     .0828891     .0800443      1.03554     1.068619  |
  12 |         x93     .1016523     .0464178     .0552345     .0583643     .9463749     .9263536  |
  13 |         x94    -.1252265     .0045953    -.1298217    -.1419196     .9147554     .8528771  |
  14 |         x95    -.1044649    -.0695904    -.0348746    -.0384511     .9069849     .8141756  |
     +--------------------------------------------------------------------------------------------+

: 
: // Replicate CBPS
: 
:   MW = gmatch()

:   MW.clone(DW)

:   MW.prognosticdiff()
                       1                   2                   3                   4
    +---------------------------------------------------------------------------------+
  1 |     Dependent var.   mean of y_hat (T)   mean of y_hat (C)    prognosticdiff()  |
  2 |                 y1             3448.29            3459.434           -11.14415  |
  3 |          y1_binary              .95075            .9627243           -.0119743  |
    +---------------------------------------------------------------------------------+
                  1              2
    +-------------------------------+
  1 |  -11.14415063    -.011974287  |
    +-------------------------------+

: 
:   "--- ATE (not overidentified) ---"; ""; ""
  --- ATE (not overidentified) ---
  
  

:     cbpsweight = MW.cbps("ate", "cbps", 2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  .00008909  
Iteration 1:   f(p) =  .00006006  
Iteration 2:   f(p) =  .00005798  
Iteration 3:   f(p) =  .00005798  
Iteration 4:   f(p) =  .00005797  
Iteration 5:   f(p) =  .00005722  
Iteration 6:   f(p) =  .00004799  
Iteration 7:   f(p) =  .00002163  
Iteration 8:   f(p) =  .00001682  
Iteration 9:   f(p) =  .00001603  
Iteration 10:  f(p) =  .00001599  
Iteration 11:  f(p) =  .00001599  
(switching technique to nr)
Iteration 12:  f(p) =  .00001598  (not concave)
Iteration 13:  f(p) =  4.571e-06  (not concave)
Iteration 14:  f(p) =  1.592e-06  (not concave)
Iteration 15:  f(p) =  8.516e-07  (not concave)
Iteration 16:  f(p) =  3.286e-07  (not concave)
Iteration 17:  f(p) =  1.745e-07  (not concave)
Iteration 18:  f(p) =  8.936e-08  (not concave)
Iteration 19:  f(p) =  2.836e-08  (not concave)
Iteration 20:  f(p) =  5.115e-09  
Iteration 21:  f(p) =  1.153e-10  
Iteration 22:  f(p) =  1.212e-14  
Iteration 23:  f(p) =  2.740e-25  
(switching technique to bfgs)
Iteration 24:  f(p) =  2.405e-27  
  optimize_result_iterations(S)
  25
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.502416  |
   2 |       1.x2   -2.525399  |
   3 |       1.x3   -.8191009  |
   4 |         x4   -.3236397  |
   5 |         x5    .0771198  |
   6 |         x6   -.4884764  |
   7 |         x7    .0722686  |
   8 |        x90    .0234165  |
   9 |        x91    .0257849  |
  10 |        x92    .2152141  |
  11 |        x93   -.0285372  |
  12 |        x94   -.3393877  |
  13 |        x95   -.0407881  |
  14 |      _cons    3.075437  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8333804047   1.262724343    .891164837   .8233813768   .8085688026   1.048159199   .9430612398   .9166305679   .8600926322   .8223358716  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0010386364   .0015737249   .0011106528   .0010261747   .0010077139   .0013063138   .0011753309   .0011423905   .0010719277   .0010248717  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  2.40498e-27
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6695182      .6695182      1.44e-15      3.07e-15      .4706262      1.004328  |
   3 |         1.x2      .0220668      .0220668     -1.88e-14     -1.28e-13      .1469756      1.004328  |
   4 |         1.x3      .0366911      .0366911     -2.61e-14     -1.39e-13       .188098      1.004328  |
   5 |           x4       .485133       .485133      1.70e-13      3.39e-13      .5000334      1.004328  |
   6 |           x5      26.17889      26.17889      6.18e-13      9.91e-14      6.237853      .6789026  |
   7 |           x6      12.63449      12.63449     -1.58e-12     -6.76e-13      2.338005      .5740656  |
   8 |           x7      6.755243      6.755243     -6.36e-13     -1.89e-13      3.370937      1.187219  |
   9 |          x90     -.0520316     -.0520316      3.49e-14      3.34e-14      1.046128      1.163666  |
  10 |          x91      .0164856      .0164856      7.94e-14      8.18e-14      .9705717      .9930954  |
  11 |          x92     -.0021645     -.0021645     -2.62e-15     -2.58e-15      1.017927      1.359802  |
  12 |          x93      .0456916      .0456916     -2.14e-13     -2.22e-13      .9636159       .883731  |
  13 |          x94     -.0910006     -.0910006     -2.10e-13     -2.07e-13      1.014116      .7859289  |
  14 |          x95     -.0894588     -.0894588      6.18e-13      6.32e-13       .978942      .8236876  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2750.417544
  cv of control weights (cbps_port_r):
  .4351202284
  M.mean_sd_sq(denominator)
  8.32408e-28
  M.mean_asd(denominator)
  2.11649e-13
  M.max_asd(denominator)
  6.76199e-13
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  9.40492e-30   1.63330e-26   1.92904e-26   1.15098e-25   9.82084e-27   4.57245e-25   3.55898e-26   1.11490e-27   6.69744e-27   6.64602e-30
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    4.94487e-26   4.27500e-26   3.98826e-25  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  3.06674e-15   1.27801e-13   1.38890e-13   3.39261e-13   9.91002e-14   6.76199e-13   1.88653e-13   3.33902e-14   8.18379e-14   2.57799e-15
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.22371e-13   2.06761e-13   6.31526e-13  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATE overidentified ---"; ""; ""
  --- ATE overidentified ---
  
  

:     cbpsweight = MW.cbps("ate", "cbps", 2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  .02296546  
Iteration 1:   f(p) =  .01893921  
Iteration 2:   f(p) =  .01888779  
Iteration 3:   f(p) =  .01864991  
Iteration 4:   f(p) =  .01807801  
Iteration 5:   f(p) =  .01796175  
Iteration 6:   f(p) =  .01796123  
Iteration 7:   f(p) =  .01795278  
Iteration 8:   f(p) =  .01785278  
Iteration 9:   f(p) =   .0178181  
Iteration 10:  f(p) =  .01781755  
Iteration 11:  f(p) =  .01781528  
(switching technique to nr)
Iteration 12:  f(p) =  .01780001  
Iteration 13:  f(p) =  .01777185  
Iteration 14:  f(p) =  .01777184  
Iteration 15:  f(p) =  .01777184  
  optimize_result_iterations(S)
  16
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.226645  |
   2 |       1.x2   -1.653762  |
   3 |       1.x3   -.7776876  |
   4 |         x4   -.3532491  |
   5 |         x5    .0574629  |
   6 |         x6   -.2583005  |
   7 |         x7    .0080439  |
   8 |        x90    .0890276  |
   9 |        x91   -.1706881  |
  10 |        x92    .1765097  |
  11 |        x93    .1136718  |
  12 |        x94   -.1271347  |
  13 |        x95    .0214704  |
  14 |      _cons    1.180155  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8902205416   1.188129741   .9058232073    .913396811   .8718550354   1.262126973   .9857749887   .9856628264    .923084544   .9374334232  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011094759   .0014807581   .0011289214   .0011383603   .0010865871   .0015729804   .0012285648    .001228425   .0011504341    .001168317  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  .0177718443
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6415953      .6970127     -.0554173     -.1194311      .4640107      1.093567  |
   3 |         1.x2      .0142909      .0234703     -.0091794     -.0628462      .1460619      .6172753  |
   4 |         1.x3      .0334441      .0380925     -.0046484     -.0245369      .1894462      .8860314  |
   5 |           x4      .4881571      .4821182      .0060389      .0120785       .499973       1.00505  |
   6 |           x5      25.72258      26.31855     -.5959644     -.1000426      5.957105      .7659019  |
   7 |           x6      12.33189       12.8994     -.5675068     -.2533225      2.240254      .6135511  |
   8 |           x7      6.911084      6.688832       .222252      .0657612      3.379685      1.211887  |
   9 |          x90     -.0440388     -.0251309      -.018908     -.0185767       1.01783      1.120774  |
  10 |          x91      .0661735     -.0257224      .0918959      .0936219      .9815644      .9753854  |
  11 |          x92     -.0382008     -.0020298     -.0361709     -.0355957      1.016161       1.20721  |
  12 |          x93      .0014101      .0645199     -.0631098     -.0653399      .9658703      .9125525  |
  13 |          x94     -.1442668     -.0285682     -.1156986     -.1166712      .9916637      .8216037  |
  14 |          x95     -.1053626       -.07164     -.0337226     -.0344811      .9780038       .803947  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2733.070247
  cv of control weights (cbps_port_r):
  .1959655194
  M.mean_sd_sq(denominator)
  .0025726925
  M.mean_asd(denominator)
  .0771004086
  M.max_asd(denominator)
  .2533225075
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0142637952   .0039496397    .000602058   .0001458893    .010008524   .0641722928   .0043245293   .0003450949   .0087650568   .0012670515
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0042692975   .0136121687   .0011889446  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .1194311318   .0628461588   .0245368693   .0120784636   .1000426111   .2533225075   .0657611535   .0185767301   .0936218821   .0355956674
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0653398615   .1166711993    .034481076  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET (not overidentified) ---"; ""; ""
  --- ATET (not overidentified) ---
  
  

:     cbpsweight = MW.cbps("atet", "cbps", 2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  .00001735  
Iteration 1:   f(p) =  6.450e-06  
Iteration 2:   f(p) =  5.892e-06  
Iteration 3:   f(p) =  5.889e-06  
Iteration 4:   f(p) =  5.889e-06  
Iteration 5:   f(p) =  5.884e-06  
Iteration 6:   f(p) =  5.782e-06  
Iteration 7:   f(p) =  1.662e-06  
Iteration 8:   f(p) =  1.352e-06  
Iteration 9:   f(p) =  1.347e-06  
Iteration 10:  f(p) =  1.347e-06  
Iteration 11:  f(p) =  1.347e-06  
(switching technique to nr)
Iteration 12:  f(p) =  1.337e-06  (not concave)
Iteration 13:  f(p) =  8.478e-08  
Iteration 14:  f(p) =  1.602e-08  
Iteration 15:  f(p) =  7.712e-10  
Iteration 16:  f(p) =  5.651e-13  
Iteration 17:  f(p) =  5.938e-20  
Iteration 18:  f(p) =  8.653e-26  
  optimize_result_iterations(S)
  19
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.447047  |
   2 |       1.x2   -1.546891  |
   3 |       1.x3   -.4710623  |
   4 |         x4   -.3822539  |
   5 |         x5    .0635824  |
   6 |         x6    -.243227  |
   7 |         x7    .0477027  |
   8 |        x90    .1334992  |
   9 |        x91   -.1336117  |
  10 |        x92    .1522937  |
  11 |        x93    .0757732  |
  12 |        x94   -.1016171  |
  13 |        x95   -.0383391  |
  14 |      _cons    .6265763  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4737920689   2.405738599   .5345336261   .4592314503   .2387116236   2.248410136   .9587650606   .8076241521   .4960818726   .6846179686  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0005904839   .0029982559   .0006661857   .0005723371   .0002975047   .0028021785   .0011949025   .0010065366   .0006182635   .0008532348  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  8.65286e-26
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4512231      .4512231      2.63e-12      5.28e-12      .4978686      1.004328  |
   3 |         1.x2      .0114039      .0114039      2.63e-13      2.47e-12      .1062323      1.004328  |
   4 |         1.x3      .0240637      .0240637      3.94e-13      2.57e-12      .1533251      1.004328  |
   5 |           x4      .4218861      .4218861      7.43e-13      1.50e-12       .494112      1.004328  |
   6 |           x5      25.44699      25.44699      1.28e-11      1.92e-12      6.665558      .6144662  |
   7 |           x6      11.84757      11.84757      1.34e-11      6.54e-12      2.042375      .5982513  |
   8 |           x7      7.015422      7.015422     -1.00e-11     -3.00e-12      3.345323      1.161761  |
   9 |          x90      .0839738      .0839738     -1.05e-14     -1.02e-14        1.0258      .8505325  |
  10 |          x91     -.0648837     -.0648837      3.35e-12      3.56e-12       .941106      .9922891  |
  11 |          x92      .0575388      .0575388     -1.11e-12     -1.12e-12      .9892732      1.118263  |
  12 |          x93      .1016523      .1016523     -1.98e-12     -2.11e-12      .9410813      1.012572  |
  13 |          x94     -.1252265     -.1252265      1.63e-12      1.59e-12      1.026859      .7576623  |
  14 |          x95     -.1044649     -.1044649      6.17e-13      6.40e-13      .9627688      .8646431  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2876.289278
  cv of control weights (cbps_port_r):
  1.033606536
  M.mean_sd_sq(denominator)
  2.32907e-24
  M.mean_asd(denominator)
  2.48484e-12
  M.max_asd(denominator)
  6.53792e-12
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  2.78392e-23   6.10770e-24   6.61748e-24   2.26259e-24   3.68583e-24   4.27443e-23   8.97851e-24   1.04607e-28   1.26637e-23   1.25274e-24
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    4.43404e-24   2.52849e-24   4.10211e-25  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  5.27629e-12   2.47138e-12   2.57245e-12   1.50419e-12   1.91985e-12   6.53792e-12   2.99642e-12   1.02277e-14   3.55861e-12   1.11926e-12
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.10572e-12   1.59012e-12   6.40477e-13  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET overidentified ---"; ""; ""
  --- ATET overidentified ---
  
  

:     cbpsweight = MW.cbps("atet", "cbps", 2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
(setting technique to bfgs)
Iteration 0:   f(p) =  .00053487  
Iteration 1:   f(p) =  .00021848  
Iteration 2:   f(p) =  .00021162  
Iteration 3:   f(p) =  .00021159  
Iteration 4:   f(p) =  .00021001  
Iteration 5:   f(p) =  .00019724  
Iteration 6:   f(p) =   .0001771  
Iteration 7:   f(p) =  .00017502  
Iteration 8:   f(p) =  .00017501  
Iteration 9:   f(p) =  .00017499  
Iteration 10:  f(p) =  .00017465  
Iteration 11:  f(p) =  .00017249  
(switching technique to nr)
Iteration 12:  f(p) =  .00017245  
Iteration 13:  f(p) =  .00017215  
Iteration 14:  f(p) =  .00017215  
Iteration 15:  f(p) =  .00017215  
  optimize_result_iterations(S)
  16
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.393749  |
   2 |       1.x2   -1.561041  |
   3 |       1.x3   -.4600041  |
   4 |         x4   -.3846168  |
   5 |         x5    .0606092  |
   6 |         x6   -.2482012  |
   7 |         x7    .0443349  |
   8 |        x90    .1306488  |
   9 |        x91   -.1205474  |
  10 |        x92    .1453092  |
  11 |        x93     .070476  |
  12 |        x94   -.1075638  |
  13 |        x95   -.0307916  |
  14 |      _cons    .7598453  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4804666451   2.466106022   .5794529823   .4795236698   .2534653344   2.204822428   .9473804216   .8064548956   .5138913175   .6635984944  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0005988024   .0030734914   .0007221684   .0005976271   .0003158921   .0027478554   .0011807139   .0010050793   .0006404593   .0008270384  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  .0001721532
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4512231      .4553292      -.004106      -.008242       .498186      1.002774  |
   3 |         1.x2      .0114039      .0111962      .0002076      .0019689      .1054487      1.022737  |
   4 |         1.x3      .0240637      .0242798     -.0002161     -.0014043      .1538723      .9956099  |
   5 |           x4      .4218861      .4235251      -.001639     -.0033156       .494322      1.003286  |
   6 |           x5      25.44699      25.39436      .0526224      .0078927      6.667188      .6141311  |
   7 |           x6      11.84757      11.82507      .0224988      .0110125      2.043017      .5978372  |
   8 |           x7      7.015422      6.978162        .03726       .011128      3.348319      1.159171  |
   9 |          x90      .0839738      .0816058       .002368      .0023047      1.027479      .8472278  |
  10 |          x91     -.0648837     -.0554765     -.0094072     -.0099831      .9423132      .9892043  |
  11 |          x92      .0575388      .0526517      .0048871      .0049455      .9881782      1.121369  |
  12 |          x93      .1016523        .09771      .0039424      .0041911      .9406607      1.013686  |
  13 |          x94     -.1252265      -.131327      .0061006      .0059387       1.02725      .7569926  |
  14 |          x95     -.1044649     -.1015494     -.0029155     -.0030291      .9625009      .8652191  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2872.573597
  cv of control weights (cbps_port_r):
  1.02146686
  M.mean_sd_sq(denominator)
  3.24223e-06
  M.mean_asd(denominator)
  .0057966356
  M.max_asd(denominator)
  .0111279635
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0000679303   3.87649e-06   1.97217e-06   .0000109933   .0000622955   .0001212761   .0001238316   5.31160e-06   .0000996618   .0000244584
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1     .000017565   .0000352685   9.17534e-06  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0082419831   .0019688801   .0014043413   .0033156176   .0078927497   .0110125421   .0111279635   .0023046916   .0099830738    .004945543
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0041910659   .0059387291   .0030290819  |
     -------------------------------------------+
  
  
  
  
  
  
  

:   
: // Other objective functions
:   cbpsweight = MW.cbps("atet","mean_sd_sq",1)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.32795  
Iteration 2:   f(p) = -411.29045  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
Iteration 5:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
(setting technique to bfgs)
Iteration 0:   f(p) =  .00026309  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 1:   f(p) =  .00001126  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 2:   f(p) =  4.734e-09  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 3:   f(p) =  3.833e-12  
  optimize_result_iterations(S)
  4
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.298301  |
   2 |       1.x2    -1.62991  |
   3 |       1.x3   -.4511738  |
   4 |         x4   -.3553036  |
   5 |         x5    .0715785  |
   6 |         x6    -.277333  |
   7 |         x7    .0371344  |
   8 |        x90    .1283825  |
   9 |        x91   -.0952386  |
  10 |        x92    .1409151  |
  11 |        x93    .0743038  |
  12 |        x94   -.1419194  |
  13 |        x95   -.0201502  |
  14 |      _cons    1.249089  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |   .440941654   2.371748502   .6449005449   .4903097253   .2548482047   2.237097629   .9046078177   .8342218405    .517119168   .6275498638  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0005495426   .0029558943   .0008037352   .0006110697   .0003176156   .0027880798   .0011274067   .0010396851   .0006444822   .0007821112  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (mean_sd_sq):
  optimize_result_value(S)
  3.83324e-12
  balance table after matching (mean_sd_sq):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4512231     .4879774    -.0367542    -.0736555     .4990018     .9953455  |
   3 |        1.x2     .0114039      .010119     .0012849     .0120677     .1064741     1.130388  |
   4 |        1.x3     .0240637     .0243904    -.0003267    -.0021258     .1536741     .9912079  |
   5 |          x4     .4218861     .4077101      .014176     .0286247     .4952368     1.014375  |
   6 |          x5     25.44699     25.93846    -.4914717    -.0906418     5.422129     .5820467  |
   7 |          x6     11.84757     11.77831     .0692637     .0421843     1.641931     .5870672  |
   8 |          x7     7.015422     6.877171     .1382508     .0388844     3.555432     1.150412  |
   9 |         x90     .0839738     .0558989      .028075     .0292534     .9597153     .8505907  |
  10 |         x91    -.0648837    -.0314166    -.0334672    -.0356561       .93861     .9896463  |
  11 |         x92     .0575388     .0508002     .0067386     .0065073      1.03554     1.132825  |
  12 |         x93     .1016523       .11091    -.0092577    -.0097823     .9463749     1.021043  |
  13 |         x94    -.1252265    -.1752569     .0500304     .0546926     .9147554     .7291559  |
  14 |         x95    -.1044649    -.1041679    -.0002971    -.0003275     .9069849     .8690487  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (mean_sd_sq):
  2884.45373
  cv of control weights (mean_sd_sq):
  1.064749554
  M.mean_sd_sq(denominator)
  3.83324e-12
  M.mean_asd(denominator)
  .0326464229
  M.max_asd(denominator)
  .0906418414
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0054251322   .0001456299   4.51905e-06    .000819375   .0082159434   .0017795127   .0015119967   .0008557627   .0012713565   .0000423448
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0000956926   .0029912859   1.07278e-07  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0736554967   .0120677202   .0021258067   .0286247268   .0906418414   .0421842709   .0388844022   .0292534214   .0356560865   .0065072847
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0097822587    .054692649   .0003275329  |
     -------------------------------------------+
  
  
  
  
  
  
  

:   cbpsweight = MW.cbps("atet","sd_sq",1)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.32795  
Iteration 2:   f(p) = -411.29045  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
Iteration 5:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
(setting technique to bfgs)
Iteration 0:   f(p) =  .01944489  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 1:   f(p) =  .01784035  (backed up)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 2:   f(p) =  .01032757  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 3:   f(p) =  .00864462  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 4:   f(p) =  .00309573  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 5:   f(p) =  .00232235  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 6:   f(p) =  .00091852  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 7:   f(p) =  .00071553  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 8:   f(p) =  .00032888  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 9:   f(p) =  .00013226  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 10:  f(p) =  .00006152  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 11:  f(p) =  .00004718  
(switching technique to nr)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 12:  f(p) =  .00002689  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 13:  f(p) =  9.912e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 14:  f(p) =  8.138e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 15:  f(p) =  7.173e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 16:  f(p) =  6.875e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 17:  f(p) =  6.135e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 18:  f(p) =  5.890e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 19:  f(p) =  4.308e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 20:  f(p) =  4.241e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 21:  f(p) =  3.979e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 22:  f(p) =  3.920e-06  (not concave)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 23:  f(p) =  3.625e-06  (not concave)
(switching technique to bfgs)
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 24:  f(p) =  3.276e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 25:  f(p) =  3.202e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 26:  f(p) =  2.726e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 27:  f(p) =  2.180e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 28:  f(p) =  2.109e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 29:  f(p) =  1.990e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 30:  f(p) =  1.867e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 31:  f(p) =  1.843e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 32:  f(p) =  1.628e-06  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 33:  f(p) =  9.889e-07  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 34:  f(p) =  8.951e-07  
numerical derivatives are approximate
flat or discontinuous region encountered
Iteration 35:  f(p) =  8.951e-07  
  optimize_result_iterations(S)
  36
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.450105  |
   2 |       1.x2   -1.546859  |
   3 |       1.x3   -.4693216  |
   4 |         x4    -.381326  |
   5 |         x5    .0637561  |
   6 |         x6   -.2429901  |
   7 |         x7    .0476905  |
   8 |        x90    .1337113  |
   9 |        x91   -.1339388  |
  10 |        x92    .1521739  |
  11 |        x93    .0758905  |
  12 |        x94   -.1016142  |
  13 |        x95   -.0385948  |
  14 |      _cons    1.391866  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4709022638   2.397755782    .531646422   .4565583151   .2371447438   2.246299711    .953210921   .8037576445   .4930788915   .6820333696  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0005868823    .002988307   .0006625874   .0005690056   .0002955519   .0027995483   .0011879804   .0010017178   .0006145209   .0008500136  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (sd_sq):
  optimize_result_value(S)
  8.95088e-07
  balance table after matching (sd_sq):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4512231     .4508798     .0003433      .000688     .4990018     1.004459  |
   3 |        1.x2     .0114039     .0114186    -.0000147    -.0001381     .1064741     1.003044  |
   4 |        1.x3     .0240637     .0240931    -.0000294    -.0001911     .1536741     1.003129  |
   5 |          x4     .4218861      .421982    -.0000959    -.0001937     .4952368     1.004261  |
   6 |          x5     25.44699     25.44839    -.0014069    -.0002595     5.422129     .6144021  |
   7 |          x6     11.84757     11.84824    -.0006673    -.0004064     1.641931     .5982652  |
   8 |          x7     7.015422     7.015544    -.0001223    -.0000344     3.555432     1.161701  |
   9 |         x90     .0839738     .0841556    -.0001818    -.0001895     .9597153     .8505686  |
  10 |         x91    -.0648837    -.0650494     .0001657     .0001765       .93861     .9924936  |
  11 |         x92     .0575388     .0574039     .0001349     .0001303      1.03554     1.118042  |
  12 |         x93     .1016523     .1017137    -.0000614    -.0000649     .9463749     1.012643  |
  13 |         x94    -.1252265    -.1252339     7.40e-06     8.09e-06     .9147554     .7576661  |
  14 |         x95    -.1044649    -.1045388     .0000738     .0000814     .9069849     .8645471  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (sd_sq):
  2863.26952
  cv of control weights (sd_sq):
  1.034186038
  M.mean_sd_sq(denominator)
  9.15308e-10
  M.mean_asd(denominator)
  .0001970684
  M.max_asd(denominator)
  .0006880073
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  4.73354e-07   1.90817e-08   3.65210e-08   3.75201e-08   6.73261e-08   1.65172e-07   1.18413e-09   3.58924e-08   3.11693e-08   1.69654e-08
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    4.21246e-09   6.55209e-11   6.62457e-09  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0006880073   .0001381366   .0001911047   .0001937011   .0002594727   .0004064132   .0000344112   .0001894529   .0001765484   .0001302513
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0000649035   8.09450e-06   .0000813915  |
     -------------------------------------------+
  
  
  
  
  
  
  

:     
: // IPW
: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' [iw=`wgtvar'], atet aequations")

Iteration 0:   EE criterion =  3.987e-18  
Iteration 1:   EE criterion =  1.444e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Treated vs Untreated)  |  -373.2561   49.21885    -7.58   0.000    -469.7233   -276.7889
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3424.879   30.82585   111.10   0.000     3364.462    3485.297
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.299227   .2371935    -5.48   0.000    -1.764118   -.8343367
                        |
                     x2 |
                     1  |  -1.630014    .746001    -2.19   0.029    -3.092149   -.1678787
                        |
                     x3 |
                     1  |  -.4513753   .5770312    -0.78   0.434    -1.582336    .6795851
                     x4 |  -.3551911    .204881    -1.73   0.083    -.7567506    .0463684
                     x5 |    .058452   .0195046     3.00   0.003     .0202237    .0966803
                     x6 |  -.2821622    .049775    -5.67   0.000    -.3797195    -.184605
                     x7 |   .0332008   .0279849     1.19   0.235    -.0216486    .0880501
                    x90 |   .1276778   .0907109     1.41   0.159    -.0501124     .305468
                    x91 |  -.0961159   .0916737    -1.05   0.294     -.275793    .0835612
                    x92 |   .1400043   .0976573     1.43   0.152    -.0514004    .3314091
                    x93 |   .0734557   .0916967     0.80   0.423    -.1062665     .253178
                    x94 |  -.1435742   .0862727    -1.66   0.096    -.3126656    .0255172
                    x95 |  -.0212452   .0898768    -0.24   0.813    -.1974006    .1549102
                  _cons |    1.24872   .6712769     1.86   0.063    -.0669587    2.564399
-----------------------------------------------------------------------------------------

:   stata("tebalance summarize, baseline")  // I noticed the sum of weights in tebalance are weird

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        249.5
                          Control obs   =          408        250.5
                          -----------------------------------------

  -----------------------------------------------------------------
                  |           Means                  Variances     
                  |    Control     Treated       Control    Treated
  ----------------+------------------------------------------------
               x1 |        .75    .4673913      .1879607   .2516722
                  |
               x2 |
               1  |   .0269608    .0108696      .0262984   .0108696
                  |
               x3 |
               1  |   .0441176    .0217391      .0422749   .0215002
                  |
               x4 |    .495098    .4347826      .2505902   .2484472
               x5 |   26.56863    25.46739      34.50142   29.63629
               x6 |   13.15931    11.86957      5.195687   2.576206
               x7 |   6.696078    6.858696      10.90495   12.65014
              x90 |   -.048508    .0972024      .9792937   .9097065
              x91 |  -.0077434   -.0890157      1.011341   .8891627
              x92 |  -.0227801    .0453787      1.013567    1.10497
              x93 |   .0403853    .0865687      .9793358   .8741716
              x94 |   .0160559   -.1299173      .9846065   .8552718
              x95 |  -.0658282   -.0807251      1.008285   .8354051
  -----------------------------------------------------------------

:   table = DW.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4512231     .7470371     -.295814    -.6319633     .4680872     1.316024  |
   3 |        1.x2     .0114039     .0270527    -.0156488    -.1139938     .1372778     .4301765  |
   4 |        1.x3     .0240637     .0427955    -.0187318    -.1042015     .1797649     .5757804  |
   5 |          x4     .4218861     .4976147    -.0757286    -.1521333     .4977779     .9798375  |
   6 |          x5     25.44699      26.4983    -1.051311    -.1863779      5.64075      .858714  |
   7 |          x6     11.84757     13.15616    -1.308591    -.6594519     1.984361     .5205072  |
   8 |          x7     7.015422     6.717714     .2977072     .0866021     3.437643     1.149851  |
   9 |         x90     .0839738    -.0392197     .1231936     .1258938     .9785514     .9265459  |
  10 |         x91    -.0648837    -.0073142    -.0575695    -.0596653      .964873     .8980782  |
  11 |         x92     .0575388    -.0253504     .0828891     .0813611     1.018781     1.068619  |
  12 |         x93     .1016523     .0464178     .0552345     .0572377     .9650011     .9263536  |
  13 |         x94    -.1252265     .0045953    -.1298217    -.1361687     .9533888     .8528771  |
  14 |         x95    -.1044649    -.0695904    -.0348746    -.0364286     .9573389     .8141756  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' [iw=`wgtvar'], atet aequations")

Iteration 0:   EE criterion =  3.987e-18  
Iteration 1:   EE criterion =  1.444e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Treated vs Untreated)  |  -373.2561   49.21885    -7.58   0.000    -469.7233   -276.7889
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3424.879   30.82585   111.10   0.000     3364.462    3485.297
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.299227   .2371935    -5.48   0.000    -1.764118   -.8343367
                        |
                     x2 |
                     1  |  -1.630014    .746001    -2.19   0.029    -3.092149   -.1678787
                        |
                     x3 |
                     1  |  -.4513753   .5770312    -0.78   0.434    -1.582336    .6795851
                     x4 |  -.3551911    .204881    -1.73   0.083    -.7567506    .0463684
                     x5 |    .058452   .0195046     3.00   0.003     .0202237    .0966803
                     x6 |  -.2821622    .049775    -5.67   0.000    -.3797195    -.184605
                     x7 |   .0332008   .0279849     1.19   0.235    -.0216486    .0880501
                    x90 |   .1276778   .0907109     1.41   0.159    -.0501124     .305468
                    x91 |  -.0961159   .0916737    -1.05   0.294     -.275793    .0835612
                    x92 |   .1400043   .0976573     1.43   0.152    -.0514004    .3314091
                    x93 |   .0734557   .0916967     0.80   0.423    -.1062665     .253178
                    x94 |  -.1435742   .0862727    -1.66   0.096    -.3126656    .0255172
                    x95 |  -.0212452   .0898768    -0.24   0.813    -.1974006    .1549102
                  _cons |    1.24872   .6712769     1.86   0.063    -.0669587    2.564399
-----------------------------------------------------------------------------------------

:   ipw = DW.ipw("atet")
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.32795  
Iteration 2:   f(p) = -411.28929  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
Iteration 5:   f(p) = -411.19865  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.299227462   -1.630013723    -.451375265   -.3551910971    .0584519984    -.282162246    .0332007599    .1276777932   -.0961158854    .1400043185
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1     .0734557382   -.1435741845   -.0212452286    1.248719931  |
     -------------------------------------------------------------+

:   stata("tebalance summarize")  // I noticed the sum of weights in tebalance are weird

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        249.5
                          Control obs   =          408        250.5
                          -----------------------------------------

  -----------------------------------------------------------------
                  |Standardized differences          Variance ratio
                  |        Raw    Weighted           Raw   Weighted
  ----------------+------------------------------------------------
               x1 |  -.6027752    .0041102      1.338962   1.000571
                  |
               x2 |
               1  |  -.1180374    .0011686      .4133173   1.011157
                  |
               x3 |
               1  |  -.1253201   -.0169419      .5085817   .8975379
                  |
               x4 |  -.1207472    .0136004      .9914484   1.003798
               x5 |  -.1944638     .003179      .8589874   .5855492
               x6 |  -.6542694    .0947099      .4958356   .5643304
               x7 |   .0473848    .0177567      1.160037   1.134687
              x90 |   .1499304    .0348222      .9289414    .817157
              x91 |  -.0833726   -.0675073      .8791918     .96061
              x92 |   .0662245   -.0005441      1.090179   1.148892
              x93 |   .0479737    -.020065      .8926169   .9606022
              x94 |  -.1521926    .0315996      .8686432   .7548902
              x95 |  -.0155155    .0398234      .8285405   .8815991
  -----------------------------------------------------------------

:   DW.multweight(ipw)

:   table = DW.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4512231     .4574808    -.0062577    -.0125467     .4987508     1.002016  |
   3 |        1.x2     .0114039     .0104612     .0009427     .0090496     .1041667     1.093786  |
   4 |        1.x3     .0240637     .0241722    -.0001085    -.0007058     .1536767     .9999323  |
   5 |          x4     .4218861     .4314162    -.0095301    -.0192367     .4954098     .9986039  |
   6 |          x5     25.44699     25.25275     .1942356     .0309352     6.278789     .5945665  |
   7 |          x6     11.84757     11.67955     .1680205     .0885487     1.897493     .5984287  |
   8 |          x7     7.015422     6.824197     .1912245     .0556435       3.4366     1.151353  |
   9 |         x90     .0839738     .0777469     .0062269     .0061803     1.007542     .8303562  |
  10 |         x91    -.0648837     -.033852    -.0310317    -.0329813      .940886      .990382  |
  11 |         x92     .0575388     .0480591     .0094797     .0094309     1.005171     1.130693  |
  12 |         x93     .1016523     .1032412    -.0015889    -.0016918     .9391571     1.031343  |
  13 |         x94    -.1252265    -.1745685     .0493421     .0498225     .9903584     .7439065  |
  14 |         x95    -.1044649    -.1114622     .0069973     .0074459     .9397461     .8717687  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' [iw=`wgtvar'], ate aequations")

Iteration 0:   EE criterion =  3.987e-18  
Iteration 1:   EE criterion =  2.423e-25  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATE                     |
                  treat |
(Treated vs Untreated)  |  -332.1348   56.53175    -5.88   0.000     -442.935   -221.3346
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3453.029    20.1341   171.50   0.000     3413.567    3492.491
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.299227   .2371935    -5.48   0.000    -1.764118   -.8343367
                        |
                     x2 |
                     1  |  -1.630014    .746001    -2.19   0.029    -3.092149   -.1678787
                        |
                     x3 |
                     1  |  -.4513753   .5770312    -0.78   0.434    -1.582336    .6795851
                     x4 |  -.3551911    .204881    -1.73   0.083    -.7567506    .0463684
                     x5 |    .058452   .0195046     3.00   0.003     .0202237    .0966803
                     x6 |  -.2821622    .049775    -5.67   0.000    -.3797195    -.184605
                     x7 |   .0332008   .0279849     1.19   0.235    -.0216486    .0880501
                    x90 |   .1276778   .0907109     1.41   0.159    -.0501124     .305468
                    x91 |  -.0961159   .0916737    -1.05   0.294     -.275793    .0835612
                    x92 |   .1400043   .0976573     1.43   0.152    -.0514004    .3314091
                    x93 |   .0734557   .0916967     0.80   0.423    -.1062665     .253178
                    x94 |  -.1435742   .0862727    -1.66   0.096    -.3126656    .0255172
                    x95 |  -.0212452   .0898768    -0.24   0.813    -.1974006    .1549102
                  _cons |    1.24872   .6712769     1.86   0.063    -.0669587    2.564399
-----------------------------------------------------------------------------------------

:   DW.multweight()

:   ipw = DW.ipw("ate")
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.32795  
Iteration 2:   f(p) = -411.28929  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
Iteration 5:   f(p) = -411.19865  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.299227462   -1.630013723    -.451375265   -.3551910971    .0584519984    -.282162246    .0332007599    .1276777932   -.0961158854    .1400043185
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1     .0734557382   -.1435741845   -.0212452286    1.248719931  |
     -------------------------------------------------------------+

: 
: end  // end of Mata block
----------------------------------------------------------------------------------------------------------------------------------------------------------------

. 
. log close gmatch_example
      name:  gmatch_example
       log:  C:\Users\kkranker\Documents\Stata\Ado\Devel\gmatch\gmatch_example.log
  log type:  text
 closed on:  12 Feb 2018, 20:47:12
----------------------------------------------------------------------------------------------------------------------------------------------------------------
