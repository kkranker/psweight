----------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  gmatch_example
       log:  C:\Users\kkranker\Documents\Stata\Ado\Devel\gmatch\gmatch_example.log
  log type:  text
 opened on:  12 Feb 2018, 19:07:08

. 
. // Multiple-equation models: An introduction and potential applications to our work at Mathematica
. // Design and methods “brown bag” workshop
. // April 8, 2015
. // Keith Kranker
. 
. // Stata_code_2_IPW.do This program includes all the examples in the powerpoint slides, plus more.
. // This program includes examples of how to code inverse propensity weighting (IPW) estimators using Stata's GMM command
. 
. include C:\Users\kkranker\Documents\Stata\Ado\Devel\gmatch\gmatchclass.mata

. * clear all
. * cls
. 
. mata:
------------------------------------------------- mata (type end to exit) --------------------------------------------------------------------------------------
: 
: mata set matastrict on

: 
: class gmatch
> {
>   private:
>     real colvector   T, W, sel1, sel0, Y0, W_orig
>     real matrix      X, XC, Xstd
>     string scalar    treatvar, depvars, wgtvar, constvar
>     string rowvector varlist
>     real rowvector   means1, means0, meansP, variances0, variances1, variancesP, variancesA
>     real matrix      covariances0, covariances1, covariancesP, covariancesA
>     void             calcmeans(), calcvariances(), calcN(), calccovariances(), cbps_port_stata(), cbps_port_r()
>     real scalar      N1, N0, N, N1_raw, N0_raw, N_raw
>     real scalar      mean_sd_sq(),  entropydistance()
>     real rowvector   olsbeta(), diagvariance(), logitbeta(), sd_sq(), asd()
>     real colvector   olspredict(), logitpredict(), logitweights(), cbps_port_stata_moments(), trim()
>     real matrix      cbps_port_stata_wgt_matrix(), cbps_port_stata_gradient()
> 
>   public:
>     void             new(), set(), set_W(), set_Y(), clone(), multweight(), cbpseval()
>     real rowvector   diff(), stddiff(), varratio(), prognosticdiff(), pomean()
>     real scalar      mean_asd(), max_asd()
>     real colvector   ipw(), cbps()
>     real matrix      balancetable()
> }

: 
: // The following functions read data into the instance of the class
: // set_W() needs to be called after set_T()
: void gmatch::new()
> {
>   // /* */ "New instance of gmatch() created"
>   // /* */ "gmatch::new() doesn't do anything"
>   // /* */ "T is " + strofreal(rows(this.T)) + " by " + strofreal(cols(this.T))
>   this.depvars = ""
> }

: 
: // clones a copy of an instant
: // this isn't completely efficient -- views will be variables after the clone
: void gmatch::clone(class gmatch scalar src)
> {
>   this.N        = src.N
>   this.N_raw    = src.N_raw
>   this.N0       = src.N0
>   this.N0_raw   = src.N0_raw
>   this.N1       = src.N1
>   this.N1_raw   = src.N1_raw
>   this.T        = src.T
>   this.W        = src.W
>   this.W_orig   = src.W_orig
>   this.X        = src.X
>   this.XC       = src.XC
>   this.Y0       = src.Y0
>   this.constvar = src.constvar
>   this.depvars  = src.depvars
>   this.sel0     = src.sel0
>   this.sel1     = src.sel1
>   this.treatvar = src.treatvar
>   this.varlist  = src.varlist
>   this.wgtvar   = src.wgtvar
> }

: 
: void gmatch::set(string scalar treatvar, string scalar varlist, string scalar constvar, string scalar tousevar, | string scalar wgtvar)
> {
>   // Define treatment dummy
>   this.T=this.X=this.XC=this.W=.
>   this.treatvar = treatvar
>   st_view(this.T, ., treatvar, tousevar)
>   // /* */  "T is " + strofreal(rows(this.T)) + " by " + strofreal(cols(this.T))
> 
>   // Define covariates
>   this.constvar = constvar
>   this.varlist  = tokens(varlist)
>   st_view(this.XC, .,   (this.varlist, this.constvar), tousevar)
>   st_view(this.X , .,    this.varlist                , tousevar)
>   // this makes Stata crash; see my post at https://www.statalist.org/forums/forum/general-stata-discussion/mata/1429795 */   
>   //   st_subview(this.X , this.XC, ., 1\(cols(this.XC)-1))
>   /* */  "X contains" ; this.varlist
>   /* */  "X is " + strofreal(rows(this.X)) + " by " + strofreal(cols(this.X))
> 
>   // Define weights
>   // This code assumes weights are **already** normalized. Here's code to normalize: this.W = this.W :/ (rows(this.W) / quadcolsum(this.W))
>   if (args()>4) {
>     this.wgtvar = wgtvar
>     st_view(this.W_orig, ., this.wgtvar, tousevar) // an extra copy of the weight variable that can only be set via this function. Useful for reweighting/matc
> hing situations.
>     this.W = this.W_orig // W_orig is a view, but W is not
>     // /* */  "W is " + strofreal(rows(this.W)) + " by " + strofreal(cols(this.W))
>   }
>   else {
>     this.W = this.W_orig = J(rows(T),1,1)
>     "Data are unweighted."
>   }
>   this.calcN()
>   strofreal(this.N0_raw) + " control obs (sum of weights = " + strofreal(this.N0) + ")"
>   strofreal(this.N1_raw) + " treatment obs (sum of weights = " + strofreal(this.N1) + ")"
> }

: 
: void gmatch::calcN() {
> 
>   // Index to select observations in control and treatment groups
>   this.sel0 = selectindex(!this.T :& this.W)
>   this.sel1 = selectindex( this.T :& this.W)
> 
>   // Save number of observations
>   this.N0_raw = rows(this.sel0)
>   this.N1_raw = rows(this.sel1)
>   this.N_raw = this.N0_raw + this.N1_raw
>   if (min((this.N0_raw,this.N1_raw)==0)) _error("At least one treatment and control observation required.")
> 
>   // Save weighted number of observations
>   this.N0 = quadcolsum(this.W[this.sel0])
>   this.N1 = quadcolsum(this.W[this.sel1])
>   this.N = this.N0 + this.N1
>   if (min((this.N0,this.N1)==0)) _error("Sum of weights is 0 in the treatment or control group.")
> 
>   // these means/varinaces are saved internally in the class (to avoid computing them over and over).
>   // They need to be reset because we just reweighted the sample.
>   // If I'm re-calcuating sample sizes, this is probably the case.  Set to missing here just to be safe.
>   this.means0 = this.means1 = this.variances0 = this.variances1 = this.variancesP = this.variancesA = J(1,0,.)
>   this.covariances0 = this.covariances1 = this.covariancesP = this.covariancesA = J(0,0,.)
> 
> }

: 
: // Note: this function doesn't allow the class to touch the treatment group's outcome data
: void gmatch::set_Y(string scalar depvarnames, string scalar tousevar)
> {
>   real colvector Y
>   this.depvars = tokens(depvarnames)
>   Y=.
>   st_view(Y, ., this.depvars, tousevar)
>   st_select(this.Y0, Y, !this.T)
>   // /* */  "Y0 is " + strofreal(rows(this.Y0)) + " by " + strofreal(cols(this.Y0))
> }

: 
: // multipy the original weights by something
: void gmatch::multweight(|real colvector newweight)
> {
>   if (args()<1) newweight=1
>   this.W = this.W_orig :* newweight
>   // some new weights could be zero.  recalculate N and set means/variances to missing.
>   this.calcN()
>   this.means0 = this.means1 = this.variances0 = this.variances1 = this.variancesP = this.variancesA = J(1,0,.)
>   this.covariances0 = this.covariances1 = this.covariancesP = this.covariancesA = J(0,0,.)
> }

: 
: 
: // This function makes a balance table and prints it to the screen
: // The argument is the same as their definition in stddiff() and varratio()
: real matrix gmatch::balancetable(| real scalar denominator)
> {
>   real matrix table
>   if (args()<1) denominator=1
> 
>   if (!length(this.means1))     this.calcmeans()
>   if (!length(this.variances1)) this.calcvariances()
> 
>   table = ( this.means1
>           \ this.means0
>           \ this.diff()
>           \ this.stddiff(denominator)
>           \ (denominator==0 ? sqrt(this.variances0) : (denominator==1 ? sqrt(this.variances1) : (denominator==2 ? sqrt(this.variancesP) : (denominator==3 ? sq
> rt(this.variancesA) : _error("denominator argument invalid")))))
>           \ this.varratio())'
> 
>   // print to screen with labels
>   (("Variable" \ varlist'),
>   (( "mean (T)",
>      "mean (C)",
>      "diff()",
>      "stddiff()",
>      (denominator==0 ? "sd (C)" : (denominator==1 ? "sd (T)" : (denominator==2 ? "sd (Pooled)" : (denominator==3 ? "sd (Avg)" : "")))),
>      "varratio()")
>      \ strofreal(table) ))
> 
>   return(table)
> }

: 
: // This function calculates the means for the T and C groups
: // These means are saved internally in the class (to avoid computing them over and over)
: // Call this function whenever sample or weights change
: void gmatch::calcmeans()
> {
>   this.means0 = mean(this.X[this.sel0, .], this.W[this.sel0])
>   this.means1 = mean(this.X[this.sel1, .], this.W[this.sel1])
>   this.meansP = mean(this.X, this.W)
>   // /* */ "Control group means:"  ; this.means0
>   // /* */ "Treatment group means:"; this.means1
> }

: 
: // This function calculates the difference in means between the T and C groups
: real rowvector gmatch::diff()
> {
>   if (!length(this.means1)) this.calcmeans()
>   return(this.means1 :- this.means0)
> }

: 
: 
: real scalar gmatch::entropydistance(real colvector x, | real colvector w) {
>   real colvector e
>   real scalar sumw
>   if (args()<2) {
>     w=1
>     sumw=rows(x)
>   }
>   else {
>     sumw=quadcolsum(w)
>   }
> 
>   // for me, the sum of weights is rows(x) (unweighted) or sum(w) (weighted)
>   // in entropy balancing from Hainmueller et al., the sum of the weights = 1.
>   e = x :* ln( x :* sumw )
>   return( quadcolsum( e ) )
> }

: 
: 
: // Define function diagvariance(x, w) == diagonal(quadvariance(x, w))'
: // This function can be a lot faster than quadvariance, especially when you have lots of columns.
: // Optionally, you can provide weights and/or provide a rowvector with the column means.
: // For testing, mreldif(diagvariance(X, w), diagonal(quadvariance(X, w))') should be small
: real rowvector gmatch::diagvariance(real matrix x, | real colvector w, real rowvector xmean)
> {
>   real rowvector v
>   if (args()<2) w = 1
>   if (args()<3) xmean = mean(x, w)
> 
>   if (all(w:==1)) v = quadcolsum( (x:-xmean):^2)     / (rows(x)-1)
>   else            v = quadcolsum(((x:-xmean):^2):*w) / (quadcolsum(w)-1)
>   return(v)
> }

: 
: // This function calculates the variances for the T and C group,
: // These variances are saved internally in the class (to avoid computing them over and over)
: // Call this function whenever sample or weights change
: void gmatch::calcvariances()
> {
>   if (!length(this.means1)) this.calcmeans()
>   this.variances0 = this.diagvariance(this.X[this.sel0, .], this.W[this.sel0], this.means0)
>   this.variances1 = this.diagvariance(this.X[this.sel1, .], this.W[this.sel1], this.means1)
>   this.variancesP = this.diagvariance(this.X, this.W)
>   this.variancesA = (this.variances0 :+ this.variances1) :/ 2
>   // /* */ "Control group variances:"; this.variances0
>   // /* */ "Treatment group variances:"; this.variances1
>   // /* */ "Pooled variances:"; this.variancesP
>   // /* */ "Average of variances from treatment and control groups"; this.variancesA
> }

: 
: // This function calculates the variances for the T and C group,
: // and saves the results in private variables
: void gmatch::calccovariances()
> {
>   if (all(this.W:==1)) {
>     this.covariances0 = quadvariance(this.X[this.sel0, .])
>     this.covariances1 = quadvariance(this.X[this.sel1, .])
>     this.covariancesP = quadvariance(this.X)
>   }
>   else {
>     this.covariances0 = quadvariance(this.X[this.sel0, .], this.W[this.sel0])
>     this.covariances1 = quadvariance(this.X[this.sel1, .], this.W[this.sel1])
>     this.covariancesP = quadvariance(this.X, this.W)
>   }
>   this.covariancesA = (this.covariances0 :+ this.covariances1) :/ 2
>   // /* */ "Control group covariances:"; this.covariances0
>   // /* */ "Treatment group covariances:"; this.covariances1
>   // /* */ "Pooled covariances:"; this.covariancesP
>   // /* */ "Average of covariances from treatment and control groups"; this.covariancesA
>   this.variances0 = diagonal(this.covariances0)'
>   this.variances1 = diagonal(this.covariances1)'
>   this.variancesP = diagonal(this.covariancesP)'
>   this.variancesA = diagonal(this.covariancesA)'
>   // /* */ "Average of variances from treatment and control groups"; this.variancesA
> }

: 
: // This function calculates standardized differences in means between the T and C groups
: // The first argument is optional, and tells the function which variance to use in the denominator
: //    = 0, it uses the control groups' variances
: //    = 1, it uses the treatment groups' variances (this is the default)
: //    = 2, it uses the pooled variances
: //    = 3, it uses (control groups' variances + treatment groups' variances)/2  (the definition from Stata's tbalance command)
: real rowvector gmatch::stddiff(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   real rowvector stddiff
>   if (!length(this.variances1)) this.calcvariances()
>   if      (denominator==0) stddiff = (this.diff() :/ sqrt(this.variances0))
>   else if (denominator==1) stddiff = (this.diff() :/ sqrt(this.variances1))
>   else if (denominator==2) stddiff = (this.diff() :/ sqrt(this.variancesP))
>   else if (denominator==3) stddiff = (this.diff() :/ sqrt(this.variancesA))
>   else _error(strofreal(denominator)+ " is an invalid argument for gmatch::stddiff()")
>   return(stddiff)
> }

: 
: // functions to return mean/max absolute standardized differences
: real rowvector gmatch::asd(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(abs(this.stddiff(denominator)))
> }

: real rowvector gmatch::sd_sq(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(this.stddiff(denominator):^2)
> }

: real scalar gmatch::mean_asd(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(mean(this.asd(denominator)'))
> }

: real scalar gmatch::max_asd(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(max(this.asd(denominator)))
> }

: real scalar gmatch::mean_sd_sq(| real scalar denominator)
> {
>   if (args()<1) denominator=1
>   return(mean(this.stddiff(denominator)')^2)
> }

: 
: 
: // This function calculates ratio of variances between the T and C groups
: real rowvector gmatch::varratio()
> {
>   if  (!length(this.variances1)) this.calcvariances()
>   return((this.variances1 :/ this.variances0))
> }

: 
: 
: // function that returns difference in y_hat, where y_hat is generated using a
: // OLS regression of y on X using the control group data
: real rowvector gmatch::prognosticdiff()
> {
>   real rowvector beta, progdiff
>   real colvector yhat
>   real scalar yhat_bar_0, yhat_bar_1, c
>   if (!length(this.depvars)) _error("Dependent variable is undefined.  Use gmatch::set_Y().")
> 
>   yhat = J(rows(this.X), cols(this.Y0), .)
>   for (c=1; c<=cols(this.Y0); c++) {
>     beta = this.olsbeta(this.Y0[.,c], this.X[this.sel0,.], this.W[this.sel0])
>     yhat[.,c] = this.olspredict(this.X, beta)
>   }
> 
>   yhat_bar_0 = mean(yhat[this.sel0,.], this.W[this.sel0])
>   yhat_bar_1 = mean(yhat[this.sel1,.], this.W[this.sel1])
>   progdiff = yhat_bar_1 :- yhat_bar_0
> 
>   // print to screen with labels
>   (("Dependent var." \ depvars'), 
>   (( "mean of y_hat (T)", "mean of y_hat (C)","prognosticdiff()")
>     \ strofreal((yhat_bar_1', yhat_bar_0', progdiff'))))
> 
>   return(progdiff)
> }

: 
: 
: // Define function to calculate coefficients for an OLS regression model
: // A contant term is included in the regression.
: real rowvector gmatch::olsbeta(real matrix y, real matrix X, | real colvector w, real scalar addconst)
> {
>   real colvector beta
>   real matrix XX, Xy
>   if (args()<3) w=1
>   if (args()<4) addconst=1
> 
>   if (addconst) {
>     XX = quadcross(X, 1, w, X, 1)
>     Xy = quadcross(X, 1, w, y, 0)
>     beta = invsym(XX,(cols(X)+1))*Xy
>   }
>   else {
>     XX = quadcross(X, 0, w, X, 0)
>     Xy = quadcross(X, 0, w, y, 0)
>     beta = invsym(XX)*Xy
>   }
>   return(beta')
> }

: 
: // Function that returns predicted values, X*beta'
: // If cols(X)+1==cols(beta), the function assumes the last coefficient corresponds to the constant term, and X just doesn't have a constant term
: // Warning: this function doesn't check the conformability; I rely on Stata to produce errors with invalid arguments
: real colvector gmatch::olspredict(real matrix X, real rowvector beta)
> {
>   if ((cols(X)==cols(beta)) & cols(beta)) {
>     return(X*beta')
>   }
>   else if ((cols(X)==cols(beta)-1) & cols(beta)) {
>     return((X*beta[1..(cols(beta)-1)]') :+ beta[cols(beta)])
>   }
>   else _error("X and beta are not conformable.")
> }

: 
: 
: // function that returns IPW weights
: //    est corresponds to the options in gmatch::logitweights()
: //    est = "ate"  computes weights for average treatment effect (the default)
: //        = "atet" computes weights for average treatment effect on the treated
: //        = "ateu" computes weights for average treatment effect on the untreated
: real colvector gmatch::ipw(string scalar est)
> {
>   real rowvector beta
>   real colvector pscore, ipwwgt
>   if (args()<1) est="ate"
>   beta   = this.logitbeta(this.T, this.X, this.W, 1)
>   /* */ "propensity score (logit) model beta:"; beta
>   pscore = this.logitpredict(this.X, beta)
>   ipwwgt = this.logitweights(pscore, est)
>   return(ipwwgt)
> }

: 
: 
: // function that returns (weighted) mean of the dependent variable(s)
: real rowvector gmatch::pomean()
> {
>   if (this.depvars=="") _error("dependent variable not defined. use gmatch::set_Y()")
>   return( mean(this.Y0, this.W[this.sel0]) )
> }

: 
: // Function that returns predicted values (e.g., propensity scores) if given the X's and betas, using the logit model functional form
: // If cols(X)+1==cols(beta), the function assumes the last coefficient corresponds to a constant term, and X just doesn't include it
: // Warning: this function doesn't check the conformability; I assume Stata will produce an error with invalid arguments
: real colvector gmatch::logitpredict(real matrix X, real rowvector beta)
> {
>   if ((cols(X)==cols(beta)) & cols(beta)) {
>     return(invlogit(X*beta'))
>   }
>   else if ((cols(X)==cols(beta)-1) & cols(beta)) {
>     return(invlogit((X*beta[1..(cols(beta)-1)]') :+ beta[cols(beta)]))
>   }
>   else _error("X and beta are not conformable.")
> }

: 
: // trims a generic column vector, x
: // by default, trimming is at 1e-6 and 1-1e-6, which is useful for trimming propensity scores very close to 0 or 1
: real colvector gmatch::trim(real colvector x, | real scalar minval, real scalar maxval)
> {
>   real colvector out
>   if (args()<2) minval = 1e-6
>   if (args()<3) maxval = 1-minval
>   out = rowmax((J(rows(x),1,minval),rowmin((J(rows(x),1,maxval),x))))
>   return(out)
> }

: 
: // This turns a vector of pscores into IPW weights. this assumes a logit setup.
: // Formulas match the normalized weights in Stata's teffects IPW command
: //    pscore is a vector of propensity scores
: //    est = "ate"  computes weights for average treatment effect (the default)
: //        = "atet" computes weights for average treatment effect on the treated
: //        = "ateu" computes weights for average treatment effect on the untreated
: real colvector gmatch::logitweights(real colvector pscore, | string scalar est)
> {
>   real colvector pm
>   real matrix ipwwgt
>   if (args()<2) est="ate"
> 
>   if (any(pscore:<=0) | any(pscore:>=1)) _error("Propensity scores need to be greater than 0 and less than 1.")
> //  /* */ if (minmax[1,1]<=0.03 & (strlower(est)=="ate" | strlower(est)=="ateu")) errprintf("Warning: minimum propensity score is %12.0g \n", minmax[1,1])
> //  /* */ if (minmax[1,2]>=0.97 & (strlower(est)=="ate" | strlower(est)=="atet")) errprintf("Warning: maximum propensity score is %12.0g \n", minmax[1,2])
> 
>   pm = 1 :- (!this.T)
>   if      (strlower(est)=="ate")   ipwwgt = (pm :/pscore) :+ (!pm:/(1:-pscore))
>   else if (strlower(est)=="atet")  ipwwgt =  pm :+ (!pm :* (pscore:/(1:-pscore)))
>   else if (strlower(est)=="ateu")  ipwwgt = !pm :+ ( pm :* ((1:-pscore):/pscore))
>   else _error(est + " is an invalid argument for gmatch::logitweights()")
> 
>   // normalize the weights to have mean 1 in each group
>   if (strlower(est)=="ate" | strlower(est)=="atet") ipwwgt[this.sel0] = ipwwgt[this.sel0] :/ mean(ipwwgt[this.sel0], this.W[this.sel0])
>   if (strlower(est)=="ate" | strlower(est)=="ateu") ipwwgt[this.sel1] = ipwwgt[this.sel1] :/ mean(ipwwgt[this.sel1], this.W[this.sel1])
>   return(ipwwgt)
> }

: 
: // Define function to calculate coefficients for a logit regression model
: // A contant term is added to the model and its coefficient is included in the vector of betas
: real rowvector gmatch::logitbeta(real colvector Ymat, real matrix Xmat, | real colvector Wmat, real scalar addconst)
> {
>   transmorphic S
>   if (args()<4) addconst=1
>   S=moptimize_init()
>   moptimize_init_evaluator(S, &logit_eval())
>   moptimize_init_evaluatortype(S,"lf")
>   moptimize_init_depvar(S,1,Ymat)
>   moptimize_init_eq_indepvars(S,1,Xmat)
>   if (!addconst) moptimize_init_eq_cons(S, 1, "off")
>   if (args()>=3 & any(Wmat:!=1)) moptimize_init_weight(S, Wmat)
>   moptimize_init_eq_colnames(S, 1, (J(1,cols(Xmat),"x") + strofreal((1..cols(Xmat)))))
>   moptimize_init_vcetype(S, "robust")
> 
>   moptimize(S)
>   // /* */ "Logit model coefficients and robust standard errors:"; moptimize_result_display(S)
>   return(moptimize_result_coefs(S))
> }

: 
: void logit_eval(transmorphic S, real rowvector beta, real colvector lnf)
> {
>   real colvector Y, pm, xb, lj
>   Y  = moptimize_util_depvar(S, 1)
>   xb = moptimize_util_xb(S, beta, 1)
>   pm = 2*(Y :!= 0) :- 1
>   lj = invlogit(pm:*xb)
>   if (any(lj :== 0)) {
>     lnf = .
>     return
>   }
>   lnf  = ln(lj)
> }

: 
: // function that returns CBPS weights
: //    est corresponds to the options in gmatch::logitweights()
: //        "ate"  computes weights for average treatment effect (the default)
: //        "atet" computes weights for average treatment effect on the treated
: //        "ateu" computes weights for average treatment effect on the untreated
: //    fctn corresponds to the balance measure
: //        "mean_sd_sq" minimizes the mean standardized difference squared
: //    denominator is passed to stddiff() and related functions
: //    oid=1 turns on the "over-identified" version of the CBPS model; oid=0 leaves it off
: //    cvopt adds the CV of the matching weights to the optimization objective function
: //         Let loss_0 be the ojbective function and CV be the coefficient of variabtion of the matching weights
: //         Provided a 1*3 rowvector, (a,b,c), then the loss function is modified as
: //         loss = loss_0 + b * abs((CV - a)^c)
: //         The default is a=0 (prefer no variation in weights)
: //                        b=0 (the loss function is unmodified)
: //                        c=2 (a quadratic)
: real colvector gmatch::cbps(| string scalar est, string scalar fctn, real scalar denominator, real scalar oid, real rowvector cvopt)
> {
>   real rowvector beta
>   real colvector pscore, cbpswgt
>   real matrix ww
>   class gmatch scalar M
>   if (args()<1) est="ate"
>   if (args()<2) fctn="sd_sq"
>   if (args()<3) denominator=1
>   if (args()<4) oid=0
>   if (args()<5) cvopt=(0,0,0)
> 
>   M.clone(this)
> 
>   transmorphic S
>   S=optimize_init()
>   optimize_init_evaluator(S, &cbps_eval())
>   optimize_init_which(S, "min")
>   optimize_init_argument(S, 1, M)
>   optimize_init_argument(S, 2, est)
>   optimize_init_argument(S, 3, fctn)
>   optimize_init_argument(S, 4, denominator)
>   optimize_init_argument(S, 5, oid)
>   optimize_init_argument(S, 6, cvopt)
>   optimize_init_singularHmethod(S,"hybrid")  // equivalent to ml's "difficult" option
>   optimize_init_technique(S, "bfgs 15 nr 15")
>   optimize_init_tracelevel(S, "value" )  // "none", "value", "params"
>   /* */ optimize_init_tracelevel(S, "none" )  // "none", "value", "params"
> 
> /* */   optimize_init_conv_ptol(S, 1e-7)
> /* */   optimize_init_conv_vtol(S, 1e-8)
> /* */   optimize_init_conv_nrtol(S, 1e-6)
> 
>   if (fctn=="sd_sq" | fctn=="asd") {
>     optimize_init_evaluatortype(S,"gf0")
>     optimize_init_conv_ignorenrtol(S, "on")
>   }
>   else if (fctn=="cbps_port_r") {
>     // normalize Xs to mean 0, sd 1
>     // this is inefficent. and X starts out as a view but then gets reassigned to a Mata matrix
>     // just make a xnorm variable and calc_norm_X function?
>     real matrix meansP_orig, sdP_orig, svd_s, svd_v, svd_s_inv
>     meansP_orig = mean(M.X, M.W)
>     sdP_orig = sqrt(this.diagvariance(M.X, M.W))
>     M.Xstd = (J(M.N_raw,1,1), (M.X :- meansP_orig) :/ sdP_orig )
>     _svd(M.Xstd, svd_s, svd_v)
>     optimize_init_conv_ptol(S,  1e-13)
>     optimize_init_conv_vtol(S,  1e-14)
>     optimize_init_conv_nrtol(S, 1e-12)
>     optimize_init_evaluatortype(S,"d0")
>     optimize_init_conv_ignorenrtol(S, "off")
>   }
>   else if (fctn=="cbps_port_stata") {
>     // optimize_init_evaluatortype(S,"d1")
>     optimize_init_conv_ptol(S, 1e-13)
>     optimize_init_conv_vtol(S, 1e-14)
>     optimize_init_conv_vtol(S, 1e-12)
>     if (oid)  optimize_init_evaluatortype(S,"gf1")  // for overidentified version
>     else      optimize_init_evaluatortype(S,"d1")   // d1 if I'm running plain vanilla. otherwise just use "do" (numerical gradient)
> /* */    optimize_init_tracelevel(S, "none" )  // "none", "value", "params"
> //  optimize_init_conv_ignorenrtol(S, "on")
>   }
>   else {
>     optimize_init_evaluatortype(S,"d0")
>     optimize_init_conv_ignorenrtol(S, "off")
>   }
> 
>   "Step 1 (initial values from logit model):"
>   real rowvector beta_logit
>   if (fctn=="cbps_port_r") beta_logit = M.logitbeta(M.T, M.Xstd, M.W, 0)
>   else                     beta_logit = M.logitbeta(M.T, M.X, M.W, 1)
>   optimize_init_params(S, beta_logit)
>   // /* */ "  optimize_init_params(S)";   optimize_init_params(S)
>   // /* */ "optimize_result_value0(S)"; optimize_result_value0(S)
> 
>   if (fctn=="cbps_port_stata") {
>     // is this just M.covariancesP ?
>     ww = M.cbps_port_stata_wgt_matrix(beta_logit, oid, est)
>     ww = invsym(ww)
>   }
>   else if (fctn=="cbps_port_r" & !oid) {
>     if (!oid) ww = invsym(quadcross(M.Xstd,M.W,M.Xstd))
>   }
>   else ww = .
>   optimize_init_argument(S, 7, ww)
>   ""
> 
> // /* */ real todo, lnf__, g__, H__
> // /* */ cbps_eval(todo=1,beta_logit, M, est, fctn, denominator, oid, ww, lnf__=., g__=., H__=.)
> // /* */  "todo"; todo
> // /* */  "beta_logit"; beta_logit
> // /* */  "est"; est
> // /* */  "fctn"; fctn
> // /* */  "denominator"; denominator
> // /* */  "oid, "; oid
> // /* */  "ww"; ww
> // /* */  "lnf__"; lnf__
> // /* */  "g__ "; g__
> // /* */  "H__"; H__
> 
>  // if (fctn=="cbps_port_r")  _error("X")
> 
>   "Step 2 (CBPS) :"
>   /* */ // This temp code keeps optimize() from producing an error
>   /* */ // Once it's working switch back to
>   /* */ // (void) optimize(S)
>   /* */ (void) _optimize(S)
>   /* */               if (optimize_result_returncode(S)!=0) {
>   /* */                       errprintf("{p}\n")
>   /* */                       errprintf("%s\n", optimize_result_errortext(S))
>   /* */                       errprintf("\nExiting the function early.\n")
>   /* */                       errprintf("{p_end}\n")
>   /* */                       "current beta"; optimize_result_params(S)
>   /* */                       // exit(optimize_result_returncode(S))
>   /* */                       return(J(M.N,1,.))
>   /* */               }
>   /* */ "optimize_result_iterations(S)"; optimize_result_iterations(S)
>   beta    = optimize_result_params(S)
> 
>   // undoing the normalization and SVD
>   if (fctn=="cbps_port_r")  {
>     M.Xstd = .
>     svd_s_inv = svd_s:^-1
>     svd_s_inv = svd_s_inv :* (svd_s :> 1e-5)
>     beta = (svd_v' * diag(svd_s_inv) * beta')'
>     beta[2::cols(beta)] = (beta[2::cols(beta)] :/ sdP_orig)
>     beta[1] = beta[1] :- meansP_orig * beta[2..cols(beta)]'
>     beta = (beta[2::cols(beta)] , beta[1]) // teh CBPS R code puts the contstant in the first column, but I want it in the last column (stata standard and to 
> work with logit predict)
>     /* */ "CBPS beta after undoing the normalization"; ((M.varlist,"_cons")', strofreal(beta)')
>   }
>   else {
>     /* */ "CBPS beta"; ( (M.varlist,"_cons")', strofreal(beta)')
>   }
> 
>   pscore  = M.logitpredict(M.X, beta)
>   pscore  = M.trim(pscore)
> 
>   cbpswgt = M.logitweights(pscore, est)
>   /* */ "Weights for first 10 observations:";  cbpswgt[1..10]'
>   /* */ "Weights for first 10 observations / N:"
>   /* */ real colvector cbpswgtsum1
>   /* */ cbpswgtsum1 = cbpswgt
>   /* */ cbpswgtsum1[M.sel0] = cbpswgtsum1[M.sel0] :/ quadsum(cbpswgtsum1[M.sel0] :* M.W[M.sel0])
>   /* */ cbpswgtsum1[M.sel1] = cbpswgtsum1[M.sel1] :/ quadsum(cbpswgtsum1[M.sel1] :* M.W[M.sel1])
>   /* */ cbpswgtsum1[1..10]'
> 
>   /* */ M.multweight(cbpswgt)
>   /* */ "Balance after CBPS (" + fctn + "):"
>   /* */ "optimize_result_value(S)" ; optimize_result_value(S)
>   /* */ "balance table after matching (" + fctn + "):"; real matrix temp; temp = M.balancetable(denominator)
>   /* */ "entropydistance of control weights (" + fctn + "):"; (M.entropydistance(cbpswgt[M.sel0], M.W_orig[M.sel0]))
>   /* */ "cv of control weights (" + fctn + "):"; (sqrt(M.diagvariance(cbpswgt[M.sel0], M.W_orig[M.sel0])) :/  mean(cbpswgt[M.sel0], M.W_orig[M.sel0]))
>   /* */ "M.mean_sd_sq(denominator)";  M.mean_sd_sq(denominator)
>   /* */ "M.mean_asd(denominator)"  ;  M.mean_asd(denominator)
>   /* */ "M.max_asd(denominator)"   ;  M.max_asd(denominator)
>   /* */ "M.sd_sq(denominator)"     ;  M.sd_sq(denominator)
>   /* */ "M.asd(denominator)"       ;  M.asd(denominator)
>   /* */ ""; ""; ""; ""; ""; ""; ""
> 
>   return(cbpswgt)
> }
note: variable svd_s may be used before set
note: variable svd_v may be used before set
note: variable temp set but not used

: 
: // helper function -- note this is not a member of the class
: void cbps_eval(real todo, real beta,
>                class gmatch scalar M,
>                string est, string fctn, real denominator, real oid, real cvopt, real ww,
>                real lnf, real g, real H)
> {
>   M.cbpseval(todo,beta,est,fctn,denominator,oid,cvopt,ww,lnf,g,H)
> }

: 
: 
: void gmatch::cbpseval( real   scalar    todo,
>                        real   rowvector beta,
>                        string scalar    est,
>                        string scalar    fctn,
>                        real   scalar    denominator,
>                        real   scalar    oid,
>                        real   rowvector cvopt,
>                        real   matrix    ww,
>                        real   matrix    lnf,
>                        real   matrix    g,
>                        real   matrix    H)
> {
>   real colvector  pscore, cbpswgt
>   if      (fctn=="cbps_port_stata")  this.cbps_port_stata(todo,beta,est,oid,ww,lnf,g,H)
>   else if (fctn=="cbps_port_r")      this.cbps_port_r(todo,beta,est,oid,ww,lnf,g,H)
>   else {
>     pscore = this.logitpredict(this.X, beta)
>     pscore = this.trim(pscore)
>     cbpswgt = this.logitweights(pscore, est)
>     this.multweight(cbpswgt)
>     if      (fctn=="mean_sd_sq")      lnf = this.mean_sd_sq(denominator)
>     else if (fctn=="mean_asd")        lnf = this.mean_asd(denominator)
>     else if (fctn=="max_asd")         lnf = this.max_asd(denominator)
>     else if (fctn=="sd_sq")           lnf = this.sd_sq(denominator)'
>     else if (fctn=="asd")             lnf = this.asd(denominator)'
>     else                              _error(fctn + " is invalid with gmatch::cbpseval()")
>   }
> 
>   if (cvopt[1]) {
>     // if cvopt=(a,b,c), then loss = loss_0 + b * abs((CV - a)^c)
>     real scalar thiscv
>     if      (strlower(est)=="ate" ) thiscv = sqrt(this.diagvariance(cbpswgt           , this.W_orig           )) :/  mean(cbpswgt           , this.W_orig     
>       )
>     else if (strlower(est)=="atet") thiscv = sqrt(this.diagvariance(cbpswgt[this.sel0], this.W_orig[this.sel0])) :/  mean(cbpswgt[this.sel0], this.W_orig[this
> .sel0])
>     else if (strlower(est)=="ateu") thiscv = sqrt(this.diagvariance(cbpswgt[this.sel1], this.W_orig[this.sel1])) :/  mean(cbpswgt[this.sel1], this.W_orig[this
> .sel1])
>     else     _error(est + " is invalid with cvopt for gmatch::cbpseval()")
>     lnf = lnf + cvopt[2]*abs((thiscv - cvopt[1])^cvopt[3])
>   }
> }

: 
: /* still need clean up all the remaining code -- it could be improved or sped up in various ways */
: 
: 
: // Port of the objective function from the Stata verion of CBPS
: void gmatch::cbps_port_stata( real   scalar    todo,
>                               real   rowvector beta,
>                               string scalar    est,
>                               real   scalar    oid,
>                               real   matrix    ww,
>                               real   matrix    lnf,
>                               real   matrix    g,
>                               real   matrix    H)
> {
>    real colvector  pscore
>    pscore = this.logitpredict(this.X, beta)
>    pscore = this.trim(pscore)
>    real matrix dpscore, gg, G
>    dpscore = pscore:*(1:-pscore)
>    gg = this.cbps_port_stata_moments(pscore, dpscore, oid, est)
>    lnf = gg' * ww * gg
>    if (todo==0) return
>    G = this.cbps_port_stata_gradient(pscore, oid, est)
>    g = G' * ww * gg :* (2:*this.N)
>    g = g'
> }
note: argument H unused

: 
: 
: // Port of the moment function from the Stata verion of CBPS
: real colvector gmatch::cbps_port_stata_moments(real colvector pscore, real matrix dpscore, real scalar overid, string scalar est)
> {
>   real colvector gg
>   if (any(this.W:!=1)) _error("gmatch::cbps_port_stata_moments() does not yet accomodate weighted samples")
> 
> // this is inefficient
>   if (strlower(est)=="ate") {
>       gg=quadcross(this.XC, (this.T-pscore):/pscore:/(1:-pscore)):/this.N_raw
>   }
>   else if (strlower(est)=="atet") {
>       gg=quadcross(this.XC, (this.T-pscore):/(1:-pscore)):/this.N1_raw
>   }
>   else _error(est + " is invalid with gmatch::cbps_port_stata_moments()")
> 
>   if(overid) {
>     gg = (quadcross(this.XC, dpscore:*(this.T-pscore):/pscore:/(1:-pscore)):/this.N_raw \ gg)
>   }
> 
>   gg = gg:/this.N_raw
> 
>   return(gg)
> }

: 
: 
: // Port of the gradient function from the Stata verion of CBPS
: real matrix gmatch::cbps_port_stata_gradient(real colvector pscore, real scalar overid, string scalar est)
> {
>   real matrix G, dw
>   if (strlower(est)=="ate") {
>     G = -(this.XC:*((this.T:-pscore):^2):/pscore:/(1:-pscore))'this.XC
>   }
>   else if (strlower(est)=="atet") {
>     dw=(pscore:*(this.T:-1)):/(1:-pscore):*(this.N_raw/this.N1_raw)
>     G = quadcross(this.XC:*dw, this.XC)
>   }
>   if (overid) {
>     G = ((-(this.XC:*(pscore:*(1:-pscore)))' this.XC) \ G)
>   }
>   G = G :/ this.N
>   return(G)
> }

: 
: 
: // Port of the weighting matrix function from the Stata verion of CBPS
: real matrix gmatch::cbps_port_stata_wgt_matrix(real rowvector beta, real scalar overid, string scalar est)
> {
>   real matrix ww
>   real colvector pscore, dpscore
>   pscore  = this.logitpredict(this.X, beta)
>   pscore  = this.trim(pscore)
>   dpscore = pscore:*(1:-pscore)
>   if (!overid) {
>     if (strlower(est)=="ate") {
>       ww = quadcross((this.XC:/(pscore:*(1:-pscore))), this.XC)
>     }
>     else if (strlower(est)=="atet") {
>       ww = quadcross((this.XC:*(pscore:/(1:-pscore)):*(this.N_raw/this.N1_raw):^2), this.XC)
>     }
>   }
>   else {
>     if (strlower(est)=="ate") {
>       ww = (      quadcross(this.XC:*(dpscore:^2:/pscore:/(1:-pscore)),this.XC), // this seems inefficint. isn't  pscore:/(1:-pscore) = dpscore:^-1 ?
>                   quadcross(this.XC:*(dpscore:/pscore:/(1:-pscore)),this.XC))
>       ww = ( ww \ quadcross(this.XC:*(dpscore:/pscore:/(1:-pscore)),this.XC),
>                   quadcross(this.XC:*(1:/pscore:/(1:-pscore)),this.XC))
>     }
>     else if (strlower(est)=="atet") {
>       ww = (      quadcross(this.XC:*(pscore:/(1:-pscore):*dpscore:^2:/pscore:^2),this.XC),
>                   quadcross(this.XC:*(pscore:/(1:-pscore):*dpscore:/pscore):*(this.N_raw/this.N1_raw),this.XC))
>       ww = ( ww \ quadcross(this.XC:*(pscore:/(1:-pscore):*dpscore:/pscore):*(this.N_raw/this.N1_raw),this.XC),
>                   quadcross(this.XC:*(pscore:/(1:-pscore)):*((this.N_raw/this.N1_raw)^2),this.XC) )
>     }
>   }
>   ww=ww:/this.N_raw
>   return(ww)
> }

: 
: 
: // Port of the gmm.func()  function from CBPS.Binary.R (version 0.17)
: void gmatch::cbps_port_r(real   scalar    todo,
>                          real   rowvector beta,
>                          string scalar    est,
>                          real   scalar    overid,
>                          real   matrix    ww,
>                          real   matrix    lnf,
>                          real   matrix    g,
>                          real   matrix    H)
> {
>   real colvector pscore, w_cbps
>   pscore = this.logitpredict(this.Xstd, beta)
>   pscore = this.trim(pscore)
>   if (strlower(est)=="atet") {
>      w_cbps = (this.N/this.N1) :* (this.T:-pscore) :/ (1:-pscore)
>   }
>   else if (strlower(est)=="ate") {
>      w_cbps = (pscore:-1:+this.T):^-1
>   }
>   if (!overid) {
>      w_cbps = 1/this.N :* w_cbps
>      lnf = abs(quadcross(w_cbps, this.W, this.Xstd) * ww * quadcross(this.Xstd, this.W, w_cbps))
>   }
>   else {
>     real colvector gbar, wx1, wx2, wx3
>     real matrix V
>     gbar = (quadcross(this.Xstd, this.W, this.T:-pscore) \ quadcross(this.Xstd, this.W, w_cbps)) :/ this.N
>     if (strlower(est)=="atet") {
>       wx1 = this.Xstd:*sqrt((1:-pscore):*pscore)
>       wx2 = this.Xstd:*sqrt(pscore:/(1:-pscore))
>       wx3 = this.Xstd:*sqrt(pscore)
>       V =  (quadcross(wx1, this.W, wx1), quadcross(wx3, this.W, wx3) \
>             quadcross(wx3, this.W, wx3), quadcross(wx2, this.W, wx2) :* (this.N:/this.N1_raw)) :/ this.N1_raw
>     }
>     else if (strlower(est)=="ate") {
>       wx1 = this.Xstd:*sqrt((1:-pscore):*pscore)
>       wx2 = this.Xstd:*((pscore:*(1:-pscore)):^-.5)
>       wx3 = this.Xstd
>       V = (quadcross(wx1, this.W, wx1), quadcross(wx3, this.W, wx3) \
>            quadcross(wx3, this.W, wx3), quadcross(wx2, this.W, wx2)) :/ this.N
>     }
>     else _error(est + " is not allowed.")
>     lnf = gbar' * invsym(V) * gbar
>   }
>   if (todo<1) return
>   else _error("gmatch::cbps_port_r() is not compatable with todo>=1")
> }
note: argument g unused
note: argument H unused

: 
: end
----------------------------------------------------------------------------------------------------------------------------------------------------------------

. 
. 
. version 15.1

. set type double

. di as txt "Current user: `c(username)'" _n "Environment: `c(os)' `c(machine_type)' `: environment computername'" _n "Stata: `c(stata_version)'" cond(c(stata_v
> ersion)==c(version),""," (set to version `c(version)')") _n "Date: " c(current_date) " " c(current_time)
Current user: KKranker
Environment: Windows PC (64-bit x86-64) KKRANKER
Stata: 15.1
Date: 12 Feb 2018 19:07:08

. 
. 
. ************************************************************************************
. * Describe/summarize the example datasets
. ************************************************************************************
. 
. *** Input data file (simple_cattaneo_data) comes from the program named Make_example_datasets.do (in C:\Users\kkranker\Documents\Stata\Multiple-Equation-Model
> s)
. 
. use "C:\Users\kkranker\Documents\Stata\Multiple-Equation-Models\simple_cattaneo_data.dta"
(Cattaneo (2010) study on the effect of maternal smoking on birth weight)

. desc, short

Contains data from C:\Users\kkranker\Documents\Stata\Multiple-Equation-Models\simple_cattaneo_data.dta
  obs:         4,642                          Cattaneo (2010) study on the effect of maternal smoking on birth weight
 vars:            11                          8 Apr 2015 05:07
 size:        55,704                          
Sorted by: 

. notes _dta

_dta:
  1.  Cattaneo (2010) study on the effect of maternal smoking on birth weight
  2.  Dataset created by Keith Kranker (program name: make_example_datasets.do)
  3.  Source: Cattaneo, M. D. 2010. "Efficient Semiparametric Estimation of Multi-Valued Treatment Effects under Ignorability." Journal of Econometrics, 155(2):
      138–154, doi:10.1016/j.jeconom.2009.09.023.
  4.  Source: Almond, D., Chay, K.Y., Lee, D.S., 2005. "The costs of low birth weight." Quarterly Journal of Economics, 120: 1031-1083.
  5.  Original dataset downloaded 4/3/2015 via Stata command ". webuse cattaneo2"
  6.  The variable names in the original datasets are replaced with "generic" names: (1) The outcome variables are named y1 y2 y3... (2) The treatment variable
      is named treat (binary) or treat_cat (categorical). (3) The control variables are named x1 x2 x3...

. summ, sep(0)

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
       treat |      4,642    .1861267    .3892508          0          1
   treat_cat |      4,642    .3996122    .8988632          0          3
          x1 |      4,642    .6996984    .4584385          0          1
          x2 |      4,642    .0340371    .1813439          0          1
          x3 |      4,642    .0534252    .2249042          0          1
          x4 |      4,642    .4379578    .4961893          0          1
          x5 |      4,642    26.50452    5.619026         13         45
          x6 |      4,642    12.68957    2.520661          0         17
          x7 |      4,642    6.540069    3.359167          1         12
          y1 |      4,642     3361.68    578.8196        340       5500
   y1_binary |      4,642    .9396812    .2381022          0          1

. tab treat treat_cat, mi

           |                  treat_cat
     treat | Untreated  1st Treat  2nd Treat  3rd Treat |     Total
-----------+--------------------------------------------+----------
 Untreated |     3,778          0          0          0 |     3,778 
   Treated |         0        200        337        327 |       864 
-----------+--------------------------------------------+----------
     Total |     3,778        200        337        327 |     4,642 


. corr treat y1 y1_binary
(obs=4,642)

             |    treat       y1 y1_bin~y
-------------+---------------------------
       treat |   1.0000
          y1 |  -0.1851   1.0000
   y1_binary |  -0.0997   0.5924   1.0000


. 
. local if if _n<=500

. set seed 1

. gen wgt = max(.1,rnormal(2,.4))

. gen fwgt = round(rnormal(2,.4))

. // forvalues i = 20/200 {
. forvalues i = 90/95 {
  2.   gen x`i' = rnormal()
  3. }

. // expand 5e4 if touse
. // expand 1e5 if touse
. 
. // // give the sample poor overlap
. // tab2    treat x1
. // replace x1 = 1 if  treat & runiform()<.85
. // replace x1 = 0 if !treat & runiform()<.85
. // tab2    treat x1
. 
. 
. local depvars = "y1 y1_binary"

. local treatvar = "treat"

. local varlist = "x1 i.x2 i.x3 x4 x5 x6 x7 x9*"

. // local varlist = "x*"
. // local varlist = "x1 ib0.x2"
. //local wgtvar = "wgt"
. local wgtvar = "wgt"

. local tousevar = "touse"

. local estimate = "atet"

. 
. 
. // some automatic parsing based on options above
. if "`wgtvar'"!="" local wgtexp "[iw=`wgtvar']"

. mark    `tousevar' `if' `in' `wgtexp'

. markout `tousevar' `depvars' `treatvar' `varlist'

. _rmdcoll `treatvar' `varlist' if `tousevar' `wgtexp', expand

. // _rmcoll `treatvar' `varlist' if `tousevar' `wgtexp', expand logit touse(`tousevar')
. // fvexpand `varlist' if `tousevar'
. local varlist `r(varlist)'

. forvalues j=1/`: list sizeof varlist' {
  2.   local v : word `j' of `varlist'
  3.   _ms_parse_parts `v'
  4.   if !r(omit) local varlist1 `"`varlist1' `v'"'
  5. }

. local varlist : copy local varlist1

. 
. fvrevar `varlist'

. export delimited `treatvar' `r(varlist)' `wgtvar' using testfile.csv if `tousevar', replace nolabel
file testfile.csv saved

. 
. tempvar constvar

. gen byte `constvar' = 1 if `tousevar'
(4,142 missing values generated)

. 
. mata:
------------------------------------------------- mata (type end to exit) --------------------------------------------------------------------------------------
: 
: depvars  = st_local("depvars" )

: treatvar = st_local("treatvar")

: wgtvar   = st_local("wgtvar"  )

: varlist  = st_local("varlist" )

: constvar = st_local("constvar")

: tousevar = st_local("tousevar")

: estimate = st_local("estimate")

: 
: 
: // ****************************
: // * UNWEIGHTED DATA EXAMPLES *
: // ****************************
: 
: D = gmatch()

: D.set( st_local("treatvar"),st_local("varlist"), st_local("constvar"), st_local("tousevar"))
  X contains
          1      2      3      4      5      6      7      8      9     10     11     12     13
    +--------------------------------------------------------------------------------------------+
  1 |    x1   1.x2   1.x3     x4     x5     x6     x7    x90    x91    x92    x93    x94    x95  |
    +--------------------------------------------------------------------------------------------+
  X is 500 by 13
  Data are unweighted.
  408 control obs (sum of weights = 408)
  92 treatment obs (sum of weights = 92)

: 
: if (depvars!="") D.set_Y(st_local("depvars"),st_local("tousevar"))
> 
> M = gmatch()

: M.clone(D)

: 
: // Misc balance measures
:   D.diff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.2826086957   -.0160912191   -.0223785166   -.0603154305   -1.101236147   -1.289748508    .1626172208    .1457104569   -.0812723301    .0681588142
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0461833248   -.1459731942   -.0148968728  |
     ----------------------------------------------+

:   D.stddiff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.563336463   -.1543415516   -.1526193687   -.1210072453    -.202287272   -.8035533326    .0457213254    .1527707004     -.08618905    .0648405717
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0493954389   -.1578414414    -.016298459  |
     ----------------------------------------------+

:   D.mean_asd()
  .1977078631

:   D.stddiff(1)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.563336463   -.1543415516   -.1526193687   -.1210072453    -.202287272   -.8035533326    .0457213254    .1527707004     -.08618905    .0648405717
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0493954389   -.1578414414    -.016298459  |
     ----------------------------------------------+

:   D.stddiff(0)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.6518565108   -.0992258067   -.1088403741    -.120488729   -.1874830308   -.5658268397    .0492441608    .1472428581   -.0808153611    .0677010963
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0466680215   -.1471098503   -.0148355423  |
     ----------------------------------------------+

:   D.varratio()
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  1.338962118   .4133172708   .5085817193   .9914483579   .8589874442   .4958355659   1.160037045   .9289414423   .8791918375   1.090178798
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .8926168505   .8686432131   .8285405428  |
     -------------------------------------------+

:   D.prognosticdiff()
                       1                   2                   3                   4
    +---------------------------------------------------------------------------------+
  1 |     Dependent var.   mean of y_hat (T)   mean of y_hat (C)    prognosticdiff()  |
  2 |                 y1            3444.538            3460.475           -15.93746  |
  3 |          y1_binary            .9482656            .9607843           -.0125187  |
    +---------------------------------------------------------------------------------+
                  1              2
    +-------------------------------+
  1 |  -15.93745522   -.0125187159  |
    +-------------------------------+

: 
:   "Balance table before matching"
  Balance table before matching

:   table = D.balancetable(1)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913          .75    -.2826087    -.5633365     .5016695     1.338962  |
   3 |        1.x2     .0108696     .0269608    -.0160912    -.1543416     .1042572     .4133173  |
   4 |        1.x3     .0217391     .0441176    -.0223785    -.1526194     .1466296     .5085817  |
   5 |          x4     .4347826      .495098    -.0603154    -.1210072     .4984448     .9914484  |
   6 |          x5     25.46739     26.56863    -1.101236    -.2022873     5.443922     .8589874  |
   7 |          x6     11.86957     13.15931    -1.289749    -.8035533     1.605057     .4958356  |
   8 |          x7     6.858696     6.696078     .1626172     .0457213     3.556704     1.160037  |
   9 |         x90     .0972024     -.048508     .1457105     .1527707     .9537854     .9289414  |
  10 |         x91    -.0890157    -.0077434    -.0812723    -.0861891     .9429542     .8791918  |
  11 |         x92     .0453787    -.0227801     .0681588     .0648406     1.051175     1.090179  |
  12 |         x93     .0865687     .0403853     .0461833     .0493954     .9349714     .8926169  |
  13 |         x94    -.1299173     .0160559    -.1459732    -.1578414     .9248091     .8686432  |
  14 |         x95    -.0807251    -.0658282    -.0148969    -.0162985      .914005     .8285405  |
     +--------------------------------------------------------------------------------------------+

: 
: // Replicate CBPS
: 
:   "--- ATE (not overidentified) ---"; ""; ""
  --- ATE (not overidentified) ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , ate      logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .00647386  
Iteration 1:   f(p) =  .00451406  
Iteration 2:   f(p) =   .0005336  
Iteration 3:   f(p) =  .00001373  
Iteration 4:   f(p) =  2.637e-08  
Iteration 5:   f(p) =  6.777e-13  
Iteration 6:   f(p) =  1.066e-21  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.441064   .5046768    -2.86   0.004    -2.430213   -.4519161
        1.x2 |  -2.548784   3.501511    -0.73   0.467     -9.41162    4.314051
        1.x3 |   -1.02318   2.005094    -0.51   0.610    -4.953091    2.906732
          x4 |  -.2320966   .5678014    -0.41   0.683    -1.344967    .8807737
          x5 |   .0736983    .042799     1.72   0.085    -.0101862    .1575829
          x6 |  -.4863391   .1923869    -2.53   0.011    -.8634106   -.1092676
          x7 |   .0655415   .0720901     0.91   0.363    -.0757525    .2068354
         x90 |   .0303861    .203675     0.15   0.881    -.3688096    .4295819
         x91 |  -.0236437   .2499136    -0.09   0.925    -.5134655     .466178
         x92 |   .2014652   .2092517     0.96   0.336    -.2086606    .6115911
         x93 |  -.0067202   .2511949    -0.03   0.979    -.4990531    .4856126
         x94 |  -.3662317   .2431817    -1.51   0.132     -.842859    .1103956
         x95 |  -.0080118   .2531324    -0.03   0.975    -.5041423    .4881187
       _cons |   3.127763   1.826429     1.71   0.087    -.4519713    6.707497
------------------------------------------------------------------------------

:     stata(`"cbps_imbalance"')
Total average covariate imbalance: 1.5e-10
Average covariate imbalance on the treated: 1.26

:     cbpsweight = M.cbps("ate" , "cbps_port_stata", 2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  20
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.441066  |
   2 |       1.x2   -2.548778  |
   3 |       1.x3   -1.023178  |
   4 |         x4   -.2320968  |
   5 |         x5    .0736984  |
   6 |         x6   -.4863408  |
   7 |         x7    .0655416  |
   8 |        x90    .0303848  |
   9 |        x91   -.0236433  |
  10 |        x92    .2014656  |
  11 |        x93   -.0067208  |
  12 |        x94   -.3662318  |
  13 |        x95   -.0080117  |
  14 |      _cons    3.127781  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8332313012   1.191470116   .8715387333   .8209655442    .811182064   1.111548508   .9373898195   .9257240412   .8689538082   .8292176999  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0020422336   .0029202699   .0021361243   .0020121705   .0019881913   .0027243836   .0022975241   .0022689315   .0021297887   .0020323963  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  3.50002e-18
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1       .675047      .6750466      4.14e-07      8.83e-07      .4688265       1.00851  |
   3 |         1.x2      .0219356      .0219357     -1.28e-07     -8.73e-07      .1466202      1.008505  |
   4 |         1.x3      .0370066      .0370067     -4.38e-08     -2.32e-07      .1889672       1.00851  |
   5 |           x4      .4861038      .4861037      1.12e-07      2.24e-07      .5003074      1.008511  |
   6 |           x5      26.25387      26.25386      6.87e-06      1.10e-06      6.268996      .6747763  |
   7 |           x6      12.63472      12.63471      6.02e-06      2.57e-06      2.343238      .5637229  |
   8 |           x7      6.724953      6.724952      1.44e-06      4.28e-07      3.360602      1.190087  |
   9 |          x90     -.0592248     -.0592251      2.60e-07      2.49e-07      1.042786      1.206644  |
  10 |          x91      .0116979      .0116975      4.20e-07      4.28e-07      .9810721      .9436964  |
  11 |          x92     -.0041247     -.0041244     -2.38e-07     -2.34e-07      1.020036      1.339888  |
  12 |          x93      .0443809      .0443809      5.05e-08      5.21e-08      .9681889      .8469638  |
  13 |          x94      -.085669     -.0856691      9.72e-08      9.56e-08      1.015864      .7767336  |
  14 |          x95     -.0859156     -.0859154     -1.50e-07     -1.53e-07      .9766877      .8347644  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2477.545527
  cv of control weights (cbps_port_stata):
  .4390422057
  M.mean_sd_sq(denominator)
  1.21574e-13
  M.mean_asd(denominator)
  5.78155e-07
  M.max_asd(denominator)
  2.56913e-06
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  7.79875e-13   7.61634e-13   5.38337e-14   4.99903e-14   1.20169e-12   6.60042e-12   1.83151e-13   6.20158e-14   1.82851e-13   5.46603e-14
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.71537e-15   9.14864e-15   2.34353e-14  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  8.83105e-07   8.72716e-07   2.32021e-07   2.23585e-07   1.09622e-06   2.56913e-06   4.27961e-07   2.49030e-07   4.27610e-07   2.33796e-07
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    5.21092e-08   9.56485e-08   1.53086e-07  |
     -------------------------------------------+
  
  
  
  
  
  
  

:     cbpsweight = M.cbps("ate" , "cbps_port_r",  2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -222.50836  
Iteration 2:   f(p) = -211.20652  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  29
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.441064  |
   2 |       1.x2   -2.548784  |
   3 |       1.x3    -1.02318  |
   4 |         x4   -.2320966  |
   5 |         x5    .0736983  |
   6 |         x6   -.4863391  |
   7 |         x7    .0655415  |
   8 |        x90    .0303861  |
   9 |        x91   -.0236437  |
  10 |        x92    .2014652  |
  11 |        x93   -.0067202  |
  12 |        x94   -.3662317  |
  13 |        x95   -.0080118  |
  14 |      _cons    3.127763  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8332317493   1.191468342   .8715385148   .8209658953   .8111823384   1.111550234   .9373899688   .9257247705   .8689542908   .8292183129  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0020422347   .0029202655   .0021361238   .0020121713    .001988192   .0027243878   .0022975244   .0022689333   .0021297899   .0020323978  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  2.21979e-26
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6750468      .6750468      2.41e-13      5.15e-13      .4688264      1.008511  |
   3 |         1.x2      .0219357      .0219357     -1.61e-14     -1.09e-13      .1466203      1.008511  |
   4 |         1.x3      .0370067      .0370067     -7.61e-15     -4.03e-14      .1889672      1.008511  |
   5 |           x4      .4861037      .4861037     -2.90e-13     -5.80e-13      .5003074      1.008511  |
   6 |           x5      26.25386      26.25386      1.13e-12      1.80e-13      6.268993      .6747771  |
   7 |           x6      12.63471      12.63471      2.55e-12      1.09e-12      2.343236      .5637225  |
   8 |           x7      6.724952      6.724952     -4.35e-12     -1.29e-12      3.360602      1.190087  |
   9 |          x90     -.0592246     -.0592246     -3.30e-13     -3.17e-13      1.042785      1.206644  |
  10 |          x91      .0116973      .0116973      2.65e-13      2.70e-13      .9810721      .9436962  |
  11 |          x92     -.0041245     -.0041245     -8.56e-13     -8.39e-13      1.020036      1.339887  |
  12 |          x93      .0443809      .0443809      1.62e-12      1.68e-12      .9681889      .8469644  |
  13 |          x94     -.0856689     -.0856689      1.11e-12      1.09e-12      1.015864      .7767335  |
  14 |          x95     -.0859154     -.0859154     -8.20e-14     -8.40e-14      .9766877      .8347645  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2477.54534
  cv of control weights (cbps_port_r):
  .4390400158
  M.mean_sd_sq(denominator)
  1.44328e-26
  M.mean_asd(denominator)
  6.22228e-13
  M.max_asd(denominator)
  1.67674e-12
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  2.65286e-25   1.19876e-26   1.62263e-27   3.35836e-25   3.22733e-26   1.18670e-24   1.67641e-24   1.00257e-25   7.28032e-26   7.03771e-25
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.81146e-24   1.19846e-24   7.05664e-27  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  5.15059e-13   1.09488e-13   4.02819e-14   5.79513e-13   1.79648e-13   1.08936e-12   1.29476e-12   3.16633e-13   2.69821e-13   8.38910e-13
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    1.67674e-12   1.09474e-12   8.40038e-14  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATE overidentified ---"; ""; ""
  --- ATE overidentified ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , ate over logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .02441999  (not concave)
Iteration 1:   f(p) =    .020112  
Iteration 2:   f(p) =  .01484746  
Iteration 3:   f(p) =   .0142955  
Iteration 4:   f(p) =  .01428412  
Iteration 5:   f(p) =  .01428407  
Iteration 6:   f(p) =  .01428407  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.074574   .2572873    -4.18   0.000    -1.578848      -.5703
        1.x2 |  -1.732571    .847337    -2.04   0.041    -3.393321   -.0718214
        1.x3 |   -.535995   .6259896    -0.86   0.392    -1.762912    .6909221
          x4 |  -.2389831   .2458124    -0.97   0.331    -.7207666    .2428004
          x5 |   .0484453   .0243181     1.99   0.046     .0007828    .0961078
          x6 |  -.2519975   .0459113    -5.49   0.000    -.3419819    -.162013
          x7 |   .0081703   .0322545     0.25   0.800    -.0550474    .0713879
         x90 |    .120204   .1075227     1.12   0.264    -.0905366    .3309445
         x91 |  -.1467757   .1099013    -1.34   0.182    -.3621782    .0686269
         x92 |   .1315867   .1151671     1.14   0.253    -.0941367    .3573101
         x93 |    .086207   .1113523     0.77   0.439    -.1320395    .3044534
         x94 |  -.1702521    .103099    -1.65   0.099    -.3723225    .0318183
         x95 |   .0217906    .112224     0.19   0.846    -.1981643    .2417456
       _cons |   1.206345   .6074599     1.99   0.047      .015746    2.396945
------------------------------------------------------------------------------
J test for overidentifying restrictions: P(chisq>7.142, 14) = 0.929

:     stata(`"cbps_imbalance"')
Total average covariate imbalance: .313
Average covariate imbalance on the treated: .168

:     cbpsweight = M.cbps("ate" , "cbps_port_stata", 2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  18
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.074574  |
   2 |       1.x2   -1.732568  |
   3 |       1.x3   -.5359952  |
   4 |         x4   -.2389831  |
   5 |         x5    .0484453  |
   6 |         x6   -.2519974  |
   7 |         x7    .0081703  |
   8 |        x90     .120204  |
   9 |        x91   -.1467757  |
  10 |        x92    .1315867  |
  11 |        x93     .086207  |
  12 |        x94   -.1702521  |
  13 |        x95    .0217906  |
  14 |      _cons    1.206345  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |   .896255542   1.240479049   .9414631931   .9138972221   .8796403659    1.30362845   .9666844627   .9979371261   .9421588396   .9376376924  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0021967048   .0030403898   .0023075078   .0022399442   .0021559813   .0031951678   .0023693247   .0024459243   .0023092128   .0022981316  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  5.71363e-08
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6406563      .7027893      -.062133     -.1343717      .4623961      1.111543  |
   3 |         1.x2        .01577      .0233767     -.0076067     -.0518325      .1467555       .685644  |
   4 |         1.x3       .024807      .0398362     -.0150292     -.0794674      .1891246      .6378545  |
   5 |           x4      .4886894      .4862356      .0024538      .0049044      .5003233      1.008759  |
   6 |           x5      25.82556      26.34781     -.5222461     -.0874989      5.968599      .7599901  |
   7 |           x6      12.33004       12.9064     -.5763641     -.2576164      2.237296      .5881093  |
   8 |           x7       6.88452      6.669732      .2147882      .0639214      3.360189      1.180429  |
   9 |          x90     -.0713184     -.0265029     -.0448155     -.0441806      1.014371      1.157748  |
  10 |          x91       .020009     -.0226109      .0426199       .043028      .9905145      .9174008  |
  11 |          x92       .004022     -.0083767      .0123987       .012151      1.020391      1.200576  |
  12 |          x93      .0229491       .055179       -.03223     -.0331899      .9710769      .8891008  |
  13 |          x94     -.1215949     -.0231316     -.0984633     -.0994521       .990058      .8143466  |
  14 |          x95     -.0950136      -.071595     -.0234186     -.0239408      .9781897      .8041468  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2458.47447
  cv of control weights (cbps_port_stata):
  .1799934893
  M.mean_sd_sq(denominator)
  .0027971531
  M.mean_asd(denominator)
  .0719657954
  M.max_asd(denominator)
  .2576163915
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0180557609   .0026866127   .0063150718   .0000240535    .007656065   .0663662052    .004085951   .0019519281   .0018514131   .0001476461
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0011015717   .0098907103   .0005731618  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .1343717266   .0518325452   .0794674259   .0049044325    .087498943   .2576163915   .0639214439   .0441806306   .0430280496   .0121509718
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1     .033189933   .0994520501   .0239407969  |
     -------------------------------------------+
  
  
  
  
  
  
  

:     // not working yet?
:     cbpsweight = M.cbps("ate" , "cbps_port_r",  2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -222.50836  
Iteration 2:   f(p) = -211.20652  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  19
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.182342  |
   2 |       1.x2   -1.588249  |
   3 |       1.x3   -.9035039  |
   4 |         x4   -.2368406  |
   5 |         x5    .0566005  |
   6 |         x6   -.2466604  |
   7 |         x7    .0037862  |
   8 |        x90    .0994399  |
   9 |        x91   -.2107807  |
  10 |        x92    .1732639  |
  11 |        x93    .0969337  |
  12 |        x94   -.1436814  |
  13 |        x95    .0487429  |
  14 |      _cons    1.029134  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8904297023   1.138630232   .8876837537   .9065748622    .875524958   1.325111962   .9755122874   .9895517793   .9366631788   .9439687775  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0021824257   .0027907604   .0021756955   .0022219972   .0021458945   .0032478234   .0023909615    .002425372   .0022957431    .002313649  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  .0185459093
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6496685      .7018227     -.0521542     -.1128795      .4620346      1.096856  |
   3 |         1.x2       .013324      .0233971      -.010073       -.06931      .1453332      .5802445  |
   4 |         1.x3      .0322349      .0387282     -.0064933     -.0341296      .1902553      .8450902  |
   5 |           x4      .4879801      .4841874      .0037927      .0075813       .500272      1.008937  |
   6 |           x5      25.71747      26.39137     -.6739026     -.1128852      5.969807      .7669158  |
   7 |           x6      12.30179      12.91546     -.6136639      -.274644      2.234397      .5887665  |
   8 |           x7       6.85105      6.661336      .1897136      .0562761      3.371122      1.220209  |
   9 |          x90     -.0481103     -.0322004     -.0159099     -.0157417       1.01069      1.138518  |
  10 |          x91      .0595535     -.0329977      .0925512      .0931908      .9931363      .9387297  |
  11 |          x92     -.0507269     -.0005682     -.0501587     -.0491064      1.021431      1.200291  |
  12 |          x93      .0189915      .0570113     -.0380198     -.0391634      .9708004      .8811147  |
  13 |          x94     -.1391836     -.0192912     -.1198924     -.1210503      .9904344      .8106274  |
  14 |          x95     -.1008206     -.0663213     -.0344993     -.0353129      .9769602      .8095157  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2458.896132
  cv of control weights (cbps_port_r):
  .1870059282
  M.mean_sd_sq(denominator)
  .002959148
  M.mean_asd(denominator)
  .0785593186
  M.max_asd(denominator)
  .2746440233
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |   .012741782   .0048038801   .0011648272   .0000574764   .0127430585   .0754293395   .0031669995   .0002477998   .0086845292   .0024114352
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0015337695     .01465318    .001247002  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .1128795022   .0693100287    .034129565   .0075813166   .1128851561   .2746440233   .0562761009   .0157416579   .0931908212   .0491063658
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0391633688     .12105032   .0353129151  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET (not overidentified) ---"; ""; ""
  --- ATET (not overidentified) ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , att      logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .00197031  
Iteration 1:   f(p) =  .00006892  
Iteration 2:   f(p) =  1.777e-07  
Iteration 3:   f(p) =  2.570e-12  
Iteration 4:   f(p) =  6.940e-22  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.339291   .3615444    -3.70   0.000    -2.047905   -.6306769
        1.x2 |  -1.525175    1.19071    -1.28   0.200    -3.858923    .8085728
        1.x3 |  -.5996277   .8424377    -0.71   0.477    -2.250775     1.05152
          x4 |  -.3183658   .3103113    -1.03   0.305    -.9265647    .2898331
          x5 |   .0587883     .02835     2.07   0.038     .0032234    .1143533
          x6 |  -.2435676   .0675718    -3.60   0.000    -.3760059   -.1111292
          x7 |   .0341034   .0400884     0.85   0.395    -.0444685    .1126752
         x90 |    .158599   .1286436     1.23   0.218    -.0935378    .4107357
         x91 |  -.1617619    .131618    -1.23   0.219    -.4197284    .0962045
         x92 |   .1391156   .1358437     1.02   0.306    -.1271333    .4053644
         x93 |   .0571151    .134574     0.42   0.671    -.2066451    .3208752
         x94 |  -.1175052   .1193236    -0.98   0.325    -.3513752    .1163649
         x95 |    .011505   .1383574     0.08   0.934    -.2596705    .2826805
       _cons |    .782858    .962964     0.81   0.416    -1.104517    2.670233
------------------------------------------------------------------------------

:     stata(`"cbps_imbalance"')
Total average covariate imbalance: .374
Average covariate imbalance on the treated: 1.1e-10

:     cbpsweight = M.cbps("atet", "cbps_port_stata", 2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  19
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.339291  |
   2 |       1.x2   -1.525175  |
   3 |       1.x3   -.5996277  |
   4 |         x4   -.3183658  |
   5 |         x5    .0587883  |
   6 |         x6   -.2435676  |
   7 |         x7    .0341034  |
   8 |        x90     .158599  |
   9 |        x91   -.1617619  |
  10 |        x92    .1391156  |
  11 |        x93    .0571151  |
  12 |        x94   -.1175052  |
  13 |        x95     .011505  |
  14 |      _cons     .782858  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4811079447   2.261606556   .4991638887   .4882359839   .2759896013   2.553265916   .8609777426   .7930262464   .5798857013   .6841964024  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011791861   .0055431533   .0012234409   .0011966568   .0006764451   .0062580047   .0021102396   .0019436918   .0014212885    .001676952  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  2.65792e-27
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4673913      .4673913      7.68e-12      1.54e-11      .4994352      1.008511  |
   3 |         1.x2      .0108696      .0108696     -5.81e-12     -5.60e-11      .1037929      1.008511  |
   4 |         1.x3      .0217391      .0217391     -2.76e-12     -1.89e-11      .1459766      1.008511  |
   5 |           x4      .4347826      .4347826     -2.22e-12     -4.47e-12      .4962249      1.008511  |
   6 |           x5      25.46739      25.46739      4.08e-11      6.13e-12      6.664728      .6195799  |
   7 |           x6      11.86957      11.86957     -1.24e-13     -6.08e-14      2.043536      .5669465  |
   8 |           x7      6.858696      6.858696      7.27e-12      2.16e-12      3.363971      1.145237  |
   9 |          x90      .0972024      .0972024     -9.13e-12     -8.94e-12      1.021603       .845302  |
  10 |          x91     -.0890157     -.0890157     -3.00e-12     -3.14e-12      .9556678      .9654928  |
  11 |          x92      .0453787      .0453787     -1.01e-11     -1.01e-11      .9971707      1.136731  |
  12 |          x93      .0865687      .0865687     -2.33e-12     -2.45e-12        .95074      .9577067  |
  13 |          x94     -.1299173     -.1299173      2.22e-12      2.16e-12       1.02511      .7795321  |
  14 |          x95     -.0807251     -.0807251      7.90e-12      8.24e-12      .9586344      .8888006  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2605.10307
  cv of control weights (cbps_port_stata):
  .9884371301
  M.mean_sd_sq(denominator)
  2.89494e-23
  M.mean_asd(denominator)
  1.06227e-11
  M.max_asd(denominator)
  5.59573e-11
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  2.36602e-22   3.13121e-21   3.57371e-22   2.00127e-23   3.75664e-23   3.70247e-27   4.67132e-24   7.98673e-23   9.82824e-24   1.02077e-22
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    6.00073e-24   4.68020e-24   6.78812e-23  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  1.53819e-11   5.59573e-11   1.89043e-11   4.47356e-12   6.12915e-12   6.08479e-14   2.16132e-12   8.93685e-12   3.13500e-12   1.01033e-11
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.44964e-12   2.16338e-12   8.23901e-12  |
     -------------------------------------------+
  
  
  
  
  
  
  

:     cbpsweight = M.cbps("atet", "cbps_port_r",  2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -222.50836  
Iteration 2:   f(p) = -211.20652  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  22
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.339291  |
   2 |       1.x2   -1.525175  |
   3 |       1.x3   -.5996277  |
   4 |         x4   -.3183658  |
   5 |         x5    .0587883  |
   6 |         x6   -.2435676  |
   7 |         x7    .0341034  |
   8 |        x90     .158599  |
   9 |        x91   -.1617619  |
  10 |        x92    .1391156  |
  11 |        x93    .0571151  |
  12 |        x94   -.1175052  |
  13 |        x95     .011505  |
  14 |      _cons     .782858  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4811079447   2.261606556   .4991638887   .4882359839   .2759896013   2.553265916   .8609777426   .7930262464   .5798857013   .6841964024  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011791861   .0055431533   .0012234409   .0011966568   .0006764451   .0062580047   .0021102396   .0019436918   .0014212885    .001676952  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  1.43536e-25
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4673913      .4673913     -2.39e-12     -4.79e-12      .4994352      1.008511  |
   3 |         1.x2      .0108696      .0108696     -6.44e-13     -6.20e-12      .1037929      1.008511  |
   4 |         1.x3      .0217391      .0217391     -6.70e-13     -4.59e-12      .1459766      1.008511  |
   5 |           x4      .4347826      .4347826      3.61e-15      7.27e-15      .4962249      1.008511  |
   6 |           x5      25.46739      25.46739     -1.51e-11     -2.26e-12      6.664728      .6195799  |
   7 |           x6      11.86957      11.86957     -1.26e-11     -6.16e-12      2.043536      .5669465  |
   8 |           x7      6.858696      6.858696      1.42e-12      4.22e-13      3.363971      1.145237  |
   9 |          x90      .0972024      .0972024      9.66e-13      9.45e-13      1.021603       .845302  |
  10 |          x91     -.0890157     -.0890157     -1.03e-12     -1.07e-12      .9556678      .9654928  |
  11 |          x92      .0453787      .0453787     -4.24e-13     -4.25e-13      .9971707      1.136731  |
  12 |          x93      .0865687      .0865687      1.54e-13      1.62e-13        .95074      .9577067  |
  13 |          x94     -.1299173     -.1299173     -1.19e-12     -1.16e-12       1.02511      .7795321  |
  14 |          x95     -.0807251     -.0807251     -2.65e-13     -2.76e-13      .9586344      .8888006  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2605.10307
  cv of control weights (cbps_port_r):
  .9884371301
  M.mean_sd_sq(denominator)
  3.81545e-24
  M.mean_asd(denominator)
  2.18973e-12
  M.max_asd(denominator)
  6.20236e-12
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  2.29071e-23   3.84693e-23   2.10631e-23   5.28725e-29   5.10602e-24   3.79401e-23   1.78458e-25   8.93603e-25   1.15185e-24   1.81023e-25
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.61434e-26   1.34053e-24   7.62622e-26  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  4.78614e-12   6.20236e-12   4.58946e-12   7.27135e-15   2.25965e-12   6.15955e-12   4.22443e-13   9.45306e-13   1.07325e-12   4.25469e-13
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    1.61689e-13   1.15781e-12   2.76156e-13  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET overidentified ---"; ""; ""
  --- ATET overidentified ---
  
  

:     stata(`"cbps `treatvar' `varlist' if `tousevar' , att over logit optimization_technique("nr") evaluator_type("gf1")"')
Iteration 0:   f(p) =  .04521356  
Iteration 1:   f(p) =  .03210384  
Iteration 2:   f(p) =   .0303286  
Iteration 3:   f(p) =   .0302734  
Iteration 4:   f(p) =  .03027339  
Iteration 5:   f(p) =  .03027339  
------------------------------------------------------------------------------
       treat |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
treat        |
          x1 |  -1.171988   .2187737    -5.36   0.000    -1.600776   -.7431991
        1.x2 |  -1.909814   .6607307    -2.89   0.004    -3.204822   -.6148052
        1.x3 |  -.4402667   .7269474    -0.61   0.545    -1.865057     .984524
          x4 |  -.3130788   .2251092    -1.39   0.164    -.7542848    .1281272
          x5 |   .0503881   .0191417     2.63   0.008     .0128711    .0879051
          x6 |  -.2393185   .0575186    -4.16   0.000     -.352053   -.1265841
          x7 |   .0261168   .0311563     0.84   0.402    -.0349484    .0871821
         x90 |   .1425533   .1007579     1.41   0.157    -.0549285    .3400351
         x91 |  -.1282785   .1127153    -1.14   0.255    -.3491964    .0926393
         x92 |      .1073   .1112316     0.96   0.335    -.1107099    .3253099
         x93 |   .0527165   .1101053     0.48   0.632    -.1630859    .2685189
         x94 |  -.1248021   .0971592    -1.28   0.199    -.3152305    .0656263
         x95 |   .0220743   .1115296     0.20   0.843    -.1965196    .2406683
       _cons |   .9132207   .6048419     1.51   0.131    -.2722476    2.098689
------------------------------------------------------------------------------
J test for overidentifying restrictions: P(chisq>15.137, 14) = 0.369

:     stata(`"cbps_imbalance"')
Total average covariate imbalance:  .34
Average covariate imbalance on the treated: .073

:     cbpsweight = M.cbps("atet", "cbps_port_stata", 2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  19
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.171988  |
   2 |       1.x2   -1.909811  |
   3 |       1.x3   -.4402666  |
   4 |         x4   -.3130788  |
   5 |         x5    .0503881  |
   6 |         x6   -.2393185  |
   7 |         x7    .0261168  |
   8 |        x90    .1425533  |
   9 |        x91   -.1282785  |
  10 |        x92    .1072999  |
  11 |        x93    .0527165  |
  12 |        x94   -.1248021  |
  13 |        x95    .0220743  |
  14 |      _cons    .9132204  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .5230036155   2.543470802   .6908222376   .5601330968    .332581626   2.464805137   .8678670461   .8085343705   .6303229446   .7002994011  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0012818716   .0062339971   .0016931918   .0013728752    .000815151   .0060411891   .0021271251   .0019817019   .0015449092   .0017164201  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_stata):
  optimize_result_value(S)
  1.21094e-07
  balance table after matching (cbps_port_stata):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4673913      .4923282     -.0249369      -.049839      .5003503      1.004458  |
   3 |         1.x2      .0108696      .0074884      .0033811      .0376593      .0897825      1.458884  |
   4 |         1.x3      .0217391       .023711     -.0019719     -.0130452       .151158      .9265074  |
   5 |           x4      .4347826      .4386729     -.0038903     -.0078334      .4966326      1.006495  |
   6 |           x5      25.46739      25.45801      .0093781      .0014148      6.628535      .6273162  |
   7 |           x6      11.86957      11.89491     -.0253428     -.0123239        2.0564       .559006  |
   8 |           x7      6.858696      6.790863      .0678324      .0201339       3.36906      1.140985  |
   9 |          x90      .0972024      .0826851      .0145173      .0142151      1.021263      .8460037  |
  10 |          x91     -.0890157     -.0671192     -.0218965     -.0227622      .9619657      .9503048  |
  11 |          x92      .0453787      .0235132      .0218655      .0219385      .9966695      1.138269  |
  12 |          x93      .0865687      .0849356       .001633      .0017143      .9526181      .9531308  |
  13 |          x94     -.1299173     -.1339674      .0040501      .0039553      1.023979      .7815571  |
  14 |          x95     -.0807251     -.0745052     -.0062199     -.0064787      .9600495      .8856706  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_stata):
  2587.152909
  cv of control weights (cbps_port_stata):
  .9155855904
  M.mean_sd_sq(denominator)
  7.49046e-07
  M.mean_asd(denominator)
  .0164087458
  M.max_asd(denominator)
  .0498389769
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0024839236   .0014182266   .0001701779   .0000613625   2.00169e-06   .0001518774   .0004053755   .0002020679   .0005181183   .0004812995
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.93872e-06   .0000156444   .0000419741  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0498389769   .0376593495    .013045226   .0078334233   .0014148098   .0123238535    .020133938   .0142150593   .0227622128   .0219385384
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0017142692   .0039552986     .00647874  |
     -------------------------------------------+
  
  
  
  
  
  
  

:     // not working yet?
:     cbpsweight = M.cbps("atet", "cbps_port_r",  2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -222.50836  
Iteration 2:   f(p) = -211.20652  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  19
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.324508  |
   2 |       1.x2   -1.526203  |
   3 |       1.x3   -.5948529  |
   4 |         x4   -.3218181  |
   5 |         x5    .0576992  |
   6 |         x6   -.2428745  |
   7 |         x7    .0338506  |
   8 |        x90    .1567238  |
   9 |        x91   -.1588564  |
  10 |        x92    .1371885  |
  11 |        x93    .0550811  |
  12 |        x94   -.1174197  |
  13 |        x95    .0136513  |
  14 |      _cons    .7970767  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4880432628   2.278602253   .5083551743   .4938607457   .2804916418   2.524200226   .8653552118   .7897653391   .5847502504   .6850287765  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011961845   .0055848094   .0012459686    .001210443   .0006874795   .0061867653   .0021209687   .0019356994   .0014332114   .0016789921  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  .0003953691
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4673913      .4690895     -.0016982     -.0033996      .4995239      1.008074  |
   3 |         1.x2      .0108696      .0108416      .0000279      .0002694      .1036852      1.011081  |
   4 |         1.x3      .0217391       .021845     -.0001058     -.0007237      .1462598      1.003733  |
   5 |           x4      .4347826      .4347485      .0000341      .0000687      .4962213      1.008529  |
   6 |           x5      25.46739      25.45876      .0086362      .0012971      6.657976       .621012  |
   7 |           x6      11.86957      11.87227     -.0027016     -.0013217      2.044025      .5666409  |
   8 |           x7      6.858696      6.858028      .0006672      .0001984      3.363897      1.145301  |
   9 |          x90      .0972024      .0955458      .0016567      .0016216      1.021612      .8452865  |
  10 |          x91     -.0890157     -.0872204     -.0017953     -.0018775      .9562317      .9641095  |
  11 |          x92      .0453787      .0440888      .0012899      .0012939      .9969037      1.137495  |
  12 |          x93      .0865687      .0847549      .0018138      .0019068      .9512429      .9564786  |
  13 |          x94     -.1299173     -.1294016     -.0005157     -.0005032      1.024752      .7801715  |
  14 |          x95     -.0807251     -.0788276     -.0018975     -.0019792      .9587493      .8885459  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2603.340564
  cv of control weights (cbps_port_r):
  .9813148438
  M.mean_sd_sq(denominator)
  5.86756e-08
  M.mean_asd(denominator)
  .0012662081
  M.max_asd(denominator)
  .0033995882
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0000115572   7.25962e-08   5.23703e-07   4.72004e-09   1.68252e-06   1.74688e-06   3.93428e-08   2.62963e-06   3.52491e-06   1.67408e-06
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    3.63576e-06   2.53252e-07   3.91715e-06  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0033995882   .0002694368   .0007236735   .0000687025   .0012971201   .0013216952   .0001983502   .0016216142   .0018774731   .0012938637
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0019067667   .0005032411   .0019791792  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
: // Other objective functions
:   cbpsweight = M.cbps("atet","mean_sd_sq",1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
convergence not achieved
  optimize_result_iterations(S)
  76
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.206443  |
   2 |       1.x2   -1.628677  |
   3 |       1.x3     -.58031  |
   4 |         x4   -.2832337  |
   5 |         x5    .0694163  |
   6 |         x6    -.278787  |
   7 |         x7    .0283209  |
   8 |        x90    .1446874  |
   9 |        x91   -.1322013  |
  10 |        x92    .1288213  |
  11 |        x93      .06336  |
  12 |        x94   -.1645469  |
  13 |        x95    .0190735  |
  14 |      _cons    1.380317  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4461351864   2.163365889   .5852256997   .4906137242   .2788165142   2.555692668   .8472059542    .835476343   .5825979195   .6620576427  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0010934686   .0053023674   .0014343767   .0012024846   .0006833738   .0062639526   .0020764852   .0020477361   .0014279361   .0016226903  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (mean_sd_sq):
  optimize_result_value(S)
  3.77498e-33
  balance table after matching (mean_sd_sq):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913     .5065707    -.0391794     -.078098     .5016695     1.004395  |
   3 |        1.x2     .0108696     .0094032     .0014663     .0140646     .1042572     1.164052  |
   4 |        1.x3     .0217391     .0217076     .0000315     .0002149     .1466296     1.009942  |
   5 |          x4     .4347826     .4181832     .0165994     .0333024     .4984448     1.018628  |
   6 |          x5     25.46739     26.05541    -.5880206    -.1080142     5.443922      .583267  |
   7 |          x6     11.86957     11.79935      .070218      .043748     1.605057     .5528994  |
   8 |          x7     6.858696     6.775281     .0834143     .0234527     3.556704     1.141156  |
   9 |         x90     .0972024     .0569964      .040206     .0421542     .9537854     .8487822  |
  10 |         x91    -.0890157     -.062197    -.0268187    -.0284411     .9429542     .9668971  |
  11 |         x92     .0453787     .0391246     .0062541     .0059496     1.051175     1.151879  |
  12 |         x93     .0865687     .1044403    -.0178716    -.0191146     .9349714     .9622808  |
  13 |         x94    -.1299173    -.1873488     .0574315     .0621009     .9248091     .7465145  |
  14 |         x95    -.0807251    -.0886593     .0079342     .0086807      .914005      .892775  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (mean_sd_sq):
  2608.892851
  cv of control weights (mean_sd_sq):
  1.041361571
  M.mean_sd_sq(denominator)
  2.42684e-32
  M.mean_asd(denominator)
  .0359489033
  M.max_asd(denominator)
  .1080141557
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0060993022   .0001978117   4.61687e-08   .0011090472   .0116670578   .0019138842   .0005500289   .0017769728   .0008088959   .0000353979
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0003653676   .0038565269   .0000753549  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0780980293   .0140645547   .0002148691   .0333023605   .1080141557   .0437479624   .0234526945   .0421541551   .0284410956   .0059496143
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0191145911    .062100941   .0086807201  |
     -------------------------------------------+
  
  
  
  
  
  
  

:   cbpsweight = M.cbps("atet","sd_sq",1)
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
  optimize_result_iterations(S)
  32
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.342972  |
   2 |       1.x2   -1.532354  |
   3 |       1.x3   -.5967178  |
   4 |         x4   -.3179043  |
   5 |         x5    .0589374  |
   6 |         x6   -.2432531  |
   7 |         x7    .0340789  |
   8 |        x90    .1584297  |
   9 |        x91   -.1616653  |
  10 |        x92    .1390857  |
  11 |        x93    .0571953  |
  12 |        x94    -.117601  |
  13 |        x95    .0110168  |
  14 |      _cons     1.50362  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4801020418   2.266068281   .4991707328   .4873717944   .2752694319   2.558581336   .8596829532   .7924354718   .5783513843   .6838205869  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011767207   .0055540889   .0012234577   .0011945387     .00067468   .0062710327   .0021070661   .0019422438   .0014175279   .0016760309  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (sd_sq):
  optimize_result_value(S)
  1.46236e-06
  balance table after matching (sd_sq):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913     .4669386     .0004527     .0009024     .5016695     1.008632  |
   3 |        1.x2     .0108696     .0108119     .0000577     .0005535     .1042572     1.013834  |
   4 |        1.x3     .0217391     .0217598    -.0000207    -.0001412     .1466296     1.007573  |
   5 |          x4     .4347826     .4348259    -.0000433    -.0000868     .4984448     1.008488  |
   6 |          x5     25.46739     25.46839    -.0009978    -.0001833     5.443922     .6195211  |
   7 |          x6     11.86957     11.87021     -.000648    -.0004038     1.605057     .5669974  |
   8 |          x7     6.858696     6.858506     .0001898     .0000534     3.556704     1.145087  |
   9 |         x90     .0972024     .0970472     .0001552     .0001628     .9537854     .8452241  |
  10 |         x91    -.0890157    -.0888137     -.000202    -.0002142     .9429542      .965684  |
  11 |         x92     .0453787     .0453724     6.29e-06     5.98e-06     1.051175     1.136542  |
  12 |         x93     .0865687     .0866051    -.0000364    -.0000389     .9349714     .9577611  |
  13 |         x94    -.1299173     -.130018     .0001008      .000109     .9248091     .7795191  |
  14 |         x95    -.0807251    -.0808805     .0001554       .00017      .914005     .8887044  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (sd_sq):
  2605.314317
  cv of control weights (sd_sq):
  .9892002541
  M.mean_sd_sq(denominator)
  4.67333e-09
  M.mean_asd(denominator)
  .0002327129
  M.max_asd(denominator)
  .0009024284
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  8.14377e-07   3.06312e-07   1.99451e-08   7.54030e-09   3.35920e-08   1.63017e-07   2.84650e-09   2.64927e-08   4.58984e-08   3.58168e-11
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    1.51685e-09   1.18770e-08   2.89059e-08  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0009024284   .0005534549    .000141227   .0000868349   .0001832812   .0004037539   .0000533526   .0001627657   .0002142391   5.98471e-06
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0000389467   .0001089818   .0001700174  |
     -------------------------------------------+
  
  
  
  
  
  
  

:   cbpsweight = M.cbps("atet","mean_asd")
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
convergence not achieved
  optimize_result_iterations(S)
  76
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.340929  |
   2 |       1.x2   -1.566632  |
   3 |       1.x3   -.5918482  |
   4 |         x4   -.3187284  |
   5 |         x5    .0588418  |
   6 |         x6   -.2435728  |
   7 |         x7     .034091  |
   8 |        x90    .1590847  |
   9 |        x91   -.1616878  |
  10 |        x92    .1391033  |
  11 |        x93    .0570151  |
  12 |        x94   -.1175073  |
  13 |        x95    .0112033  |
  14 |      _cons     1.32019  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4806605516   2.279495935   .5027735393   .4883047852   .2755714349   2.556024088   .8598855082   .7928659517   .5794650871   .6834999246  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011780896   .0055869998   .0012322881   .0011968255   .0006754202   .0062647649   .0021075625   .0019432989   .0014202576   .0016752449  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (mean_asd):
  optimize_result_value(S)
  .0003669253
  balance table after matching (mean_asd):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913     .4672737     .0001176     .0002345     .5016695     1.008542  |
   3 |        1.x2     .0108696       .01047     .0003995     .0038322     .1042572     1.046573  |
   4 |        1.x3     .0217391      .021742    -2.91e-06    -.0000198     .1466296     1.008379  |
   5 |          x4     .4347826     .4347743     8.33e-06     .0000167     .4984448     1.008516  |
   6 |          x5     25.46739     25.46739     3.43e-08     6.29e-09     5.443922     .6195204  |
   7 |          x6     11.86957     11.86959    -.0000224     -.000014     1.605057     .5670765  |
   8 |          x7     6.858696     6.858563      .000133     .0000374     3.556704      1.14501  |
   9 |         x90     .0972024     .0976507    -.0004482    -.0004699     .9537854     .8453943  |
  10 |         x91    -.0890157    -.0890098    -5.92e-06    -6.28e-06     .9429542     .9654509  |
  11 |         x92     .0453787     .0454132    -.0000346    -.0000329     1.051175     1.136372  |
  12 |         x93     .0865687     .0865779    -9.21e-06    -9.85e-06     .9349714     .9577569  |
  13 |         x94    -.1299173    -.1299318     .0000145     .0000157     .9248091     .7795134  |
  14 |         x95    -.0807251    -.0807989     .0000738     .0000808      .914005     .8888809  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (mean_asd):
  2605.446846
  cv of control weights (mean_asd):
  .9896656792
  M.mean_sd_sq(denominator)
  7.94623e-08
  M.mean_asd(denominator)
  .0003669253
  M.max_asd(denominator)
  .0038322245
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  5.49711e-08   .0000146859   3.92893e-10   2.79481e-10   3.96105e-17   1.95044e-10   1.39874e-09   2.20836e-07   3.94250e-11   1.08101e-09
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    9.69934e-11   2.46934e-10   6.52582e-09  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0002344591   .0038322245   .0000198215   .0000167177   6.29369e-09   .0000139658   .0000373997   .0004699318   6.27894e-06   .0000328787
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    9.84852e-06   .0000157141   .0000807825  |
     -------------------------------------------+
  
  
  
  
  
  
  

:   cbpsweight = M.cbps("atet","max_asd")
  Step 1 (initial values from logit model):
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21588  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  
  Step 2 (CBPS) :
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
numerical derivatives are approximate
flat or discontinuous region encountered
convergence not achieved
  optimize_result_iterations(S)
  76
  CBPS beta
                1           2
     +-------------------------+
   1 |         x1   -1.327361  |
   2 |       1.x2   -1.612967  |
   3 |       1.x3   -.5779721  |
   4 |         x4   -.3017884  |
   5 |         x5     .058213  |
   6 |         x6   -.2460553  |
   7 |         x7    .0317928  |
   8 |        x90    .1513065  |
   9 |        x91   -.1542314  |
  10 |        x92    .1461054  |
  11 |        x93    .0492387  |
  12 |        x94   -.1259854  |
  13 |        x95    .0170791  |
  14 |      _cons    1.612339  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4752335128   2.338741069   .5145059796   .4842780861   .2836456429   2.491322975    .846309553   .7982743405     .59568704   .6476546678  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |   .001164788   .0057322085   .0012610441   .0011869561   .0006952099   .0061061838   .0020742881   .0019565548   .0014600173   .0015873889  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (max_asd):
  optimize_result_value(S)
  .0086960489
  balance table after matching (max_asd):
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4673913     .4672197     .0001716     .0003421     .5016695     1.008557  |
   3 |        1.x2     .0108696     .0100339     .0008357     .0080159     .1042572     1.091587  |
   4 |        1.x3     .0217391     .0218924    -.0001532    -.0010449     .1466296      1.00161  |
   5 |          x4     .4347826     .4388149    -.0040323    -.0080897     .4984448     1.006424  |
   6 |          x5     25.46739     25.43539     .0319977     .0058777     5.443922     .6181769  |
   7 |          x6     11.86957     11.85727      .012296     .0076608     1.605057     .5665808  |
   8 |          x7     6.858696     6.830096     .0285999     .0080411     3.556704     1.144534  |
   9 |         x90     .0972024      .089504     .0076984     .0080715     .9537854     .8433834  |
  10 |         x91    -.0890157    -.0821691    -.0068465    -.0072607     .9429542     .9652021  |
  11 |         x92     .0453787     .0527573    -.0073786    -.0070194     1.051175     1.135633  |
  12 |         x93     .0865687     .0786989     .0078698     .0084171     .9349714     .9571798  |
  13 |         x94    -.1299173    -.1379594     .0080422      .008696     .9248091     .7782926  |
  14 |         x95    -.0807251    -.0774403    -.0032848    -.0035939      .914005     .8898205  |
     +--------------------------------------------------------------------------------------------+
  entropydistance of control weights (max_asd):
  2605.013451
  cv of control weights (max_asd):
  .987672027
  M.mean_sd_sq(denominator)
  4.67677e-06
  M.mean_asd(denominator)
  .0063177615
  M.max_asd(denominator)
  .0086960489
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  1.17045e-07   .0000642545   1.09191e-06   .0000654435   .0000345473   .0000586876   .0000646596   .0000651484   .0000527182    .000049272
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0000708481   .0000756213   .0000129159  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0003421179   .0080158909   .0010449431   .0080897156   .0058776973     .00766078   .0080411214   .0080714584   .0072607302      .0070194
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0084171326   .0086960489   .0035938632  |
     -------------------------------------------+
  
  
  
  
  
  
  

: //  cbpsweight = M.cbps("atet","mean_sd_sq_cv",1, (1,1,6)
: 
: 
: // IPW
:   M = gmatch()

:   M.clone(D)

:   stata("qui teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , atet aequations")

:   iwpweight = D.ipw("atet")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
:   M.multweight(iwpweight)

: 
:   stata("di _b[POmean:0.treat]")
3417.8947

:   M.pomean()
                 1             2
    +-----------------------------+
  1 |  3417.894673   .9465175518  |
    +-----------------------------+

: 
:   stata("tebalance summarize")

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        247.8
                          Control obs   =          408        252.2
                          -----------------------------------------

  -----------------------------------------------------------------
                  |Standardized differences          Variance ratio
                  |        Raw    Weighted           Raw   Weighted
  ----------------+------------------------------------------------
               x1 |  -.6027752   -.0090577      1.338962   .9989677
                  |
               x2 |
               1  |  -.1180374    .0096998      .4133173   1.098626
                  |
               x3 |
               1  |  -.1253201    .0022927      .5085817   1.015318
                  |
               x4 |  -.1207472   -.0222549      .9914484   .9947225
               x5 |  -.1944638    .0308855      .8589874   .5917507
               x6 |  -.6542694    .0952268      .4958356   .5601212
               x7 |   .0473848    .0429284      1.160037   1.132231
              x90 |   .1499304    .0130255      .9289414   .8182649
              x91 |  -.0833726   -.0288848      .8791918   .9584288
              x92 |   .0662245    .0110605      1.090179   1.139468
              x93 |   .0479737   -.0087695      .8926169   .9659809
              x94 |  -.1521926    .0562648      .8686432   .7583723
              x95 |  -.0155155     .017858      .8285405   .8879817
  -----------------------------------------------------------------

:   table = M.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4673913     .4719209    -.0045296    -.0090456     .5007475     1.007399  |
   3 |        1.x2     .0108696     .0098847     .0009849     .0096855     .1016872     1.107894  |
   4 |        1.x3     .0217391     .0214054     .0003337     .0022895     .1457719     1.023886  |
   5 |          x4     .4347826      .445852    -.0110694    -.0222252     .4980573     1.003118  |
   6 |          x5     25.46739     25.27307     .1943233     .0308606     6.296806      .596745  |
   7 |          x6     11.86957     11.68981     .1797533     .0951549     1.889059     .5648484  |
   8 |          x7     6.858696     6.711046     .1476493      .042865     3.444517     1.141787  |
   9 |         x90     .0972024     .0841522     .0130502     .0130107     1.003034     .8251709  |
  10 |         x91    -.0890157    -.0615794    -.0274362    -.0288473     .9510857     .9665176  |
  11 |         x92     .0453787     .0341522     .0112265     .0110442     1.016508     1.149085  |
  12 |         x93     .0865687     .0948113    -.0082427     -.008758     .9411576     .9741335  |
  13 |         x94    -.1299173    -.1857505     .0558332     .0562053     .9933796     .7647728  |
  14 |         x95    -.0807251    -.0974964     .0167713     .0178362     .9402985     .8954759  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("tebalance summarize, baseline")

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        247.8
                          Control obs   =          408        252.2
                          -----------------------------------------

  -----------------------------------------------------------------
                  |           Means                  Variances     
                  |    Control     Treated       Control    Treated
  ----------------+------------------------------------------------
               x1 |        .75    .4673913      .1879607   .2516722
                  |
               x2 |
               1  |   .0269608    .0108696      .0262984   .0108696
                  |
               x3 |
               1  |   .0441176    .0217391      .0422749   .0215002
                  |
               x4 |    .495098    .4347826      .2505902   .2484472
               x5 |   26.56863    25.46739      34.50142   29.63629
               x6 |   13.15931    11.86957      5.195687   2.576206
               x7 |   6.696078    6.858696      10.90495   12.65014
              x90 |   -.048508    .0972024      .9792937   .9097065
              x91 |  -.0077434   -.0890157      1.011341   .8891627
              x92 |  -.0227801    .0453787      1.013567    1.10497
              x93 |   .0403853    .0865687      .9793358   .8741716
              x94 |   .0160559   -.1299173      .9846065   .8552718
              x95 |  -.0658282   -.0807251      1.008285   .8354051
  -----------------------------------------------------------------

:   M.multweight()

:   table = M.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4673913          .75    -.2826087    -.6027752     .4688459     1.338962  |
   3 |        1.x2     .0108696     .0269608    -.0160912    -.1180374      .136323     .4133173  |
   4 |        1.x3     .0217391     .0441176    -.0223785    -.1253201     .1785709     .5085817  |
   5 |          x4     .4347826      .495098    -.0603154    -.1207472     .4995185     .9914484  |
   6 |          x5     25.46739     26.56863    -1.101236    -.1944638     5.662937     .8589874  |
   7 |          x6     11.86957     13.15931    -1.289749    -.6542694      1.97128     .4958356  |
   8 |          x7     6.858696     6.696078     .1626172     .0473848     3.431843     1.160037  |
   9 |         x90     .0972024     -.048508     .1457105     .1499304      .971854     .9289414  |
  10 |         x91    -.0890157    -.0077434    -.0812723    -.0833726     .9748086     .8791918  |
  11 |         x92     .0453787    -.0227801     .0681588     .0662245     1.029208     1.090179  |
  12 |         x93     .0865687     .0403853     .0461833     .0479737     .9626805     .8926169  |
  13 |         x94    -.1299173     .0160559    -.1459732    -.1521926     .9591346     .8686432  |
  14 |         x95    -.0807251    -.0658282    -.0148969    -.0155155     .9601277     .8285405  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , atet aequations")

Iteration 0:   EE criterion =  5.570e-18  
Iteration 1:   EE criterion =  4.978e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Treated vs Untreated)  |  -365.5251   68.93598    -5.30   0.000    -500.6371   -230.4131
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3417.895   43.41569    78.72   0.000     3332.801    3502.988
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.207512   .3268258    -3.69   0.000    -1.848079   -.5669452
                        |
                     x2 |
                     1  |  -1.628792   1.054719    -1.54   0.123    -3.696005    .4384199
                        |
                     x3 |
                     1  |  -.5805318   .8259794    -0.70   0.482    -2.199422    1.038358
                     x4 |  -.2831153   .2838113    -1.00   0.318    -.8393752    .2731445
                     x5 |   .0545179   .0270259     2.02   0.044     .0015481    .1074878
                     x6 |  -.2844593   .0688093    -4.13   0.000     -.419323   -.1495955
                     x7 |    .023871   .0390129     0.61   0.541    -.0525929    .1003349
                    x90 |   .1439494   .1292697     1.11   0.265    -.1094145    .3973133
                    x91 |  -.1331182   .1248073    -1.07   0.286    -.3777361    .1114997
                    x92 |   .1277527    .133834     0.95   0.340    -.1345572    .3900625
                    x93 |   .0623585   .1243317     0.50   0.616    -.1813271    .3060441
                    x94 |  -.1663354   .1194682    -1.39   0.164    -.4004887    .0678179
                    x95 |    .017776   .1254901     0.14   0.887    -.2281801     .263732
                  _cons |   1.379538   .9297905     1.48   0.138    -.4428177    3.201894
-----------------------------------------------------------------------------------------

:   stata("predict pscore1, tlevel(1) ")
(option ps assumed; propensity score)

:   stata("list `treatvar' pscore1 in 1/20, nolab ")

     +-------------------+
     | treat     pscore1 |
     |-------------------|
  1. |     0   .09190987 |
  2. |     0   .35215962 |
  3. |     0   .12794762 |
  4. |     0   .10263772 |
  5. |     0   .06571691 |
     |-------------------|
  6. |     0   .36822688 |
  7. |     0   .15689313 |
  8. |     0   .16443463 |
  9. |     0   .12521983 |
 10. |     0   .12044877 |
     |-------------------|
 11. |     1   .13095483 |
 12. |     0   .23712312 |
 13. |     0   .16541533 |
 14. |     0   .24493927 |
 15. |     0   .29944927 |
     |-------------------|
 16. |     0   .08410573 |
 17. |     0   .18480285 |
 18. |     0   .16790212 |
 19. |     0   .20098764 |
 20. |     1   .44671405 |
     +-------------------+

:   ipw = D.ipw("atet")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , ate aequations")

Iteration 0:   EE criterion =  5.570e-18  
Iteration 1:   EE criterion =  1.612e-25  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATE                     |
                  treat |
(Treated vs Untreated)  |   -328.878   82.21905    -4.00   0.000    -490.0244   -167.7316
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3452.527   28.58753   120.77   0.000     3396.497    3508.558
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.207512   .3268258    -3.69   0.000    -1.848079   -.5669452
                        |
                     x2 |
                     1  |  -1.628792   1.054719    -1.54   0.123    -3.696005    .4384199
                        |
                     x3 |
                     1  |  -.5805318   .8259794    -0.70   0.482    -2.199422    1.038358
                     x4 |  -.2831153   .2838113    -1.00   0.318    -.8393752    .2731445
                     x5 |   .0545179   .0270259     2.02   0.044     .0015481    .1074878
                     x6 |  -.2844593   .0688093    -4.13   0.000     -.419323   -.1495955
                     x7 |    .023871   .0390129     0.61   0.541    -.0525929    .1003349
                    x90 |   .1439494   .1292697     1.11   0.265    -.1094145    .3973133
                    x91 |  -.1331182   .1248073    -1.07   0.286    -.3777361    .1114997
                    x92 |   .1277527    .133834     0.95   0.340    -.1345572    .3900625
                    x93 |   .0623585   .1243317     0.50   0.616    -.1813271    .3060441
                    x94 |  -.1663354   .1194682    -1.39   0.164    -.4004887    .0678179
                    x95 |    .017776   .1254901     0.14   0.887    -.2281801     .263732
                  _cons |   1.379538   .9297905     1.48   0.138    -.4428177    3.201894
-----------------------------------------------------------------------------------------

:   ipw = D.ipw("ate")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' , atet aequations tlevel(0) control(1)")

Iteration 0:   EE criterion =  5.570e-18  
Iteration 1:   EE criterion =  3.813e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Untreated vs Treated)  |     319.07   91.15096     3.50   0.000     140.4174    497.7225
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
               Treated  |   3141.406   87.28586    35.99   0.000     2970.328    3312.483
------------------------+----------------------------------------------------------------
TME0                    |
                     x1 |   1.207512   .3268258     3.69   0.000     .5669452    1.848079
                        |
                     x2 |
                     1  |   1.628792   1.054719     1.54   0.123    -.4384199    3.696005
                        |
                     x3 |
                     1  |   .5805318   .8259794     0.70   0.482    -1.038358    2.199422
                     x4 |   .2831153   .2838113     1.00   0.318    -.2731445    .8393752
                     x5 |  -.0545179   .0270259    -2.02   0.044    -.1074878   -.0015481
                     x6 |   .2844593   .0688093     4.13   0.000     .1495955     .419323
                     x7 |   -.023871   .0390129    -0.61   0.541    -.1003349    .0525929
                    x90 |  -.1439494   .1292697    -1.11   0.265    -.3973133    .1094145
                    x91 |   .1331182   .1248073     1.07   0.286    -.1114997    .3777361
                    x92 |  -.1277527    .133834    -0.95   0.340    -.3900625    .1345572
                    x93 |  -.0623585   .1243317    -0.50   0.616    -.3060441    .1813271
                    x94 |   .1663354   .1194682     1.39   0.164    -.0678179    .4004887
                    x95 |   -.017776   .1254901    -0.14   0.887     -.263732    .2281801
                  _cons |  -1.379538   .9297905    -1.48   0.138    -3.201894    .4428177
-----------------------------------------------------------------------------------------

:   ipw = D.ipw("ateu")
initial:       f(p) = -346.57359
alternative:   f(p) = -283.03849
rescale:       f(p) = -247.46401
Iteration 0:   f(p) = -247.46401  
Iteration 1:   f(p) = -223.85141  
Iteration 2:   f(p) = -211.21673  
Iteration 3:   f(p) = -211.17754  
Iteration 4:   f(p) = -211.17753  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.207511888   -1.628789297   -.5805311763   -.2831151514    .0545179194   -.2844591542    .0238709471    .1439493406   -.1331181675    .1277525862
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1      .062358461   -.1663353311    .0177759205    1.379537282  |
     -------------------------------------------------------------+

: 
: mata drop D M

: 
: // **************************
: // * WEIGHTED DATA EXAMPLES *
: // **************************
: 
: DW = gmatch()

: DW.set(st_local("treatvar"),st_local("varlist"), st_local("constvar"), st_local("tousevar"), st_local("wgtvar"))
  X contains
          1      2      3      4      5      6      7      8      9     10     11     12     13
    +--------------------------------------------------------------------------------------------+
  1 |    x1   1.x2   1.x3     x4     x5     x6     x7    x90    x91    x92    x93    x94    x95  |
    +--------------------------------------------------------------------------------------------+
  X is 500 by 13
  408 control obs (sum of weights = 802.3793)
  92 treatment obs (sum of weights = 180.1725)

: if (depvars!="") DW.set_Y(st_local("depvars"),st_local("tousevar"))
> 
> // Misc balance measures
>   DW.diff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.295813959   -.0156488223   -.0187317786   -.0757286195   -1.051311077   -1.308590669     .297707166    .1231935602   -.0575694681    .0828891447
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0552344857   -.1298217376   -.0348745599  |
     ----------------------------------------------+

:   DW.stddiff()
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.5928113513   -.1469730323   -.1218929028   -.1529139652   -.1938926866   -.7969828512    .0837330563    .1283646934   -.0613348134    .0800443396
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0583642775   -.1419196244   -.0384510908  |
     ----------------------------------------------+

:   DW.mean_asd()
  .1998214373

:   DW.stddiff(1)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -.5928113513   -.1469730323   -.1218929028   -.1529139652   -.1938926866   -.7969828512    .0837330563    .1283646934   -.0613348134    .0800443396
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0583642775   -.1419196244   -.0384510908  |
     ----------------------------------------------+

:   DW.stddiff(0)
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |   -.680061781   -.0963964449   -.0924925724    -.151364552   -.1796741931    -.574992733     .089787867    .1235603267   -.0581251544    .0827450762
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13
     ----------------------------------------------+
  1     .0561740214   -.1310646825   -.0346950651  |
     ----------------------------------------------+

:   DW.varratio()
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  1.316023713   .4301765439   .5757804001   .9798375062   .8587140122   .5205072206   1.149850614   .9265458616   .8980781756   1.068619436
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .9263536214    .852877099   .8141756036  |
     -------------------------------------------+

:   DW.prognosticdiff()
                       1                   2                   3                   4
    +---------------------------------------------------------------------------------+
  1 |     Dependent var.   mean of y_hat (T)   mean of y_hat (C)    prognosticdiff()  |
  2 |                 y1             3448.29            3459.434           -11.14415  |
  3 |          y1_binary              .95075            .9627243           -.0119743  |
    +---------------------------------------------------------------------------------+
                  1              2
    +-------------------------------+
  1 |  -11.14415063    -.011974287  |
    +-------------------------------+

: 
:   "Balance table before matching"
  Balance table before matching

:   temp = DW.balancetable(1)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()       sd (T)   varratio()  |
   2 |          x1     .4512231     .7470371     -.295814    -.5928114     .4990018     1.316024  |
   3 |        1.x2     .0114039     .0270527    -.0156488     -.146973     .1064741     .4301765  |
   4 |        1.x3     .0240637     .0427955    -.0187318    -.1218929     .1536741     .5757804  |
   5 |          x4     .4218861     .4976147    -.0757286     -.152914     .4952368     .9798375  |
   6 |          x5     25.44699      26.4983    -1.051311    -.1938927     5.422129      .858714  |
   7 |          x6     11.84757     13.15616    -1.308591    -.7969829     1.641931     .5205072  |
   8 |          x7     7.015422     6.717714     .2977072     .0837331     3.555432     1.149851  |
   9 |         x90     .0839738    -.0392197     .1231936     .1283647     .9597153     .9265459  |
  10 |         x91    -.0648837    -.0073142    -.0575695    -.0613348       .93861     .8980782  |
  11 |         x92     .0575388    -.0253504     .0828891     .0800443      1.03554     1.068619  |
  12 |         x93     .1016523     .0464178     .0552345     .0583643     .9463749     .9263536  |
  13 |         x94    -.1252265     .0045953    -.1298217    -.1419196     .9147554     .8528771  |
  14 |         x95    -.1044649    -.0695904    -.0348746    -.0384511     .9069849     .8141756  |
     +--------------------------------------------------------------------------------------------+

: 
: // Replicate CBPS
: 
:   MW = gmatch()

:   MW.clone(DW)

:   MW.prognosticdiff()
                       1                   2                   3                   4
    +---------------------------------------------------------------------------------+
  1 |     Dependent var.   mean of y_hat (T)   mean of y_hat (C)    prognosticdiff()  |
  2 |                 y1             3448.29            3459.434           -11.14415  |
  3 |          y1_binary              .95075            .9627243           -.0119743  |
    +---------------------------------------------------------------------------------+
                  1              2
    +-------------------------------+
  1 |  -11.14415063    -.011974287  |
    +-------------------------------+

: 
:   "--- ATE (not overidentified) ---"; ""; ""
  --- ATE (not overidentified) ---
  
  

:     cbpsweight = MW.cbps("ate" , "cbps_port_r",  2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  28
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.502416  |
   2 |       1.x2   -2.525399  |
   3 |       1.x3   -.8191009  |
   4 |         x4   -.3236397  |
   5 |         x5    .0771198  |
   6 |         x6   -.4884764  |
   7 |         x7    .0722686  |
   8 |        x90    .0234165  |
   9 |        x91    .0257849  |
  10 |        x92    .2152141  |
  11 |        x93   -.0285372  |
  12 |        x94   -.3393877  |
  13 |        x95   -.0407881  |
  14 |      _cons    3.075437  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8333804047   1.262724343    .891164837   .8233813768   .8085688026   1.048159199   .9430612398   .9166305679   .8600926322   .8223358716  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0010386364   .0015737249   .0011106528   .0010261747   .0010077139   .0013063138   .0011753309   .0011423905   .0010719277   .0010248717  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  6.61326e-28
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6695182      .6695182     -9.71e-14     -2.06e-13      .4706262      1.004328  |
   3 |         1.x2      .0220668      .0220668     -4.06e-14     -2.76e-13      .1469756      1.004328  |
   4 |         1.x3      .0366911      .0366911     -4.24e-14     -2.25e-13       .188098      1.004328  |
   5 |           x4       .485133       .485133      9.99e-16      2.00e-15      .5000334      1.004328  |
   6 |           x5      26.17889      26.17889     -1.01e-12     -1.61e-13      6.237853      .6789026  |
   7 |           x6      12.63449      12.63449     -8.94e-13     -3.82e-13      2.338005      .5740656  |
   8 |           x7      6.755243      6.755243     -1.33e-14     -3.95e-15      3.370937      1.187219  |
   9 |          x90     -.0520316     -.0520316     -2.64e-13     -2.52e-13      1.046128      1.163666  |
  10 |          x91      .0164856      .0164856      2.78e-13      2.87e-13      .9705717      .9930954  |
  11 |          x92     -.0021645     -.0021645      6.90e-15      6.78e-15      1.017927      1.359802  |
  12 |          x93      .0456916      .0456916     -1.98e-13     -2.06e-13      .9636159       .883731  |
  13 |          x94     -.0910006     -.0910006     -4.30e-14     -4.24e-14      1.014116      .7859289  |
  14 |          x95     -.0894588     -.0894588      2.30e-13      2.35e-13       .978942      .8236876  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2750.417544
  cv of control weights (cbps_port_r):
  .4351202284
  M.mean_sd_sq(denominator)
  8.88515e-27
  M.mean_asd(denominator)
  1.75899e-13
  M.max_asd(denominator)
  3.82167e-13
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  4.26073e-26   7.63698e-26   5.07205e-26   3.99307e-30   2.59790e-26   1.46051e-25   1.56200e-29   6.37206e-26   8.20846e-26   4.59171e-29
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    4.24224e-26   1.79501e-27   5.53987e-26  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  2.06415e-13   2.76351e-13   2.25212e-13   1.99827e-15   1.61180e-13   3.82167e-13   3.95222e-15   2.52429e-13   2.86504e-13   6.77622e-15
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    2.05967e-13   4.23676e-14   2.35369e-13  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATE overidentified ---"; ""; ""
  --- ATE overidentified ---
  
  

:     // not working yet?
:     cbpsweight = MW.cbps("ate" , "cbps_port_r",  2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  19
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.226645  |
   2 |       1.x2   -1.653762  |
   3 |       1.x3   -.7776876  |
   4 |         x4   -.3532491  |
   5 |         x5    .0574629  |
   6 |         x6   -.2583005  |
   7 |         x7    .0080439  |
   8 |        x90    .0890276  |
   9 |        x91   -.1706881  |
  10 |        x92    .1765097  |
  11 |        x93    .1136718  |
  12 |        x94   -.1271347  |
  13 |        x95    .0214704  |
  14 |      _cons    1.180155  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .8902205415   1.188129739   .9058232065   .9133968107   .8718550351   1.262126974   .9857749884    .985662826   .9230845437    .937433423  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0011094759   .0014807581   .0011289214   .0011383603   .0010865871   .0015729804   .0012285648    .001228425   .0011504341    .001168317  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  .0177718443
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .6415953      .6970127     -.0554173     -.1194311      .4640107      1.093567  |
   3 |         1.x2      .0142909      .0234703     -.0091794     -.0628462      .1460619      .6172753  |
   4 |         1.x3      .0334441      .0380925     -.0046484     -.0245369      .1894462      .8860314  |
   5 |           x4      .4881571      .4821182      .0060389      .0120785       .499973       1.00505  |
   6 |           x5      25.72258      26.31855     -.5959644     -.1000426      5.957105      .7659019  |
   7 |           x6      12.33189       12.8994     -.5675068     -.2533225      2.240254      .6135511  |
   8 |           x7      6.911084      6.688832       .222252      .0657612      3.379685      1.211887  |
   9 |          x90     -.0440388     -.0251309      -.018908     -.0185767       1.01783      1.120774  |
  10 |          x91      .0661735     -.0257224      .0918959      .0936219      .9815644      .9753854  |
  11 |          x92     -.0382008     -.0020298     -.0361709     -.0355957      1.016161       1.20721  |
  12 |          x93      .0014101      .0645199     -.0631098     -.0653399      .9658703      .9125525  |
  13 |          x94     -.1442668     -.0285682     -.1156986     -.1166712      .9916637      .8216037  |
  14 |          x95     -.1053626       -.07164     -.0337226     -.0344811      .9780038       .803947  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2733.070247
  cv of control weights (cbps_port_r):
  .1959655195
  M.mean_sd_sq(denominator)
  .0025726925
  M.mean_asd(denominator)
  .0771004085
  M.max_asd(denominator)
  .2533225087
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0142637948   .0039496397   .0006020579   .0001458893   .0100085242   .0641722934   .0043245293   .0003450949   .0087650569   .0012670516
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0042692974   .0136121687   .0011889446  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .1194311302   .0628461589   .0245368689   .0120784633   .1000426118   .2533225087   .0657611532   .0185767299   .0936218824   .0355956678
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0653398607    .116671199   .0344810753  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET (not overidentified) ---"; ""; ""
  --- ATET (not overidentified) ---
  
  

:     cbpsweight = MW.cbps("atet", "cbps_port_r",  2, 0)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  21
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.447047  |
   2 |       1.x2   -1.546891  |
   3 |       1.x3   -.4710623  |
   4 |         x4   -.3822539  |
   5 |         x5    .0635824  |
   6 |         x6    -.243227  |
   7 |         x7    .0477027  |
   8 |        x90    .1334992  |
   9 |        x91   -.1336117  |
  10 |        x92    .1522937  |
  11 |        x93    .0757732  |
  12 |        x94   -.1016171  |
  13 |        x95   -.0383391  |
  14 |      _cons    .6265763  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4737920689   2.405738599   .5345336261   .4592314503   .2387116236   2.248410136   .9587650605   .8076241521   .4960818726   .6846179686  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0005904839   .0029982559   .0006661857   .0005723371   .0002975047   .0028021785   .0011949025   .0010065366   .0006182635   .0008532348  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  1.21417e-26
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4512231      .4512231     -1.14e-12     -2.28e-12      .4978686      1.004328  |
   3 |         1.x2      .0114039      .0114039      2.65e-13      2.49e-12      .1062323      1.004328  |
   4 |         1.x3      .0240637      .0240637      4.79e-14      3.12e-13      .1533251      1.004328  |
   5 |           x4      .4218861      .4218861      4.51e-13      9.12e-13       .494112      1.004328  |
   6 |           x5      25.44699      25.44699     -5.56e-12     -8.34e-13      6.665558      .6144662  |
   7 |           x6      11.84757      11.84757     -5.57e-12     -2.72e-12      2.042375      .5982513  |
   8 |           x7      7.015422      7.015422     -6.16e-13     -1.84e-13      3.345323      1.161761  |
   9 |          x90      .0839738      .0839738      8.61e-13      8.40e-13        1.0258      .8505325  |
  10 |          x91     -.0648837     -.0648837      2.16e-14      2.29e-14       .941106      .9922891  |
  11 |          x92      .0575388      .0575388      4.52e-13      4.57e-13      .9892732      1.118263  |
  12 |          x93      .1016523      .1016523     -1.13e-13     -1.20e-13      .9410813      1.012572  |
  13 |          x94     -.1252265     -.1252265     -5.55e-13     -5.40e-13      1.026859      .7576623  |
  14 |          x95     -.1044649     -.1044649     -2.81e-14     -2.91e-14      .9627688      .8646431  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2876.289278
  cv of control weights (cbps_port_r):
  1.033606536
  M.mean_sd_sq(denominator)
  1.66768e-26
  M.mean_asd(denominator)
  9.04086e-13
  M.max_asd(denominator)
  2.72493e-12
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  5.21475e-24   6.21332e-24   9.75107e-26   8.32598e-25   6.95787e-25   7.42524e-24   3.38525e-26   7.04919e-25   5.26481e-28   2.09060e-25
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    1.44232e-26   2.91684e-25   8.49491e-28  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  2.28358e-12   2.49265e-12   3.12267e-13   9.12468e-13   8.34138e-13   2.72493e-12   1.83991e-13   8.39594e-13   2.29452e-14   4.57230e-13
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    1.20097e-13   5.40078e-13   2.91460e-14  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
:   "--- ATET overidentified ---"; ""; ""
  --- ATET overidentified ---
  
  

:     // not working yet? 
:     cbpsweight = MW.cbps("atet", "cbps_port_r",  2, 1)
  Step 1 (initial values from logit model):
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.04895  
Iteration 2:   f(p) = -411.28759  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
  
  Step 2 (CBPS) :
  optimize_result_iterations(S)
  18
  CBPS beta after undoing the normalization
                1           2
     +-------------------------+
   1 |         x1   -1.393749  |
   2 |       1.x2   -1.561041  |
   3 |       1.x3   -.4600041  |
   4 |         x4   -.3846168  |
   5 |         x5    .0606092  |
   6 |         x6   -.2482012  |
   7 |         x7    .0443349  |
   8 |        x90    .1306488  |
   9 |        x91   -.1205474  |
  10 |        x92    .1453092  |
  11 |        x93     .070476  |
  12 |        x94   -.1075638  |
  13 |        x95   -.0307916  |
  14 |      _cons    .7598453  |
     +-------------------------+
  Weights for first 10 observations:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .4804666451   2.466106022   .5794529823   .4795236698   .2534653344   2.204822428   .9473804216   .8064548956   .5138913175   .6635984943  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Weights for first 10 observations / N:
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  1 |  .0005988024   .0030734914   .0007221684   .0005976271   .0003158921   .0027478554   .0011807139   .0010050793   .0006404593   .0008270384  |
    +---------------------------------------------------------------------------------------------------------------------------------------------+
  Balance after CBPS (cbps_port_r):
  optimize_result_value(S)
  .0001721532
  balance table after matching (cbps_port_r):
                  1             2             3             4             5             6             7
     +---------------------------------------------------------------------------------------------------+
   1 |     Variable      mean (T)      mean (C)        diff()     stddiff()   sd (Pooled)    varratio()  |
   2 |           x1      .4512231      .4553292      -.004106      -.008242       .498186      1.002774  |
   3 |         1.x2      .0114039      .0111962      .0002076      .0019689      .1054487      1.022737  |
   4 |         1.x3      .0240637      .0242798     -.0002161     -.0014043      .1538723      .9956099  |
   5 |           x4      .4218861      .4235251      -.001639     -.0033156       .494322      1.003286  |
   6 |           x5      25.44699      25.39436      .0526224      .0078927      6.667188      .6141311  |
   7 |           x6      11.84757      11.82507      .0224988      .0110125      2.043017      .5978372  |
   8 |           x7      7.015422      6.978162        .03726       .011128      3.348319      1.159171  |
   9 |          x90      .0839738      .0816058       .002368      .0023047      1.027479      .8472278  |
  10 |          x91     -.0648837     -.0554765     -.0094072     -.0099831      .9423132      .9892043  |
  11 |          x92      .0575388      .0526517      .0048871      .0049455      .9881782      1.121369  |
  12 |          x93      .1016523        .09771      .0039424      .0041911      .9406607      1.013686  |
  13 |          x94     -.1252265      -.131327      .0061006      .0059387       1.02725      .7569926  |
  14 |          x95     -.1044649     -.1015494     -.0029155     -.0030291      .9625009      .8652191  |
     +---------------------------------------------------------------------------------------------------+
  entropydistance of control weights (cbps_port_r):
  2872.573597
  cv of control weights (cbps_port_r):
  1.02146686
  M.mean_sd_sq(denominator)
  3.24223e-06
  M.mean_asd(denominator)
  .0057966356
  M.max_asd(denominator)
  .0111279635
  M.sd_sq(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0000679303   3.87649e-06   1.97217e-06   .0000109933   .0000622955   .0001212761   .0001238316   5.31160e-06   .0000996618   .0000244584
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1     .000017565   .0000352685   9.17534e-06  |
     -------------------------------------------+
  M.asd(denominator)
                 1             2             3             4             5             6             7             8             9            10
    +---------------------------------------------------------------------------------------------------------------------------------------------
  1 |  .0082419831   .0019688801   .0014043413   .0033156176   .0078927497   .0110125421   .0111279635   .0023046916   .0099830738    .004945543
    +---------------------------------------------------------------------------------------------------------------------------------------------
                11            12            13
     -------------------------------------------+
  1    .0041910659   .0059387291   .0030290819  |
     -------------------------------------------+
  
  
  
  
  
  
  

: 
: // IPW
: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' [iw=`wgtvar'], atet aequations")

Iteration 0:   EE criterion =  3.987e-18  
Iteration 1:   EE criterion =  1.444e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Treated vs Untreated)  |  -373.2561   49.21885    -7.58   0.000    -469.7233   -276.7889
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3424.879   30.82585   111.10   0.000     3364.462    3485.297
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.299227   .2371935    -5.48   0.000    -1.764118   -.8343367
                        |
                     x2 |
                     1  |  -1.630014    .746001    -2.19   0.029    -3.092149   -.1678787
                        |
                     x3 |
                     1  |  -.4513753   .5770312    -0.78   0.434    -1.582336    .6795851
                     x4 |  -.3551911    .204881    -1.73   0.083    -.7567506    .0463684
                     x5 |    .058452   .0195046     3.00   0.003     .0202237    .0966803
                     x6 |  -.2821622    .049775    -5.67   0.000    -.3797195    -.184605
                     x7 |   .0332008   .0279849     1.19   0.235    -.0216486    .0880501
                    x90 |   .1276778   .0907109     1.41   0.159    -.0501124     .305468
                    x91 |  -.0961159   .0916737    -1.05   0.294     -.275793    .0835612
                    x92 |   .1400043   .0976573     1.43   0.152    -.0514004    .3314091
                    x93 |   .0734557   .0916967     0.80   0.423    -.1062665     .253178
                    x94 |  -.1435742   .0862727    -1.66   0.096    -.3126656    .0255172
                    x95 |  -.0212452   .0898768    -0.24   0.813    -.1974006    .1549102
                  _cons |    1.24872   .6712769     1.86   0.063    -.0669587    2.564399
-----------------------------------------------------------------------------------------

:   stata("tebalance summarize, baseline")  // I noticed the sum of weights in tebalance are weird

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        249.5
                          Control obs   =          408        250.5
                          -----------------------------------------

  -----------------------------------------------------------------
                  |           Means                  Variances     
                  |    Control     Treated       Control    Treated
  ----------------+------------------------------------------------
               x1 |        .75    .4673913      .1879607   .2516722
                  |
               x2 |
               1  |   .0269608    .0108696      .0262984   .0108696
                  |
               x3 |
               1  |   .0441176    .0217391      .0422749   .0215002
                  |
               x4 |    .495098    .4347826      .2505902   .2484472
               x5 |   26.56863    25.46739      34.50142   29.63629
               x6 |   13.15931    11.86957      5.195687   2.576206
               x7 |   6.696078    6.858696      10.90495   12.65014
              x90 |   -.048508    .0972024      .9792937   .9097065
              x91 |  -.0077434   -.0890157      1.011341   .8891627
              x92 |  -.0227801    .0453787      1.013567    1.10497
              x93 |   .0403853    .0865687      .9793358   .8741716
              x94 |   .0160559   -.1299173      .9846065   .8552718
              x95 |  -.0658282   -.0807251      1.008285   .8354051
  -----------------------------------------------------------------

:   table = DW.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4512231     .7470371     -.295814    -.6319633     .4680872     1.316024  |
   3 |        1.x2     .0114039     .0270527    -.0156488    -.1139938     .1372778     .4301765  |
   4 |        1.x3     .0240637     .0427955    -.0187318    -.1042015     .1797649     .5757804  |
   5 |          x4     .4218861     .4976147    -.0757286    -.1521333     .4977779     .9798375  |
   6 |          x5     25.44699      26.4983    -1.051311    -.1863779      5.64075      .858714  |
   7 |          x6     11.84757     13.15616    -1.308591    -.6594519     1.984361     .5205072  |
   8 |          x7     7.015422     6.717714     .2977072     .0866021     3.437643     1.149851  |
   9 |         x90     .0839738    -.0392197     .1231936     .1258938     .9785514     .9265459  |
  10 |         x91    -.0648837    -.0073142    -.0575695    -.0596653      .964873     .8980782  |
  11 |         x92     .0575388    -.0253504     .0828891     .0813611     1.018781     1.068619  |
  12 |         x93     .1016523     .0464178     .0552345     .0572377     .9650011     .9263536  |
  13 |         x94    -.1252265     .0045953    -.1298217    -.1361687     .9533888     .8528771  |
  14 |         x95    -.1044649    -.0695904    -.0348746    -.0364286     .9573389     .8141756  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' [iw=`wgtvar'], atet aequations")

Iteration 0:   EE criterion =  3.987e-18  
Iteration 1:   EE criterion =  1.444e-26  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATET                    |
                  treat |
(Treated vs Untreated)  |  -373.2561   49.21885    -7.58   0.000    -469.7233   -276.7889
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3424.879   30.82585   111.10   0.000     3364.462    3485.297
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.299227   .2371935    -5.48   0.000    -1.764118   -.8343367
                        |
                     x2 |
                     1  |  -1.630014    .746001    -2.19   0.029    -3.092149   -.1678787
                        |
                     x3 |
                     1  |  -.4513753   .5770312    -0.78   0.434    -1.582336    .6795851
                     x4 |  -.3551911    .204881    -1.73   0.083    -.7567506    .0463684
                     x5 |    .058452   .0195046     3.00   0.003     .0202237    .0966803
                     x6 |  -.2821622    .049775    -5.67   0.000    -.3797195    -.184605
                     x7 |   .0332008   .0279849     1.19   0.235    -.0216486    .0880501
                    x90 |   .1276778   .0907109     1.41   0.159    -.0501124     .305468
                    x91 |  -.0961159   .0916737    -1.05   0.294     -.275793    .0835612
                    x92 |   .1400043   .0976573     1.43   0.152    -.0514004    .3314091
                    x93 |   .0734557   .0916967     0.80   0.423    -.1062665     .253178
                    x94 |  -.1435742   .0862727    -1.66   0.096    -.3126656    .0255172
                    x95 |  -.0212452   .0898768    -0.24   0.813    -.1974006    .1549102
                  _cons |    1.24872   .6712769     1.86   0.063    -.0669587    2.564399
-----------------------------------------------------------------------------------------

:   ipw = DW.ipw("atet")
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.32795  
Iteration 2:   f(p) = -411.28929  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
Iteration 5:   f(p) = -411.19865  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.299227462   -1.630013723    -.451375265   -.3551910971    .0584519984    -.282162246    .0332007599    .1276777932   -.0961158854    .1400043185
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1     .0734557382   -.1435741845   -.0212452286    1.248719931  |
     -------------------------------------------------------------+

:   stata("tebalance summarize")  // I noticed the sum of weights in tebalance are weird

  Covariate balance summary
                                                   Raw     Weighted
                          -----------------------------------------
                          Number of obs =          500        500.0
                          Treated obs   =           92        249.5
                          Control obs   =          408        250.5
                          -----------------------------------------

  -----------------------------------------------------------------
                  |Standardized differences          Variance ratio
                  |        Raw    Weighted           Raw   Weighted
  ----------------+------------------------------------------------
               x1 |  -.6027752    .0041102      1.338962   1.000571
                  |
               x2 |
               1  |  -.1180374    .0011686      .4133173   1.011157
                  |
               x3 |
               1  |  -.1253201   -.0169419      .5085817   .8975379
                  |
               x4 |  -.1207472    .0136004      .9914484   1.003798
               x5 |  -.1944638     .003179      .8589874   .5855492
               x6 |  -.6542694    .0947099      .4958356   .5643304
               x7 |   .0473848    .0177567      1.160037   1.134687
              x90 |   .1499304    .0348222      .9289414    .817157
              x91 |  -.0833726   -.0675073      .8791918     .96061
              x92 |   .0662245   -.0005441      1.090179   1.148892
              x93 |   .0479737    -.020065      .8926169   .9606022
              x94 |  -.1521926    .0315996      .8686432   .7548902
              x95 |  -.0155155    .0398234      .8285405   .8815991
  -----------------------------------------------------------------

:   DW.multweight(ipw)

:   table = DW.balancetable(3)
                 1            2            3            4            5            6            7
     +--------------------------------------------------------------------------------------------+
   1 |    Variable     mean (T)     mean (C)       diff()    stddiff()     sd (Avg)   varratio()  |
   2 |          x1     .4512231     .4574808    -.0062577    -.0125467     .4987508     1.002016  |
   3 |        1.x2     .0114039     .0104612     .0009427     .0090496     .1041667     1.093786  |
   4 |        1.x3     .0240637     .0241722    -.0001085    -.0007058     .1536767     .9999323  |
   5 |          x4     .4218861     .4314162    -.0095301    -.0192367     .4954098     .9986039  |
   6 |          x5     25.44699     25.25275     .1942356     .0309352     6.278789     .5945665  |
   7 |          x6     11.84757     11.67955     .1680205     .0885487     1.897493     .5984287  |
   8 |          x7     7.015422     6.824197     .1912245     .0556435       3.4366     1.151353  |
   9 |         x90     .0839738     .0777469     .0062269     .0061803     1.007542     .8303562  |
  10 |         x91    -.0648837     -.033852    -.0310317    -.0329813      .940886      .990382  |
  11 |         x92     .0575388     .0480591     .0094797     .0094309     1.005171     1.130693  |
  12 |         x93     .1016523     .1032412    -.0015889    -.0016918     .9391571     1.031343  |
  13 |         x94    -.1252265    -.1745685     .0493421     .0498225     .9903584     .7439065  |
  14 |         x95    -.1044649    -.1114622     .0069973     .0074459     .9397461     .8717687  |
     +--------------------------------------------------------------------------------------------+

: 
:   stata("teffects ipw (`:word 1 of `depvars'') (`treatvar' `varlist') if `tousevar' [iw=`wgtvar'], ate aequations")

Iteration 0:   EE criterion =  3.987e-18  
Iteration 1:   EE criterion =  2.423e-25  

Treatment-effects estimation                    Number of obs     =        500
Estimator      : inverse-probability weights
Outcome model  : weighted mean
Treatment model: logit
-----------------------------------------------------------------------------------------
                        |               Robust
                     y1 |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
------------------------+----------------------------------------------------------------
ATE                     |
                  treat |
(Treated vs Untreated)  |  -332.1348   56.53175    -5.88   0.000     -442.935   -221.3346
------------------------+----------------------------------------------------------------
POmean                  |
                  treat |
             Untreated  |   3453.029    20.1341   171.50   0.000     3413.567    3492.491
------------------------+----------------------------------------------------------------
TME1                    |
                     x1 |  -1.299227   .2371935    -5.48   0.000    -1.764118   -.8343367
                        |
                     x2 |
                     1  |  -1.630014    .746001    -2.19   0.029    -3.092149   -.1678787
                        |
                     x3 |
                     1  |  -.4513753   .5770312    -0.78   0.434    -1.582336    .6795851
                     x4 |  -.3551911    .204881    -1.73   0.083    -.7567506    .0463684
                     x5 |    .058452   .0195046     3.00   0.003     .0202237    .0966803
                     x6 |  -.2821622    .049775    -5.67   0.000    -.3797195    -.184605
                     x7 |   .0332008   .0279849     1.19   0.235    -.0216486    .0880501
                    x90 |   .1276778   .0907109     1.41   0.159    -.0501124     .305468
                    x91 |  -.0961159   .0916737    -1.05   0.294     -.275793    .0835612
                    x92 |   .1400043   .0976573     1.43   0.152    -.0514004    .3314091
                    x93 |   .0734557   .0916967     0.80   0.423    -.1062665     .253178
                    x94 |  -.1435742   .0862727    -1.66   0.096    -.3126656    .0255172
                    x95 |  -.0212452   .0898768    -0.24   0.813    -.1974006    .1549102
                  _cons |    1.24872   .6712769     1.86   0.063    -.0669587    2.564399
-----------------------------------------------------------------------------------------

:   DW.multweight()

:   ipw = DW.ipw("ate")
initial:       f(p) = -681.05307
alternative:   f(p) =  -555.8915
rescale:       f(p) = -485.05844
Iteration 0:   f(p) = -485.05844  
Iteration 1:   f(p) = -436.32795  
Iteration 2:   f(p) = -411.28929  
Iteration 3:   f(p) = -411.19869  
Iteration 4:   f(p) = -411.19865  
Iteration 5:   f(p) = -411.19865  
  propensity score (logit) model beta:
                  1              2              3              4              5              6              7              8              9             10
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |  -1.299227462   -1.630013723    -.451375265   -.3551910971    .0584519984    -.282162246    .0332007599    .1276777932   -.0961158854    .1400043185
    +-------------------------------------------------------------------------------------------------------------------------------------------------------
                 11             12             13             14
     -------------------------------------------------------------+
  1     .0734557382   -.1435741845   -.0212452286    1.248719931  |
     -------------------------------------------------------------+

: 
: end  // end of Mata block
----------------------------------------------------------------------------------------------------------------------------------------------------------------

. 
. log close gmatch_example
      name:  gmatch_example
       log:  C:\Users\kkranker\Documents\Stata\Ado\Devel\gmatch\gmatch_example.log
  log type:  text
 closed on:  12 Feb 2018, 19:07:54
----------------------------------------------------------------------------------------------------------------------------------------------------------------
